
Proyecto Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ab0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08009c60  08009c60  00019c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a210  0800a210  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a210  0800a210  0001a210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a218  0800a218  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a218  0800a218  0001a218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a21c  0800a21c  0001a21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800a220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002020c  2**0
                  CONTENTS
 10 .bss          00000a18  2000020c  2000020c  0002020c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c24  20000c24  0002020c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000136c5  00000000  00000000  0002027f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d69  00000000  00000000  00033944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010c8  00000000  00000000  000366b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ce4  00000000  00000000  00037778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027990  00000000  00000000  0003845c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015e29  00000000  00000000  0005fdec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e24d8  00000000  00000000  00075c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005a80  00000000  00000000  001580f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0015db70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009c48 	.word	0x08009c48

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000210 	.word	0x20000210
 80001ec:	08009c48 	.word	0x08009c48

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001014:	f001 fa4c 	bl	80024b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001018:	f000 f810 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101c:	f000 f95c 	bl	80012d8 <MX_GPIO_Init>
  MX_ETH_Init();
 8001020:	f000 f876 	bl	8001110 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001024:	f000 f900 	bl	8001228 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001028:	f000 f928 	bl	800127c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800102c:	f000 f8be 	bl	80011ac <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



	sistema_iniciar();
 8001030:	f001 f8e8 	bl	8002204 <sistema_iniciar>
	while (1) {
		sistema_actualizar();
 8001034:	f001 f8f6 	bl	8002224 <sistema_actualizar>
	while (1) {
 8001038:	e7fc      	b.n	8001034 <main+0x24>
	...

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	; 0x50
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	2230      	movs	r2, #48	; 0x30
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f005 f9c1 	bl	80063d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	4b28      	ldr	r3, [pc, #160]	; (8001108 <SystemClock_Config+0xcc>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	4a27      	ldr	r2, [pc, #156]	; (8001108 <SystemClock_Config+0xcc>)
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106e:	6413      	str	r3, [r2, #64]	; 0x40
 8001070:	4b25      	ldr	r3, [pc, #148]	; (8001108 <SystemClock_Config+0xcc>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <SystemClock_Config+0xd0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <SystemClock_Config+0xd0>)
 8001086:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <SystemClock_Config+0xd0>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001098:	2301      	movs	r3, #1
 800109a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800109c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a2:	2302      	movs	r3, #2
 80010a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010ac:	2304      	movs	r3, #4
 80010ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010b0:	23a8      	movs	r3, #168	; 0xa8
 80010b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010b8:	2307      	movs	r3, #7
 80010ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 0320 	add.w	r3, r7, #32
 80010c0:	4618      	mov	r0, r3
 80010c2:	f002 fe5b 	bl	8003d7c <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010cc:	f000 f9b2 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
 80010d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d4:	2302      	movs	r3, #2
 80010d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	2105      	movs	r1, #5
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 f8bc 	bl	800426c <HAL_RCC_ClockConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010fa:	f000 f99b 	bl	8001434 <Error_Handler>
  }
}
 80010fe:	bf00      	nop
 8001100:	3750      	adds	r7, #80	; 0x50
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <MX_ETH_Init+0x84>)
 8001116:	4a20      	ldr	r2, [pc, #128]	; (8001198 <MX_ETH_Init+0x88>)
 8001118:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800111a:	4b20      	ldr	r3, [pc, #128]	; (800119c <MX_ETH_Init+0x8c>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <MX_ETH_Init+0x8c>)
 8001122:	2280      	movs	r2, #128	; 0x80
 8001124:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <MX_ETH_Init+0x8c>)
 8001128:	22e1      	movs	r2, #225	; 0xe1
 800112a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <MX_ETH_Init+0x8c>)
 800112e:	2200      	movs	r2, #0
 8001130:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <MX_ETH_Init+0x8c>)
 8001134:	2200      	movs	r2, #0
 8001136:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_ETH_Init+0x8c>)
 800113a:	2200      	movs	r2, #0
 800113c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_ETH_Init+0x84>)
 8001140:	4a16      	ldr	r2, [pc, #88]	; (800119c <MX_ETH_Init+0x8c>)
 8001142:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <MX_ETH_Init+0x84>)
 8001146:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800114a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_ETH_Init+0x84>)
 800114e:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <MX_ETH_Init+0x90>)
 8001150:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <MX_ETH_Init+0x84>)
 8001154:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <MX_ETH_Init+0x94>)
 8001156:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_ETH_Init+0x84>)
 800115a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800115e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <MX_ETH_Init+0x84>)
 8001162:	f001 fb21 	bl	80027a8 <HAL_ETH_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800116c:	f000 f962 	bl	8001434 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001170:	2238      	movs	r2, #56	; 0x38
 8001172:	2100      	movs	r1, #0
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <MX_ETH_Init+0x98>)
 8001176:	f005 f92c 	bl	80063d2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <MX_ETH_Init+0x98>)
 800117c:	2221      	movs	r2, #33	; 0x21
 800117e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <MX_ETH_Init+0x98>)
 8001182:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001186:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <MX_ETH_Init+0x98>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200003a0 	.word	0x200003a0
 8001198:	40028000 	.word	0x40028000
 800119c:	200009f4 	.word	0x200009f4
 80011a0:	20000300 	.word	0x20000300
 80011a4:	20000260 	.word	0x20000260
 80011a8:	20000228 	.word	0x20000228

080011ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <MX_I2C1_Init+0x74>)
 80011b2:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <MX_I2C1_Init+0x78>)
 80011b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_I2C1_Init+0x74>)
 80011b8:	2264      	movs	r2, #100	; 0x64
 80011ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_I2C1_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_I2C1_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_I2C1_Init+0x74>)
 80011ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <MX_I2C1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_I2C1_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_I2C1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_I2C1_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e8:	480d      	ldr	r0, [pc, #52]	; (8001220 <MX_I2C1_Init+0x74>)
 80011ea:	f001 ffe3 	bl	80031b4 <HAL_I2C_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011f4:	f000 f91e 	bl	8001434 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011f8:	2100      	movs	r1, #0
 80011fa:	4809      	ldr	r0, [pc, #36]	; (8001220 <MX_I2C1_Init+0x74>)
 80011fc:	f002 fc25 	bl	8003a4a <HAL_I2CEx_ConfigAnalogFilter>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001206:	f000 f915 	bl	8001434 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800120a:	2100      	movs	r1, #0
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <MX_I2C1_Init+0x74>)
 800120e:	f002 fc58 	bl	8003ac2 <HAL_I2CEx_ConfigDigitalFilter>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001218:	f000 f90c 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000450 	.word	0x20000450
 8001224:	40005400 	.word	0x40005400

08001228 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <MX_USART3_UART_Init+0x50>)
 8001230:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 8001234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001238:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 800124e:	220c      	movs	r2, #12
 8001250:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 8001260:	f003 fa24 	bl	80046ac <HAL_UART_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800126a:	f000 f8e3 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200004a4 	.word	0x200004a4
 8001278:	40004800 	.word	0x40004800

0800127c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001282:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001286:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800128a:	2204      	movs	r2, #4
 800128c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001290:	2202      	movs	r2, #2
 8001292:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800129c:	2202      	movs	r2, #2
 800129e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c0:	f002 fc3e 	bl	8003b40 <HAL_PCD_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80012ca:	f000 f8b3 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200004e8 	.word	0x200004e8

080012d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	; 0x30
 80012dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
 80012f2:	4b4c      	ldr	r3, [pc, #304]	; (8001424 <MX_GPIO_Init+0x14c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a4b      	ldr	r2, [pc, #300]	; (8001424 <MX_GPIO_Init+0x14c>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b49      	ldr	r3, [pc, #292]	; (8001424 <MX_GPIO_Init+0x14c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	4b45      	ldr	r3, [pc, #276]	; (8001424 <MX_GPIO_Init+0x14c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a44      	ldr	r2, [pc, #272]	; (8001424 <MX_GPIO_Init+0x14c>)
 8001314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b42      	ldr	r3, [pc, #264]	; (8001424 <MX_GPIO_Init+0x14c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	4b3e      	ldr	r3, [pc, #248]	; (8001424 <MX_GPIO_Init+0x14c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a3d      	ldr	r2, [pc, #244]	; (8001424 <MX_GPIO_Init+0x14c>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b3b      	ldr	r3, [pc, #236]	; (8001424 <MX_GPIO_Init+0x14c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b37      	ldr	r3, [pc, #220]	; (8001424 <MX_GPIO_Init+0x14c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a36      	ldr	r2, [pc, #216]	; (8001424 <MX_GPIO_Init+0x14c>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b34      	ldr	r3, [pc, #208]	; (8001424 <MX_GPIO_Init+0x14c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b30      	ldr	r3, [pc, #192]	; (8001424 <MX_GPIO_Init+0x14c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a2f      	ldr	r2, [pc, #188]	; (8001424 <MX_GPIO_Init+0x14c>)
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <MX_GPIO_Init+0x14c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <MX_GPIO_Init+0x14c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a28      	ldr	r2, [pc, #160]	; (8001424 <MX_GPIO_Init+0x14c>)
 8001384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b26      	ldr	r3, [pc, #152]	; (8001424 <MX_GPIO_Init+0x14c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	f244 0181 	movw	r1, #16513	; 0x4081
 800139c:	4822      	ldr	r0, [pc, #136]	; (8001428 <MX_GPIO_Init+0x150>)
 800139e:	f001 feef 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2140      	movs	r1, #64	; 0x40
 80013a6:	4821      	ldr	r0, [pc, #132]	; (800142c <MX_GPIO_Init+0x154>)
 80013a8:	f001 feea 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80013ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	481b      	ldr	r0, [pc, #108]	; (8001430 <MX_GPIO_Init+0x158>)
 80013c4:	f001 fd18 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013c8:	f244 0381 	movw	r3, #16513	; 0x4081
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	4811      	ldr	r0, [pc, #68]	; (8001428 <MX_GPIO_Init+0x150>)
 80013e2:	f001 fd09 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013e6:	2340      	movs	r3, #64	; 0x40
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4619      	mov	r1, r3
 80013fc:	480b      	ldr	r0, [pc, #44]	; (800142c <MX_GPIO_Init+0x154>)
 80013fe:	f001 fcfb 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin D0_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|D0_Pin;
 8001402:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4619      	mov	r1, r3
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_GPIO_Init+0x154>)
 8001418:	f001 fcee 	bl	8002df8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800141c:	bf00      	nop
 800141e:	3730      	adds	r7, #48	; 0x30
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40020400 	.word	0x40020400
 800142c:	40021800 	.word	0x40021800
 8001430:	40020800 	.word	0x40020800

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800143c:	e7fe      	b.n	800143c <Error_Handler+0x8>
	...

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <HAL_MspInit+0x4c>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a0f      	ldr	r2, [pc, #60]	; (800148c <HAL_MspInit+0x4c>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_MspInit+0x4c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_MspInit+0x4c>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a08      	ldr	r2, [pc, #32]	; (800148c <HAL_MspInit+0x4c>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_MspInit+0x4c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08e      	sub	sp, #56	; 0x38
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a55      	ldr	r2, [pc, #340]	; (8001604 <HAL_ETH_MspInit+0x174>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	f040 80a4 	bne.w	80015fc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
 80014b8:	4b53      	ldr	r3, [pc, #332]	; (8001608 <HAL_ETH_MspInit+0x178>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	4a52      	ldr	r2, [pc, #328]	; (8001608 <HAL_ETH_MspInit+0x178>)
 80014be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014c2:	6313      	str	r3, [r2, #48]	; 0x30
 80014c4:	4b50      	ldr	r3, [pc, #320]	; (8001608 <HAL_ETH_MspInit+0x178>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014cc:	623b      	str	r3, [r7, #32]
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
 80014d4:	4b4c      	ldr	r3, [pc, #304]	; (8001608 <HAL_ETH_MspInit+0x178>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	4a4b      	ldr	r2, [pc, #300]	; (8001608 <HAL_ETH_MspInit+0x178>)
 80014da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014de:	6313      	str	r3, [r2, #48]	; 0x30
 80014e0:	4b49      	ldr	r3, [pc, #292]	; (8001608 <HAL_ETH_MspInit+0x178>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	2300      	movs	r3, #0
 80014ee:	61bb      	str	r3, [r7, #24]
 80014f0:	4b45      	ldr	r3, [pc, #276]	; (8001608 <HAL_ETH_MspInit+0x178>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	4a44      	ldr	r2, [pc, #272]	; (8001608 <HAL_ETH_MspInit+0x178>)
 80014f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014fa:	6313      	str	r3, [r2, #48]	; 0x30
 80014fc:	4b42      	ldr	r3, [pc, #264]	; (8001608 <HAL_ETH_MspInit+0x178>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001504:	61bb      	str	r3, [r7, #24]
 8001506:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	4b3e      	ldr	r3, [pc, #248]	; (8001608 <HAL_ETH_MspInit+0x178>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	4a3d      	ldr	r2, [pc, #244]	; (8001608 <HAL_ETH_MspInit+0x178>)
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	6313      	str	r3, [r2, #48]	; 0x30
 8001518:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <HAL_ETH_MspInit+0x178>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	4b37      	ldr	r3, [pc, #220]	; (8001608 <HAL_ETH_MspInit+0x178>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	4a36      	ldr	r2, [pc, #216]	; (8001608 <HAL_ETH_MspInit+0x178>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6313      	str	r3, [r2, #48]	; 0x30
 8001534:	4b34      	ldr	r3, [pc, #208]	; (8001608 <HAL_ETH_MspInit+0x178>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	4b30      	ldr	r3, [pc, #192]	; (8001608 <HAL_ETH_MspInit+0x178>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	4a2f      	ldr	r2, [pc, #188]	; (8001608 <HAL_ETH_MspInit+0x178>)
 800154a:	f043 0302 	orr.w	r3, r3, #2
 800154e:	6313      	str	r3, [r2, #48]	; 0x30
 8001550:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <HAL_ETH_MspInit+0x178>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	4b29      	ldr	r3, [pc, #164]	; (8001608 <HAL_ETH_MspInit+0x178>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	4a28      	ldr	r2, [pc, #160]	; (8001608 <HAL_ETH_MspInit+0x178>)
 8001566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800156a:	6313      	str	r3, [r2, #48]	; 0x30
 800156c:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_ETH_MspInit+0x178>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001578:	2332      	movs	r3, #50	; 0x32
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001588:	230b      	movs	r3, #11
 800158a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	4619      	mov	r1, r3
 8001592:	481e      	ldr	r0, [pc, #120]	; (800160c <HAL_ETH_MspInit+0x17c>)
 8001594:	f001 fc30 	bl	8002df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001598:	2386      	movs	r3, #134	; 0x86
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015a8:	230b      	movs	r3, #11
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	4619      	mov	r1, r3
 80015b2:	4817      	ldr	r0, [pc, #92]	; (8001610 <HAL_ETH_MspInit+0x180>)
 80015b4:	f001 fc20 	bl	8002df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015ca:	230b      	movs	r3, #11
 80015cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d2:	4619      	mov	r1, r3
 80015d4:	480f      	ldr	r0, [pc, #60]	; (8001614 <HAL_ETH_MspInit+0x184>)
 80015d6:	f001 fc0f 	bl	8002df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80015da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015ec:	230b      	movs	r3, #11
 80015ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	4808      	ldr	r0, [pc, #32]	; (8001618 <HAL_ETH_MspInit+0x188>)
 80015f8:	f001 fbfe 	bl	8002df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80015fc:	bf00      	nop
 80015fe:	3738      	adds	r7, #56	; 0x38
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40028000 	.word	0x40028000
 8001608:	40023800 	.word	0x40023800
 800160c:	40020800 	.word	0x40020800
 8001610:	40020000 	.word	0x40020000
 8001614:	40020400 	.word	0x40020400
 8001618:	40021800 	.word	0x40021800

0800161c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <HAL_I2C_MspInit+0x84>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d12c      	bne.n	8001698 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800165a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001660:	2312      	movs	r3, #18
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800166c:	2304      	movs	r3, #4
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	480c      	ldr	r0, [pc, #48]	; (80016a8 <HAL_I2C_MspInit+0x8c>)
 8001678:	f001 fbbe 	bl	8002df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001686:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800168a:	6413      	str	r3, [r2, #64]	; 0x40
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001698:	bf00      	nop
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40005400 	.word	0x40005400
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020400 	.word	0x40020400

080016ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a19      	ldr	r2, [pc, #100]	; (8001730 <HAL_UART_MspInit+0x84>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12c      	bne.n	8001728 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a17      	ldr	r2, [pc, #92]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016f4:	f043 0308 	orr.w	r3, r3, #8
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001706:	f44f 7340 	mov.w	r3, #768	; 0x300
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001718:	2307      	movs	r3, #7
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <HAL_UART_MspInit+0x8c>)
 8001724:	f001 fb68 	bl	8002df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001728:	bf00      	nop
 800172a:	3728      	adds	r7, #40	; 0x28
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40004800 	.word	0x40004800
 8001734:	40023800 	.word	0x40023800
 8001738:	40020c00 	.word	0x40020c00

0800173c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800175c:	d13f      	bne.n	80017de <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <HAL_PCD_MspInit+0xac>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a20      	ldr	r2, [pc, #128]	; (80017e8 <HAL_PCD_MspInit+0xac>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <HAL_PCD_MspInit+0xac>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800177a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800177e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800178c:	230a      	movs	r3, #10
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	4619      	mov	r1, r3
 8001796:	4815      	ldr	r0, [pc, #84]	; (80017ec <HAL_PCD_MspInit+0xb0>)
 8001798:	f001 fb2e 	bl	8002df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800179c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	480e      	ldr	r0, [pc, #56]	; (80017ec <HAL_PCD_MspInit+0xb0>)
 80017b2:	f001 fb21 	bl	8002df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_PCD_MspInit+0xac>)
 80017b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ba:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <HAL_PCD_MspInit+0xac>)
 80017bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c0:	6353      	str	r3, [r2, #52]	; 0x34
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_PCD_MspInit+0xac>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_PCD_MspInit+0xac>)
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d0:	6453      	str	r3, [r2, #68]	; 0x44
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_PCD_MspInit+0xac>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	; 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020000 	.word	0x40020000

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <NMI_Handler+0x4>

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183c:	f000 fe8a 	bl	8002554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return 1;
 8001848:	2301      	movs	r3, #1
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <_kill>:

int _kill(int pid, int sig)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800185e:	f004 fe0b 	bl	8006478 <__errno>
 8001862:	4603      	mov	r3, r0
 8001864:	2216      	movs	r2, #22
 8001866:	601a      	str	r2, [r3, #0]
  return -1;
 8001868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_exit>:

void _exit (int status)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800187c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ffe7 	bl	8001854 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001886:	e7fe      	b.n	8001886 <_exit+0x12>

08001888 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	e00a      	b.n	80018b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800189a:	f3af 8000 	nop.w
 800189e:	4601      	mov	r1, r0
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	60ba      	str	r2, [r7, #8]
 80018a6:	b2ca      	uxtb	r2, r1
 80018a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3301      	adds	r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	dbf0      	blt.n	800189a <_read+0x12>
  }

  return len;
 80018b8:	687b      	ldr	r3, [r7, #4]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e009      	b.n	80018e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	60ba      	str	r2, [r7, #8]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbf1      	blt.n	80018d4 <_write+0x12>
  }
  return len;
 80018f0:	687b      	ldr	r3, [r7, #4]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_close>:

int _close(int file)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001922:	605a      	str	r2, [r3, #4]
  return 0;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_isatty>:

int _isatty(int file)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800196c:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <_sbrk+0x5c>)
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <_sbrk+0x60>)
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <_sbrk+0x64>)
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <_sbrk+0x68>)
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	429a      	cmp	r2, r3
 8001992:	d207      	bcs.n	80019a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001994:	f004 fd70 	bl	8006478 <__errno>
 8001998:	4603      	mov	r3, r0
 800199a:	220c      	movs	r2, #12
 800199c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019a2:	e009      	b.n	80019b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <_sbrk+0x64>)
 80019b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20030000 	.word	0x20030000
 80019c4:	00000400 	.word	0x00000400
 80019c8:	200009fc 	.word	0x200009fc
 80019cc:	20000c28 	.word	0x20000c28

080019d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <SystemInit+0x20>)
 80019d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <SystemInit+0x20>)
 80019dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019f8:	480d      	ldr	r0, [pc, #52]	; (8001a30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019fa:	490e      	ldr	r1, [pc, #56]	; (8001a34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019fc:	4a0e      	ldr	r2, [pc, #56]	; (8001a38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a00:	e002      	b.n	8001a08 <LoopCopyDataInit>

08001a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a06:	3304      	adds	r3, #4

08001a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a0c:	d3f9      	bcc.n	8001a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a10:	4c0b      	ldr	r4, [pc, #44]	; (8001a40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a14:	e001      	b.n	8001a1a <LoopFillZerobss>

08001a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a18:	3204      	adds	r2, #4

08001a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a1c:	d3fb      	bcc.n	8001a16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a1e:	f7ff ffd7 	bl	80019d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a22:	f004 fd2f 	bl	8006484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a26:	f7ff faf3 	bl	8001010 <main>
  bx  lr    
 8001a2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a2c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a34:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001a38:	0800a220 	.word	0x0800a220
  ldr r2, =_sbss
 8001a3c:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001a40:	20000c24 	.word	0x20000c24

08001a44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a44:	e7fe      	b.n	8001a44 <ADC_IRQHandler>
	...

08001a48 <buttonPressed>:
static bool_t estadoReadKey = false;

/*
 * acciones realizadas al presionar el botón
 */
static void buttonPressed() {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	estadoReadKey = true;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <buttonPressed+0x14>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
	uart_enviar_string((uint8_t *) "Botón presionado\r\n");
 8001a52:	4803      	ldr	r0, [pc, #12]	; (8001a60 <buttonPressed+0x18>)
 8001a54:	f000 fc8a 	bl	800236c <uart_enviar_string>
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000a10 	.word	0x20000a10
 8001a60:	08009c60 	.word	0x08009c60

08001a64 <buttonReleased>:

/*
 * acciones realizadas al liberar el botón
 */
static void buttonReleased() {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	uart_enviar_string((uint8_t *) "Botón liberado\r\n");
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <buttonReleased+0x10>)
 8001a6a:	f000 fc7f 	bl	800236c <uart_enviar_string>
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	08009c74 	.word	0x08009c74

08001a78 <debounceFSM_init>:

/*
 * Inicio de la MEF
 */
void debounceFSM_init() {
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
	// estado inicial
	estado = BUTTON_UP;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <debounceFSM_init+0x14>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
	// para hacer esto disponible se saca static de manejadorErrores() en API_delay.c
	// y se agrega en API_delay.h
	// if (uartInit() == false) {
	// 	manejadorErrores();
	// }
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	20000a00 	.word	0x20000a00

08001a90 <debounceFSM_update>:

/*
 * Actualiza la MEF
 */
void debounceFSM_update() {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	switch (estado) {
 8001a94:	4b39      	ldr	r3, [pc, #228]	; (8001b7c <debounceFSM_update+0xec>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d863      	bhi.n	8001b64 <debounceFSM_update+0xd4>
 8001a9c:	a201      	add	r2, pc, #4	; (adr r2, 8001aa4 <debounceFSM_update+0x14>)
 8001a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa2:	bf00      	nop
 8001aa4:	08001ab5 	.word	0x08001ab5
 8001aa8:	08001add 	.word	0x08001add
 8001aac:	08001b0d 	.word	0x08001b0d
 8001ab0:	08001b35 	.word	0x08001b35
	case BUTTON_UP:
		// realiza una lectura del botón y si se encuentra presionado
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) != 0) {
 8001ab4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ab8:	4831      	ldr	r0, [pc, #196]	; (8001b80 <debounceFSM_update+0xf0>)
 8001aba:	f001 fb49 	bl	8003150 <HAL_GPIO_ReadPin>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d052      	beq.n	8001b6a <debounceFSM_update+0xda>
			// cambia de estado
			estado = BUTTON_FALLING;
 8001ac4:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <debounceFSM_update+0xec>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
			// inicia y lee retardo anti-rebote
			delayInit(&retardo, duracionRetardo);
 8001aca:	2328      	movs	r3, #40	; 0x28
 8001acc:	4619      	mov	r1, r3
 8001ace:	482d      	ldr	r0, [pc, #180]	; (8001b84 <debounceFSM_update+0xf4>)
 8001ad0:	f000 f86c 	bl	8001bac <delayInit>
			delayRead(&retardo);
 8001ad4:	482b      	ldr	r0, [pc, #172]	; (8001b84 <debounceFSM_update+0xf4>)
 8001ad6:	f000 f881 	bl	8001bdc <delayRead>
		}
		break;
 8001ada:	e046      	b.n	8001b6a <debounceFSM_update+0xda>
	case BUTTON_FALLING:
		// verifica que se cumpla el retardo anti-rebote
		if (delayRead(&retardo)) {
 8001adc:	4829      	ldr	r0, [pc, #164]	; (8001b84 <debounceFSM_update+0xf4>)
 8001ade:	f000 f87d 	bl	8001bdc <delayRead>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d042      	beq.n	8001b6e <debounceFSM_update+0xde>
			// realiza una lectura del botón y si se encuentra presionado
			if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) != 0) {
 8001ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aec:	4824      	ldr	r0, [pc, #144]	; (8001b80 <debounceFSM_update+0xf0>)
 8001aee:	f001 fb2f 	bl	8003150 <HAL_GPIO_ReadPin>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <debounceFSM_update+0x74>
				// cambia de estado
				estado = BUTTON_DOWN;
 8001af8:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <debounceFSM_update+0xec>)
 8001afa:	2202      	movs	r2, #2
 8001afc:	701a      	strb	r2, [r3, #0]
				// invoca al evento asociado a el nuevo estado
				buttonPressed();
 8001afe:	f7ff ffa3 	bl	8001a48 <buttonPressed>
			} else {
				// si no se encuentra presionado el botón vuelve al estado original
				estado = BUTTON_UP;
			}
		}
		break;
 8001b02:	e034      	b.n	8001b6e <debounceFSM_update+0xde>
				estado = BUTTON_UP;
 8001b04:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <debounceFSM_update+0xec>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
		break;
 8001b0a:	e030      	b.n	8001b6e <debounceFSM_update+0xde>
	case BUTTON_DOWN:
		// realiza una lectura del botón y si no se encuentra presionado
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == 0) {
 8001b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b10:	481b      	ldr	r0, [pc, #108]	; (8001b80 <debounceFSM_update+0xf0>)
 8001b12:	f001 fb1d 	bl	8003150 <HAL_GPIO_ReadPin>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d12a      	bne.n	8001b72 <debounceFSM_update+0xe2>
			// cambia de estado
			estado = BUTTON_RISING;
 8001b1c:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <debounceFSM_update+0xec>)
 8001b1e:	2203      	movs	r2, #3
 8001b20:	701a      	strb	r2, [r3, #0]
			// inicia y lee retardo anti-rebote
			delayInit(&retardo, duracionRetardo);
 8001b22:	2328      	movs	r3, #40	; 0x28
 8001b24:	4619      	mov	r1, r3
 8001b26:	4817      	ldr	r0, [pc, #92]	; (8001b84 <debounceFSM_update+0xf4>)
 8001b28:	f000 f840 	bl	8001bac <delayInit>
			delayRead(&retardo);
 8001b2c:	4815      	ldr	r0, [pc, #84]	; (8001b84 <debounceFSM_update+0xf4>)
 8001b2e:	f000 f855 	bl	8001bdc <delayRead>
		}
		break;
 8001b32:	e01e      	b.n	8001b72 <debounceFSM_update+0xe2>
	case BUTTON_RISING:
		// verifica que se cumpla el retardo anti-rebote
		if (delayRead(&retardo)) {
 8001b34:	4813      	ldr	r0, [pc, #76]	; (8001b84 <debounceFSM_update+0xf4>)
 8001b36:	f000 f851 	bl	8001bdc <delayRead>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01a      	beq.n	8001b76 <debounceFSM_update+0xe6>
			// realiza una lectura del botón y si no se encuentra presionado
			if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == 0) {
 8001b40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b44:	480e      	ldr	r0, [pc, #56]	; (8001b80 <debounceFSM_update+0xf0>)
 8001b46:	f001 fb03 	bl	8003150 <HAL_GPIO_ReadPin>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d105      	bne.n	8001b5c <debounceFSM_update+0xcc>
				// cambia de estado
				estado = BUTTON_UP;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <debounceFSM_update+0xec>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
				// invoca al evento asociado a el nuevo estado
				buttonReleased();
 8001b56:	f7ff ff85 	bl	8001a64 <buttonReleased>
			} else {
				// si no se encuentra presionado el botón vuelve al estado original
				estado = BUTTON_DOWN;
			}
		}
		break;
 8001b5a:	e00c      	b.n	8001b76 <debounceFSM_update+0xe6>
				estado = BUTTON_DOWN;
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <debounceFSM_update+0xec>)
 8001b5e:	2202      	movs	r2, #2
 8001b60:	701a      	strb	r2, [r3, #0]
		break;
 8001b62:	e008      	b.n	8001b76 <debounceFSM_update+0xe6>
	default:
		debounceFSM_init();
 8001b64:	f7ff ff88 	bl	8001a78 <debounceFSM_init>
		break;
 8001b68:	e006      	b.n	8001b78 <debounceFSM_update+0xe8>
		break;
 8001b6a:	bf00      	nop
 8001b6c:	e004      	b.n	8001b78 <debounceFSM_update+0xe8>
		break;
 8001b6e:	bf00      	nop
 8001b70:	e002      	b.n	8001b78 <debounceFSM_update+0xe8>
		break;
 8001b72:	bf00      	nop
 8001b74:	e000      	b.n	8001b78 <debounceFSM_update+0xe8>
		break;
 8001b76:	bf00      	nop
	}

}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000a00 	.word	0x20000a00
 8001b80:	40020800 	.word	0x40020800
 8001b84:	20000a04 	.word	0x20000a04

08001b88 <readKey>:

/* La función readKey debe leer una variable interna del módulo y devolver true o false si la tecla es presionada.*/
bool_t readKey() {
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
	bool_t retornar = estadoReadKey;
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <readKey+0x20>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
	estadoReadKey = false;
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <readKey+0x20>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
	return retornar;
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	20000a10 	.word	0x20000a10

08001bac <delayInit>:

#include "API_delay.h"



void delayInit( delay_t * delay, tick_t duration ) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
	// se comprueba variable existente
	if (delay == NULL) {
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <delayInit+0x16>
		manejar_errores();
 8001bbc:	f000 fbf0 	bl	80023a0 <manejar_errores>
	} else {
		delay->duration = duration;
		delay->running = false;
		delay->startTime = 0; // siempre inicializar con valores
	}
}
 8001bc0:	e008      	b.n	8001bd4 <delayInit+0x28>
		delay->duration = duration;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
		delay->running = false;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	721a      	strb	r2, [r3, #8]
		delay->startTime = 0; // siempre inicializar con valores
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <delayRead>:

bool_t delayRead( delay_t * delay ) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	// varible que se usa para tener un unico punto de retorno
	bool resultado = false;
 8001be4:	2300      	movs	r3, #0
 8001be6:	73fb      	strb	r3, [r7, #15]
	if (delay == NULL) {
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <delayRead+0x18>
		manejar_errores();
 8001bee:	f000 fbd7 	bl	80023a0 <manejar_errores>
 8001bf2:	e01e      	b.n	8001c32 <delayRead+0x56>
	} else {
		// no es necesario comparar explicitamente, pero es simple de leer
		if (delay->running == false) {
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	7a1b      	ldrb	r3, [r3, #8]
 8001bf8:	f083 0301 	eor.w	r3, r3, #1
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <delayRead+0x38>
			delay->startTime = HAL_GetTick();
 8001c02:	f000 fcbb 	bl	800257c <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	601a      	str	r2, [r3, #0]
			delay->running = true;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	721a      	strb	r2, [r3, #8]
 8001c12:	e00e      	b.n	8001c32 <delayRead+0x56>
		} else {
			if (HAL_GetTick() - delay->startTime >= delay->duration) {
 8001c14:	f000 fcb2 	bl	800257c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	1ad2      	subs	r2, r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d304      	bcc.n	8001c32 <delayRead+0x56>
				delay->running = false;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	721a      	strb	r2, [r3, #8]
				resultado = true;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	73fb      	strb	r3, [r7, #15]
			}
		}
	}
	return resultado;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <interfaz_iniciar>:
static void descansar();

/* ---------------------------------- Funciones --------------------------------- */

// inicializa la interfaz de usuario en el estado que muestra datos en el lcd y por la uart
void interfaz_iniciar() {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	estado = MOSTRANDO_DATOS;
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <interfaz_iniciar+0x18>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
	estado_interno.lectura_anterior = 0;
 8001c46:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <interfaz_iniciar+0x1c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
	iniciar_mostrar_datos();
 8001c4c:	f000 f8ee 	bl	8001e2c <iniciar_mostrar_datos>
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000a11 	.word	0x20000a11
 8001c58:	20000a14 	.word	0x20000a14

08001c5c <interfaz_actualizar>:
 *  En el estado DESCANSO solo se pasan datos por la UART.
 *
 *  El cambio de estados se produce al pulsar el boton USER de la placa.
 *
 */
void interfaz_actualizar() {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
	switch (estado) {
 8001c60:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <interfaz_actualizar+0x6c>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <interfaz_actualizar+0x12>
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d011      	beq.n	8001c90 <interfaz_actualizar+0x34>
 8001c6c:	e026      	b.n	8001cbc <interfaz_actualizar+0x60>
	case MOSTRANDO_DATOS:
		if (readKey()) {
 8001c6e:	f7ff ff8b 	bl	8001b88 <readKey>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <interfaz_actualizar+0x28>
			estado = DESCANSO;
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <interfaz_actualizar+0x6c>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
			descansar();
 8001c7e:	f000 f8f1 	bl	8001e64 <descansar>
		} else {
			mostrar_datos(true, true, false);
		}
		break;
 8001c82:	e01f      	b.n	8001cc4 <interfaz_actualizar+0x68>
			mostrar_datos(true, true, false);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2101      	movs	r1, #1
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f000 f81f 	bl	8001ccc <mostrar_datos>
		break;
 8001c8e:	e019      	b.n	8001cc4 <interfaz_actualizar+0x68>
	case DESCANSO:
		if (readKey()) {
 8001c90:	f7ff ff7a 	bl	8001b88 <readKey>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00a      	beq.n	8001cb0 <interfaz_actualizar+0x54>
			estado = MOSTRANDO_DATOS;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <interfaz_actualizar+0x6c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
			iniciar_mostrar_datos();
 8001ca0:	f000 f8c4 	bl	8001e2c <iniciar_mostrar_datos>
			mostrar_datos(true, false, true);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f000 f80f 	bl	8001ccc <mostrar_datos>
		} else {
			mostrar_datos(false, true, false);
		}
		break;
 8001cae:	e009      	b.n	8001cc4 <interfaz_actualizar+0x68>
			mostrar_datos(false, true, false);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f000 f809 	bl	8001ccc <mostrar_datos>
		break;
 8001cba:	e003      	b.n	8001cc4 <interfaz_actualizar+0x68>
	default:
		estado = DESCANSO;
 8001cbc:	4b02      	ldr	r3, [pc, #8]	; (8001cc8 <interfaz_actualizar+0x6c>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
	}
}
 8001cc2:	bf00      	nop
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000a11 	.word	0x20000a11

08001ccc <mostrar_datos>:
 * @param forzar_lectura Indica si se debe forzar una nueva lectura antes de mostrar los datos.
 *
 * @return void
 */
static void mostrar_datos(bool mostrar_lcd, bool mostrar_uart,
		bool forzar_lectura) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	71bb      	strb	r3, [r7, #6]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	717b      	strb	r3, [r7, #5]
	// verifica si hay una nueva lectura
	// uint8_t nueva_lectura = sensor_fake_nueva_lectura();
	uint8_t nueva_lectura = sensor_fake_nueva_lectura();
 8001cde:	f000 fa59 	bl	8002194 <sensor_fake_nueva_lectura>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	73fb      	strb	r3, [r7, #15]
	// si hay una nueva lectura o forzar en true
	if (nueva_lectura != estado_interno.lectura_anterior || forzar_lectura) {
 8001ce6:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <mostrar_datos+0x68>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d102      	bne.n	8001cf6 <mostrar_datos+0x2a>
 8001cf0:	797b      	ldrb	r3, [r7, #5]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d01a      	beq.n	8001d2c <mostrar_datos+0x60>
		estado_interno.lectura_anterior = nueva_lectura;
 8001cf6:	4a0f      	ldr	r2, [pc, #60]	; (8001d34 <mostrar_datos+0x68>)
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	7013      	strb	r3, [r2, #0]
		// estado_interno.temperatura = sensor_fake_obtener_temperatura();
		// estado_interno.humedad = sensor_fake_obtener_humedad();
		estado_interno.temperatura = sensor_fake_obtener_temperatura();
 8001cfc:	f000 fa2e 	bl	800215c <sensor_fake_obtener_temperatura>
 8001d00:	eef0 7a40 	vmov.f32	s15, s0
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <mostrar_datos+0x68>)
 8001d06:	edc3 7a01 	vstr	s15, [r3, #4]
		estado_interno.humedad = sensor_fake_obtener_humedad();
 8001d0a:	f000 fa35 	bl	8002178 <sensor_fake_obtener_humedad>
 8001d0e:	eef0 7a40 	vmov.f32	s15, s0
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <mostrar_datos+0x68>)
 8001d14:	edc3 7a02 	vstr	s15, [r3, #8]
		if (mostrar_lcd) {
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <mostrar_datos+0x56>
			mostrar_datos_lcd();
 8001d1e:	f000 f80b 	bl	8001d38 <mostrar_datos_lcd>
		}
		if (mostrar_uart) {
 8001d22:	79bb      	ldrb	r3, [r7, #6]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <mostrar_datos+0x60>
			mostrar_datos_uart();
 8001d28:	f000 f85a 	bl	8001de0 <mostrar_datos_uart>
		}
	}
}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000a14 	.word	0x20000a14

08001d38 <mostrar_datos_lcd>:
 *
 * Esta función se encarga de mostrar los datos en un LCD.
 *
 * @return void
 */
static void mostrar_datos_lcd() {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b09a      	sub	sp, #104	; 0x68
 8001d3c:	af00      	add	r7, sp, #0
	char cadena[100];

	lcd_ubicar(0, 2);
 8001d3e:	2102      	movs	r1, #2
 8001d40:	2000      	movs	r0, #0
 8001d42:	f000 f8ea 	bl	8001f1a <lcd_ubicar>
	if (SIN_DATOS == estado_interno.temperatura) {
 8001d46:	4b23      	ldr	r3, [pc, #140]	; (8001dd4 <mostrar_datos_lcd+0x9c>)
 8001d48:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d4c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001d50:	eef4 7a47 	vcmp.f32	s15, s14
 8001d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d58:	d105      	bne.n	8001d66 <mostrar_datos_lcd+0x2e>
		sprintf(cadena, "s/d           ");
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	491e      	ldr	r1, [pc, #120]	; (8001dd8 <mostrar_datos_lcd+0xa0>)
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f004 fad4 	bl	800630c <siprintf>
 8001d64:	e00a      	b.n	8001d7c <mostrar_datos_lcd+0x44>
	} else {
		sprintf(cadena, "%2.2f         ", estado_interno.temperatura);
 8001d66:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <mostrar_datos_lcd+0x9c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fbfc 	bl	8000568 <__aeabi_f2d>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	1d38      	adds	r0, r7, #4
 8001d76:	4919      	ldr	r1, [pc, #100]	; (8001ddc <mostrar_datos_lcd+0xa4>)
 8001d78:	f004 fac8 	bl	800630c <siprintf>
	}
	lcd_escribir_string(cadena);
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f905 	bl	8001f8e <lcd_escribir_string>
	lcd_ubicar(1, 2);
 8001d84:	2102      	movs	r1, #2
 8001d86:	2001      	movs	r0, #1
 8001d88:	f000 f8c7 	bl	8001f1a <lcd_ubicar>
	if (SIN_DATOS == estado_interno.humedad) {
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <mostrar_datos_lcd+0x9c>)
 8001d8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d92:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001d96:	eef4 7a47 	vcmp.f32	s15, s14
 8001d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9e:	d105      	bne.n	8001dac <mostrar_datos_lcd+0x74>
		sprintf(cadena, "s/d           ");
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	490d      	ldr	r1, [pc, #52]	; (8001dd8 <mostrar_datos_lcd+0xa0>)
 8001da4:	4618      	mov	r0, r3
 8001da6:	f004 fab1 	bl	800630c <siprintf>
 8001daa:	e00a      	b.n	8001dc2 <mostrar_datos_lcd+0x8a>
	} else {
		sprintf(cadena, "%2.2f         ", estado_interno.humedad);
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <mostrar_datos_lcd+0x9c>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fbd9 	bl	8000568 <__aeabi_f2d>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	1d38      	adds	r0, r7, #4
 8001dbc:	4907      	ldr	r1, [pc, #28]	; (8001ddc <mostrar_datos_lcd+0xa4>)
 8001dbe:	f004 faa5 	bl	800630c <siprintf>
	}
	lcd_escribir_string(cadena);
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 f8e2 	bl	8001f8e <lcd_escribir_string>
}
 8001dca:	bf00      	nop
 8001dcc:	3768      	adds	r7, #104	; 0x68
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000a14 	.word	0x20000a14
 8001dd8:	08009c88 	.word	0x08009c88
 8001ddc:	08009c98 	.word	0x08009c98

08001de0 <mostrar_datos_uart>:
 *
 * Esta función se encarga de mostrar los datos a través de la interfaz UART.
 *
 * @return void
 */
static void mostrar_datos_uart() {
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b09c      	sub	sp, #112	; 0x70
 8001de4:	af02      	add	r7, sp, #8
	char cadena[100];
	sprintf(cadena, "Temperatura: %2.2f Humedad: %2.2f\r\n",
			estado_interno.temperatura, estado_interno.humedad);
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <mostrar_datos_uart+0x44>)
 8001de8:	685b      	ldr	r3, [r3, #4]
	sprintf(cadena, "Temperatura: %2.2f Humedad: %2.2f\r\n",
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fbbc 	bl	8000568 <__aeabi_f2d>
 8001df0:	4604      	mov	r4, r0
 8001df2:	460d      	mov	r5, r1
			estado_interno.temperatura, estado_interno.humedad);
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <mostrar_datos_uart+0x44>)
 8001df6:	689b      	ldr	r3, [r3, #8]
	sprintf(cadena, "Temperatura: %2.2f Humedad: %2.2f\r\n",
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fbb5 	bl	8000568 <__aeabi_f2d>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	1d38      	adds	r0, r7, #4
 8001e04:	e9cd 2300 	strd	r2, r3, [sp]
 8001e08:	4622      	mov	r2, r4
 8001e0a:	462b      	mov	r3, r5
 8001e0c:	4906      	ldr	r1, [pc, #24]	; (8001e28 <mostrar_datos_uart+0x48>)
 8001e0e:	f004 fa7d 	bl	800630c <siprintf>
	uart_enviar_string((uint8_t*) cadena);
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 faa9 	bl	800236c <uart_enviar_string>
}
 8001e1a:	bf00      	nop
 8001e1c:	3768      	adds	r7, #104	; 0x68
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bdb0      	pop	{r4, r5, r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000a14 	.word	0x20000a14
 8001e28:	08009ca8 	.word	0x08009ca8

08001e2c <iniciar_mostrar_datos>:
 * Esta función muestra los datos iniciales en el lcd, los cuales no cambian constantemente.
 * Se usa en el estado MOSTRANDO_DATOS.
 *
 * @return void
 */
static void iniciar_mostrar_datos() {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
	lcd_limpiar();
 8001e30:	f000 f8a2 	bl	8001f78 <lcd_limpiar>
	lcd_luz_fondo(true);
 8001e34:	2001      	movs	r0, #1
 8001e36:	f000 f8c1 	bl	8001fbc <lcd_luz_fondo>
	lcd_ubicar(0, 0);
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f000 f86c 	bl	8001f1a <lcd_ubicar>
	lcd_escribir_string("T: ");
 8001e42:	4806      	ldr	r0, [pc, #24]	; (8001e5c <iniciar_mostrar_datos+0x30>)
 8001e44:	f000 f8a3 	bl	8001f8e <lcd_escribir_string>
	lcd_ubicar(1, 0);
 8001e48:	2100      	movs	r1, #0
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f000 f865 	bl	8001f1a <lcd_ubicar>
	lcd_escribir_string("H: ");
 8001e50:	4803      	ldr	r0, [pc, #12]	; (8001e60 <iniciar_mostrar_datos+0x34>)
 8001e52:	f000 f89c 	bl	8001f8e <lcd_escribir_string>
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	08009ccc 	.word	0x08009ccc
 8001e60:	08009cd0 	.word	0x08009cd0

08001e64 <descansar>:
 *
 * Esta función muestra los datos que se visualizan en el lcd en el estado DESCANSAR.
 *
 * @return void
 */
static void descansar() {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	lcd_limpiar();
 8001e68:	f000 f886 	bl	8001f78 <lcd_limpiar>
	lcd_luz_fondo(true);
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f000 f8a5 	bl	8001fbc <lcd_luz_fondo>
	lcd_ubicar(0, 0);
 8001e72:	2100      	movs	r1, #0
 8001e74:	2000      	movs	r0, #0
 8001e76:	f000 f850 	bl	8001f1a <lcd_ubicar>
	lcd_escribir_string("Descansando");
 8001e7a:	4806      	ldr	r0, [pc, #24]	; (8001e94 <descansar+0x30>)
 8001e7c:	f000 f887 	bl	8001f8e <lcd_escribir_string>
	lcd_ubicar(1, 0);
 8001e80:	2100      	movs	r1, #0
 8001e82:	2001      	movs	r0, #1
 8001e84:	f000 f849 	bl	8001f1a <lcd_ubicar>
	lcd_escribir_string("Datos por UART");
 8001e88:	4803      	ldr	r0, [pc, #12]	; (8001e98 <descansar+0x34>)
 8001e8a:	f000 f880 	bl	8001f8e <lcd_escribir_string>
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	08009cd4 	.word	0x08009cd4
 8001e98:	08009ce0 	.word	0x08009ce0

08001e9c <lcd_iniciar>:
static void lcd_escribir_codigo(uint8_t comando, uint8_t modo);

/* ---------------------------------- Funciones --------------------------------- */

// inicia el lcd
void lcd_iniciar() {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	esperar(LCD_ESPERAR_50);
 8001ea0:	2032      	movs	r0, #50	; 0x32
 8001ea2:	f000 faf9 	bl	8002498 <esperar>
	lcd_escribir_codigo(LCD_CMD_INICIO_SET1, LCD_COMANDO);
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	f000 f8db 	bl	8002064 <lcd_escribir_codigo>
	esperar(LCD_ESPERAR_5);
 8001eae:	2005      	movs	r0, #5
 8001eb0:	f000 faf2 	bl	8002498 <esperar>
	lcd_escribir_codigo(LCD_CMD_INICIO_SET1, LCD_COMANDO);
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2003      	movs	r0, #3
 8001eb8:	f000 f8d4 	bl	8002064 <lcd_escribir_codigo>
	esperar(LCD_ESPERAR_1);
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f000 faeb 	bl	8002498 <esperar>
	lcd_escribir_codigo(LCD_CMD_INICIO_SET1, LCD_COMANDO);
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	f000 f8cd 	bl	8002064 <lcd_escribir_codigo>
	esperar(LCD_ESPERAR_1);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f000 fae4 	bl	8002498 <esperar>
	lcd_escribir_codigo(LCD_CMD_INICIO_SET2, LCD_COMANDO);
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	f000 f8c6 	bl	8002064 <lcd_escribir_codigo>
	esperar(LCD_ESPERAR_1);
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f000 fadd 	bl	8002498 <esperar>
	lcd_escribir_codigo(LCD_CMD_INICIO28, LCD_COMANDO);
 8001ede:	2100      	movs	r1, #0
 8001ee0:	2028      	movs	r0, #40	; 0x28
 8001ee2:	f000 f8bf 	bl	8002064 <lcd_escribir_codigo>
	esperar(LCD_ESPERAR_1);
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f000 fad6 	bl	8002498 <esperar>
	lcd_escribir_codigo(LCD_CMD_INICIO0C, LCD_COMANDO);
 8001eec:	2100      	movs	r1, #0
 8001eee:	200c      	movs	r0, #12
 8001ef0:	f000 f8b8 	bl	8002064 <lcd_escribir_codigo>
	esperar(LCD_ESPERAR_1);
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f000 facf 	bl	8002498 <esperar>
	lcd_escribir_codigo(LCD_CMD_INICIO06, LCD_COMANDO);
 8001efa:	2100      	movs	r1, #0
 8001efc:	2006      	movs	r0, #6
 8001efe:	f000 f8b1 	bl	8002064 <lcd_escribir_codigo>
	esperar(LCD_ESPERAR_1);
 8001f02:	2001      	movs	r0, #1
 8001f04:	f000 fac8 	bl	8002498 <esperar>
	lcd_escribir_codigo(LCD_CMD_INICIO01, LCD_COMANDO);
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f000 f8aa 	bl	8002064 <lcd_escribir_codigo>
	esperar(LCD_ESPERAR_1);
 8001f10:	2001      	movs	r0, #1
 8001f12:	f000 fac1 	bl	8002498 <esperar>
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <lcd_ubicar>:

// ubica el cursor en una fila y columna
void lcd_ubicar(uint8_t fila, uint8_t columna) {
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	460a      	mov	r2, r1
 8001f24:	71fb      	strb	r3, [r7, #7]
 8001f26:	4613      	mov	r3, r2
 8001f28:	71bb      	strb	r3, [r7, #6]
	if (fila > LCD_FILAS || columna > LCD_COLUMNAS) {
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d802      	bhi.n	8001f36 <lcd_ubicar+0x1c>
 8001f30:	79bb      	ldrb	r3, [r7, #6]
 8001f32:	2b10      	cmp	r3, #16
 8001f34:	d901      	bls.n	8001f3a <lcd_ubicar+0x20>
		manejar_errores();
 8001f36:	f000 fa33 	bl	80023a0 <manejar_errores>
	}
	uint8_t direccion;
	switch (fila) {
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <lcd_ubicar+0x2c>
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d003      	beq.n	8001f4c <lcd_ubicar+0x32>
 8001f44:	e005      	b.n	8001f52 <lcd_ubicar+0x38>
	case 0:
		direccion = LCD_LINEA_1_DIRECCION;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
		break;
 8001f4a:	e002      	b.n	8001f52 <lcd_ubicar+0x38>
	case 1:
		direccion = LCD_LINEA_2_DIRECCION;
 8001f4c:	2340      	movs	r3, #64	; 0x40
 8001f4e:	73fb      	strb	r3, [r7, #15]
		break;
 8001f50:	bf00      	nop
	}
	direccion = direccion + columna;
 8001f52:	7bfa      	ldrb	r2, [r7, #15]
 8001f54:	79bb      	ldrb	r3, [r7, #6]
 8001f56:	4413      	add	r3, r2
 8001f58:	73fb      	strb	r3, [r7, #15]
	lcd_escribir_codigo(LCD_CMD_DDRAM_DIRECCION | direccion, LCD_COMANDO);
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f87d 	bl	8002064 <lcd_escribir_codigo>
	esperar(1);
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f000 fa94 	bl	8002498 <esperar>
}
 8001f70:	bf00      	nop
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <lcd_limpiar>:

// limpia (clear) la pantalla del lcd.
void lcd_limpiar() {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	lcd_escribir_codigo(LCD_CMD_LIMPIAR, LCD_COMANDO);
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f000 f870 	bl	8002064 <lcd_escribir_codigo>
	esperar(2);
 8001f84:	2002      	movs	r0, #2
 8001f86:	f000 fa87 	bl	8002498 <esperar>
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <lcd_escribir_string>:

// escribe una cadena de texto en el lcd
void lcd_escribir_string(const char *cadena) {
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
	while (*cadena) {
 8001f96:	e007      	b.n	8001fa8 <lcd_escribir_string+0x1a>
		lcd_escribir_codigo(*cadena++, LCD_DATOS);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f85e 	bl	8002064 <lcd_escribir_codigo>
	while (*cadena) {
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f3      	bne.n	8001f98 <lcd_escribir_string+0xa>
	}
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <lcd_luz_fondo>:

// cambia el estado de luz de fondo del lcd
void lcd_luz_fondo(bool estado) {
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
	if (estado) {
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <lcd_luz_fondo+0x18>
		estado_luz_fondo = LCD_LUZ_FONDO_ENCENDIDA;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <lcd_luz_fondo+0x2c>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
	} else {
		estado_luz_fondo = LCD_LUZ_FONDO_APAGADA;
	}
}
 8001fd2:	e002      	b.n	8001fda <lcd_luz_fondo+0x1e>
		estado_luz_fondo = LCD_LUZ_FONDO_APAGADA;
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <lcd_luz_fondo+0x2c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000a20 	.word	0x20000a20

08001fec <lcd_escribir_nibble>:

/* ------------------------------ Funciones privadas ---------------------------- */

static void lcd_escribir_nibble(uint8_t valor, uint8_t modo) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	460a      	mov	r2, r1
 8001ff6:	71fb      	strb	r3, [r7, #7]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	71bb      	strb	r3, [r7, #6]
	uint8_t dato = valor << D4_BIT;
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	b2db      	uxtb	r3, r3
 8002002:	73fb      	strb	r3, [r7, #15]
	dato |= modo << RS_BIT;
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	79bb      	ldrb	r3, [r7, #6]
 8002008:	4313      	orrs	r3, r2
 800200a:	b2db      	uxtb	r3, r3
 800200c:	73fb      	strb	r3, [r7, #15]
	dato |= estado_luz_fondo << BL_BIT;
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <lcd_escribir_nibble+0x74>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	b25a      	sxtb	r2, r3
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	b25b      	sxtb	r3, r3
 800201a:	4313      	orrs	r3, r2
 800201c:	b25b      	sxtb	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	73fb      	strb	r3, [r7, #15]
	dato |= 1 << EN_BIT;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	b2db      	uxtb	r3, r3
 800202a:	73fb      	strb	r3, [r7, #15]
	I2C_transmitir(LCD_DIRECCION, &dato, LCD_LARGO_VALORES, LCD_TIEMPO_ESPERA);
 800202c:	f107 010f 	add.w	r1, r7, #15
 8002030:	2364      	movs	r3, #100	; 0x64
 8002032:	2201      	movs	r2, #1
 8002034:	2027      	movs	r0, #39	; 0x27
 8002036:	f000 fa0b 	bl	8002450 <I2C_transmitir>
	esperar(LCD_ESPERAR_1);
 800203a:	2001      	movs	r0, #1
 800203c:	f000 fa2c 	bl	8002498 <esperar>
	dato &= ~(1 << EN_BIT);
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	f023 0304 	bic.w	r3, r3, #4
 8002046:	b2db      	uxtb	r3, r3
 8002048:	73fb      	strb	r3, [r7, #15]
	I2C_transmitir(LCD_DIRECCION, &dato, LCD_LARGO_VALORES, LCD_TIEMPO_ESPERA);
 800204a:	f107 010f 	add.w	r1, r7, #15
 800204e:	2364      	movs	r3, #100	; 0x64
 8002050:	2201      	movs	r2, #1
 8002052:	2027      	movs	r0, #39	; 0x27
 8002054:	f000 f9fc 	bl	8002450 <I2C_transmitir>
}
 8002058:	bf00      	nop
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000a20 	.word	0x20000a20

08002064 <lcd_escribir_codigo>:

static void lcd_escribir_codigo(uint8_t comando, uint8_t modo) {
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	460a      	mov	r2, r1
 800206e:	71fb      	strb	r3, [r7, #7]
 8002070:	4613      	mov	r3, r2
 8002072:	71bb      	strb	r3, [r7, #6]
	if (modo != LCD_COMANDO && modo != LCD_DATOS) {
 8002074:	79bb      	ldrb	r3, [r7, #6]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d004      	beq.n	8002084 <lcd_escribir_codigo+0x20>
 800207a:	79bb      	ldrb	r3, [r7, #6]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d001      	beq.n	8002084 <lcd_escribir_codigo+0x20>
		manejar_errores();
 8002080:	f000 f98e 	bl	80023a0 <manejar_errores>
	}
	uint8_t upper_nibble = comando >> 4;
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_nibble = comando & 0x0F;
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	73bb      	strb	r3, [r7, #14]
	lcd_escribir_nibble(upper_nibble, modo);
 8002092:	79ba      	ldrb	r2, [r7, #6]
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ffa7 	bl	8001fec <lcd_escribir_nibble>
	lcd_escribir_nibble(lower_nibble, modo);
 800209e:	79ba      	ldrb	r2, [r7, #6]
 80020a0:	7bbb      	ldrb	r3, [r7, #14]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ffa1 	bl	8001fec <lcd_escribir_nibble>
}
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <sensor_fake_iniciar>:
static void sensor_fake_realizar_lectura();

/* ---------------------------------- Funciones --------------------------------- */

// inicia el sensor fake (no realiza nada, es a efectos de homogeneizar)
void sensor_fake_iniciar() {
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
	estado_interno.temperatura = -1.0;
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <sensor_fake_iniciar+0x2c>)
 80020ba:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <sensor_fake_iniciar+0x30>)
 80020bc:	601a      	str	r2, [r3, #0]
	estado_interno.humedad = -1.0;
 80020be:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <sensor_fake_iniciar+0x2c>)
 80020c0:	4a08      	ldr	r2, [pc, #32]	; (80020e4 <sensor_fake_iniciar+0x30>)
 80020c2:	605a      	str	r2, [r3, #4]
	estado_interno.siguiente_valor = -1;
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <sensor_fake_iniciar+0x2c>)
 80020c6:	22ff      	movs	r2, #255	; 0xff
 80020c8:	725a      	strb	r2, [r3, #9]
	estado_interno.nueva_lectura = -1;
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <sensor_fake_iniciar+0x2c>)
 80020cc:	22ff      	movs	r2, #255	; 0xff
 80020ce:	721a      	strb	r2, [r3, #8]
	estado = LECTURA;
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <sensor_fake_iniciar+0x34>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	20000a24 	.word	0x20000a24
 80020e4:	bf800000 	.word	0xbf800000
 80020e8:	20000a21 	.word	0x20000a21

080020ec <sensor_fake_actualizar>:

// actualiza el estado del sensor_fake
void sensor_fake_actualizar() {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	switch (estado) {
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <sensor_fake_actualizar+0x64>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01a      	beq.n	800212e <sensor_fake_actualizar+0x42>
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d122      	bne.n	8002142 <sensor_fake_actualizar+0x56>
	case LECTURA:
		sensor_fake_realizar_lectura();
 80020fc:	f000 f856 	bl	80021ac <sensor_fake_realizar_lectura>
		estado = ESPERA;
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <sensor_fake_actualizar+0x64>)
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
		delayInit(&espera, SENSOR_FAKE_ESPERA_ENTRE_LECTURAS);
 8002106:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800210a:	4812      	ldr	r0, [pc, #72]	; (8002154 <sensor_fake_actualizar+0x68>)
 800210c:	f7ff fd4e 	bl	8001bac <delayInit>
		if (estado_interno.nueva_lectura < SENSOR_FAKE_CONTROL_LECTURAS) {
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <sensor_fake_actualizar+0x6c>)
 8002112:	7a1b      	ldrb	r3, [r3, #8]
 8002114:	2b04      	cmp	r3, #4
 8002116:	d806      	bhi.n	8002126 <sensor_fake_actualizar+0x3a>
			estado_interno.nueva_lectura++;
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <sensor_fake_actualizar+0x6c>)
 800211a:	7a1b      	ldrb	r3, [r3, #8]
 800211c:	3301      	adds	r3, #1
 800211e:	b2da      	uxtb	r2, r3
 8002120:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <sensor_fake_actualizar+0x6c>)
 8002122:	721a      	strb	r2, [r3, #8]
		} else {
			estado_interno.nueva_lectura = 0;
		}
		break;
 8002124:	e012      	b.n	800214c <sensor_fake_actualizar+0x60>
			estado_interno.nueva_lectura = 0;
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <sensor_fake_actualizar+0x6c>)
 8002128:	2200      	movs	r2, #0
 800212a:	721a      	strb	r2, [r3, #8]
		break;
 800212c:	e00e      	b.n	800214c <sensor_fake_actualizar+0x60>
	case ESPERA:
		if (delayRead(&espera)) {
 800212e:	4809      	ldr	r0, [pc, #36]	; (8002154 <sensor_fake_actualizar+0x68>)
 8002130:	f7ff fd54 	bl	8001bdc <delayRead>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d007      	beq.n	800214a <sensor_fake_actualizar+0x5e>
			estado = LECTURA;
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <sensor_fake_actualizar+0x64>)
 800213c:	2201      	movs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002140:	e003      	b.n	800214a <sensor_fake_actualizar+0x5e>
	default:
		estado = ESPERA;
 8002142:	4b03      	ldr	r3, [pc, #12]	; (8002150 <sensor_fake_actualizar+0x64>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
	}
}
 8002148:	e000      	b.n	800214c <sensor_fake_actualizar+0x60>
		break;
 800214a:	bf00      	nop
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000a21 	.word	0x20000a21
 8002154:	20000a30 	.word	0x20000a30
 8002158:	20000a24 	.word	0x20000a24

0800215c <sensor_fake_obtener_temperatura>:

// retorna el valor actual de temperatura
// permite que se obtenga de forma externa el valor de temperatura
float sensor_fake_obtener_temperatura() {
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
	return estado_interno.temperatura;
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <sensor_fake_obtener_temperatura+0x18>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	ee07 3a90 	vmov	s15, r3
}
 8002168:	eeb0 0a67 	vmov.f32	s0, s15
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	20000a24 	.word	0x20000a24

08002178 <sensor_fake_obtener_humedad>:

// retorna el valor actual de temperatura
// permite que se obtenga de forma externa el valor de humedad
float sensor_fake_obtener_humedad() {
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
	return estado_interno.humedad;
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <sensor_fake_obtener_humedad+0x18>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	ee07 3a90 	vmov	s15, r3
}
 8002184:	eeb0 0a67 	vmov.f32	s0, s15
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	20000a24 	.word	0x20000a24

08002194 <sensor_fake_nueva_lectura>:

// retorna si ha realizado una nueva lectura
uint8_t sensor_fake_nueva_lectura() {
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
	return estado_interno.nueva_lectura;
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <sensor_fake_nueva_lectura+0x14>)
 800219a:	7a1b      	ldrb	r3, [r3, #8]
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000a24 	.word	0x20000a24

080021ac <sensor_fake_realizar_lectura>:
 * Esta función simula la realización de una lectura en un sensor ficticio.
 * Es posible ajustar la lógica interna según las necesidades de simulación.
 *
 * @return void
 */
static void sensor_fake_realizar_lectura() {
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
	if (estado_interno.siguiente_valor < SENSOR_FAKE_LECTURAS_ARREGLO - 1) {
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <sensor_fake_realizar_lectura+0x4c>)
 80021b2:	7a5b      	ldrb	r3, [r3, #9]
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d806      	bhi.n	80021c6 <sensor_fake_realizar_lectura+0x1a>
		estado_interno.siguiente_valor++;
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <sensor_fake_realizar_lectura+0x4c>)
 80021ba:	7a5b      	ldrb	r3, [r3, #9]
 80021bc:	3301      	adds	r3, #1
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <sensor_fake_realizar_lectura+0x4c>)
 80021c2:	725a      	strb	r2, [r3, #9]
 80021c4:	e002      	b.n	80021cc <sensor_fake_realizar_lectura+0x20>
	} else {
		estado_interno.siguiente_valor = 0;
 80021c6:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <sensor_fake_realizar_lectura+0x4c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	725a      	strb	r2, [r3, #9]
	}
	estado_interno.temperatura = valores_temperatura[estado_interno.siguiente_valor];
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <sensor_fake_realizar_lectura+0x4c>)
 80021ce:	7a5b      	ldrb	r3, [r3, #9]
 80021d0:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <sensor_fake_realizar_lectura+0x50>)
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a07      	ldr	r2, [pc, #28]	; (80021f8 <sensor_fake_realizar_lectura+0x4c>)
 80021da:	6013      	str	r3, [r2, #0]
	estado_interno.humedad = valores_humedad[estado_interno.siguiente_valor];
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <sensor_fake_realizar_lectura+0x4c>)
 80021de:	7a5b      	ldrb	r3, [r3, #9]
 80021e0:	4a07      	ldr	r2, [pc, #28]	; (8002200 <sensor_fake_realizar_lectura+0x54>)
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a03      	ldr	r2, [pc, #12]	; (80021f8 <sensor_fake_realizar_lectura+0x4c>)
 80021ea:	6053      	str	r3, [r2, #4]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000a24 	.word	0x20000a24
 80021fc:	20000004 	.word	0x20000004
 8002200:	20000020 	.word	0x20000020

08002204 <sistema_iniciar>:
 *      Author: cbiale
 */

#include <API_sistema.h>

void sistema_iniciar() {
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	// inicia el sistema: I2c, lcd, uart, interfaz
	I2C_iniciar();
 8002208:	f000 f8e2 	bl	80023d0 <I2C_iniciar>
	lcd_iniciar();
 800220c:	f7ff fe46 	bl	8001e9c <lcd_iniciar>
	uart_iniciar();
 8002210:	f000 f812 	bl	8002238 <uart_iniciar>
//	sensor_fake_iniciar();
	sensor_fake_iniciar();
 8002214:	f7ff ff4e 	bl	80020b4 <sensor_fake_iniciar>
	debounceFSM_init();
 8002218:	f7ff fc2e 	bl	8001a78 <debounceFSM_init>
	interfaz_iniciar();
 800221c:	f7ff fd0e 	bl	8001c3c <interfaz_iniciar>
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}

08002224 <sistema_actualizar>:

void sistema_actualizar() {
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
	interfaz_actualizar();
 8002228:	f7ff fd18 	bl	8001c5c <interfaz_actualizar>
	sensor_fake_actualizar();
 800222c:	f7ff ff5e 	bl	80020ec <sensor_fake_actualizar>
	// sensor_fake_actualizar();
	debounceFSM_update();
 8002230:	f7ff fc2e 	bl	8001a90 <debounceFSM_update>
}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}

08002238 <uart_iniciar>:
/*
 * Variable que mantiene el manejador de la UART
 */
static UART_HandleTypeDef UartHandle;

bool_t uart_iniciar() {
 8002238:	b580      	push	{r7, lr}
 800223a:	b09a      	sub	sp, #104	; 0x68
 800223c:	af00      	add	r7, sp, #0

	// retorna el estado del inicio de la UART
	bool_t estado = false;
 800223e:	2300      	movs	r3, #0
 8002240:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	// variable usada para imprimir datos de la UART
    char cadena[100];

	UartHandle.Instance = USART3;
 8002244:	4b3f      	ldr	r3, [pc, #252]	; (8002344 <uart_iniciar+0x10c>)
 8002246:	4a40      	ldr	r2, [pc, #256]	; (8002348 <uart_iniciar+0x110>)
 8002248:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate = 115200;
 800224a:	4b3e      	ldr	r3, [pc, #248]	; (8002344 <uart_iniciar+0x10c>)
 800224c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002250:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002252:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <uart_iniciar+0x10c>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits = UART_STOPBITS_1;
 8002258:	4b3a      	ldr	r3, [pc, #232]	; (8002344 <uart_iniciar+0x10c>)
 800225a:	2200      	movs	r2, #0
 800225c:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity = UART_PARITY_NONE;
 800225e:	4b39      	ldr	r3, [pc, #228]	; (8002344 <uart_iniciar+0x10c>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
	UartHandle.Init.Mode = UART_MODE_TX_RX;
 8002264:	4b37      	ldr	r3, [pc, #220]	; (8002344 <uart_iniciar+0x10c>)
 8002266:	220c      	movs	r2, #12
 8002268:	615a      	str	r2, [r3, #20]
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800226a:	4b36      	ldr	r3, [pc, #216]	; (8002344 <uart_iniciar+0x10c>)
 800226c:	2200      	movs	r2, #0
 800226e:	619a      	str	r2, [r3, #24]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8002270:	4b34      	ldr	r3, [pc, #208]	; (8002344 <uart_iniciar+0x10c>)
 8002272:	2200      	movs	r2, #0
 8002274:	61da      	str	r2, [r3, #28]

	// si se inicia la UART, cambia estado e imprime datos de la UART
	if (HAL_UART_Init(&UartHandle) == HAL_OK) {
 8002276:	4833      	ldr	r0, [pc, #204]	; (8002344 <uart_iniciar+0x10c>)
 8002278:	f002 fa18 	bl	80046ac <HAL_UART_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d159      	bne.n	8002336 <uart_iniciar+0xfe>
		estado = true;
 8002282:	2301      	movs	r3, #1
 8002284:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	    snprintf(cadena, sizeof(cadena), "Valores de configuración de USART:\r\n");
 8002288:	463b      	mov	r3, r7
 800228a:	4a30      	ldr	r2, [pc, #192]	; (800234c <uart_iniciar+0x114>)
 800228c:	2164      	movs	r1, #100	; 0x64
 800228e:	4618      	mov	r0, r3
 8002290:	f004 f808 	bl	80062a4 <sniprintf>
	    uart_enviar_string((uint8_t *) cadena);
 8002294:	463b      	mov	r3, r7
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f868 	bl	800236c <uart_enviar_string>
	    snprintf(cadena, sizeof(cadena), "Velocidad en baudios: %" PRIu32 " \r\n", UartHandle.Init.BaudRate);
 800229c:	4b29      	ldr	r3, [pc, #164]	; (8002344 <uart_iniciar+0x10c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4638      	mov	r0, r7
 80022a2:	4a2b      	ldr	r2, [pc, #172]	; (8002350 <uart_iniciar+0x118>)
 80022a4:	2164      	movs	r1, #100	; 0x64
 80022a6:	f003 fffd 	bl	80062a4 <sniprintf>
	    uart_enviar_string((uint8_t *) cadena);
 80022aa:	463b      	mov	r3, r7
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 f85d 	bl	800236c <uart_enviar_string>
	    snprintf(cadena, sizeof(cadena), "Largo de palabra: %" PRIu32 " \r\n", UartHandle.Init.WordLength);
 80022b2:	4b24      	ldr	r3, [pc, #144]	; (8002344 <uart_iniciar+0x10c>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	4638      	mov	r0, r7
 80022b8:	4a26      	ldr	r2, [pc, #152]	; (8002354 <uart_iniciar+0x11c>)
 80022ba:	2164      	movs	r1, #100	; 0x64
 80022bc:	f003 fff2 	bl	80062a4 <sniprintf>
	    uart_enviar_string((uint8_t *) cadena);
 80022c0:	463b      	mov	r3, r7
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f852 	bl	800236c <uart_enviar_string>
	    snprintf(cadena, sizeof(cadena), "Bits de parada: %" PRIu32 " \r\n", UartHandle.Init.StopBits);
 80022c8:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <uart_iniciar+0x10c>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4638      	mov	r0, r7
 80022ce:	4a22      	ldr	r2, [pc, #136]	; (8002358 <uart_iniciar+0x120>)
 80022d0:	2164      	movs	r1, #100	; 0x64
 80022d2:	f003 ffe7 	bl	80062a4 <sniprintf>
	    uart_enviar_string((uint8_t *) cadena);
 80022d6:	463b      	mov	r3, r7
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 f847 	bl	800236c <uart_enviar_string>
	    snprintf(cadena, sizeof(cadena), "Paridad: %" PRIu32 " \r\n", UartHandle.Init.Parity);
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <uart_iniciar+0x10c>)
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	4638      	mov	r0, r7
 80022e4:	4a1d      	ldr	r2, [pc, #116]	; (800235c <uart_iniciar+0x124>)
 80022e6:	2164      	movs	r1, #100	; 0x64
 80022e8:	f003 ffdc 	bl	80062a4 <sniprintf>
	    uart_enviar_string((uint8_t *) cadena);
 80022ec:	463b      	mov	r3, r7
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f83c 	bl	800236c <uart_enviar_string>
	    snprintf(cadena, sizeof(cadena), "Modo: %" PRIu32 " \r\n", UartHandle.Init.Mode);
 80022f4:	4b13      	ldr	r3, [pc, #76]	; (8002344 <uart_iniciar+0x10c>)
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	4638      	mov	r0, r7
 80022fa:	4a19      	ldr	r2, [pc, #100]	; (8002360 <uart_iniciar+0x128>)
 80022fc:	2164      	movs	r1, #100	; 0x64
 80022fe:	f003 ffd1 	bl	80062a4 <sniprintf>
	    uart_enviar_string((uint8_t *) cadena);
 8002302:	463b      	mov	r3, r7
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f831 	bl	800236c <uart_enviar_string>
	    snprintf(cadena, sizeof(cadena), "Control de flujo de hardware: %" PRIu32 " \r\n", UartHandle.Init.HwFlowCtl);
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <uart_iniciar+0x10c>)
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	4638      	mov	r0, r7
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <uart_iniciar+0x12c>)
 8002312:	2164      	movs	r1, #100	; 0x64
 8002314:	f003 ffc6 	bl	80062a4 <sniprintf>
	    uart_enviar_string((uint8_t *) cadena);
 8002318:	463b      	mov	r3, r7
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f826 	bl	800236c <uart_enviar_string>
	    snprintf(cadena, sizeof(cadena), "Sobre muestreo 8: %" PRIu32 " \r\n", UartHandle.Init.OverSampling);
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <uart_iniciar+0x10c>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	4638      	mov	r0, r7
 8002326:	4a10      	ldr	r2, [pc, #64]	; (8002368 <uart_iniciar+0x130>)
 8002328:	2164      	movs	r1, #100	; 0x64
 800232a:	f003 ffbb 	bl	80062a4 <sniprintf>
	    uart_enviar_string((uint8_t *) cadena);
 800232e:	463b      	mov	r3, r7
 8002330:	4618      	mov	r0, r3
 8002332:	f000 f81b 	bl	800236c <uart_enviar_string>
	}
    return estado;
 8002336:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800233a:	4618      	mov	r0, r3
 800233c:	3768      	adds	r7, #104	; 0x68
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000a3c 	.word	0x20000a3c
 8002348:	40004800 	.word	0x40004800
 800234c:	08009cf0 	.word	0x08009cf0
 8002350:	08009d18 	.word	0x08009d18
 8002354:	08009d38 	.word	0x08009d38
 8002358:	08009d54 	.word	0x08009d54
 800235c:	08009d6c 	.word	0x08009d6c
 8002360:	08009d7c 	.word	0x08009d7c
 8002364:	08009d8c 	.word	0x08009d8c
 8002368:	08009db4 	.word	0x08009db4

0800236c <uart_enviar_string>:

void uart_enviar_string(uint8_t * pstring) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	// control defensivo
	if (pstring == NULL) {
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <uart_enviar_string+0x26>
		return;
	}
	// transmite
	HAL_UART_Transmit(&UartHandle, pstring, strlen((char *)pstring), HAL_MAX_DELAY);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fd ff88 	bl	8000290 <strlen>
 8002380:	4603      	mov	r3, r0
 8002382:	b29a      	uxth	r2, r3
 8002384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4804      	ldr	r0, [pc, #16]	; (800239c <uart_enviar_string+0x30>)
 800238c:	f002 f9db 	bl	8004746 <HAL_UART_Transmit>
 8002390:	e000      	b.n	8002394 <uart_enviar_string+0x28>
		return;
 8002392:	bf00      	nop
}
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000a3c 	.word	0x20000a3c

080023a0 <manejar_errores>:
static I2C_HandleTypeDef hi2c1; // manejador de I2C

/* ---------------------------------- Funciones --------------------------------- */

// Función que detiene la ejecución del programa en caso de error.
void manejar_errores(void) {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80023a4:	2201      	movs	r2, #1
 80023a6:	2101      	movs	r1, #1
 80023a8:	4808      	ldr	r0, [pc, #32]	; (80023cc <manejar_errores+0x2c>)
 80023aa:	f000 fee9 	bl	8003180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80023ae:	2201      	movs	r2, #1
 80023b0:	2180      	movs	r1, #128	; 0x80
 80023b2:	4806      	ldr	r0, [pc, #24]	; (80023cc <manejar_errores+0x2c>)
 80023b4:	f000 fee4 	bl	8003180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80023b8:	2201      	movs	r2, #1
 80023ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023be:	4803      	ldr	r0, [pc, #12]	; (80023cc <manejar_errores+0x2c>)
 80023c0:	f000 fede 	bl	8003180 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 80023c4:	b672      	cpsid	i
}
 80023c6:	bf00      	nop
	__disable_irq();
	while (1) {
 80023c8:	e7fe      	b.n	80023c8 <manejar_errores+0x28>
 80023ca:	bf00      	nop
 80023cc:	40020400 	.word	0x40020400

080023d0 <I2C_iniciar>:
	}
}

// Inicializa el módulo I2C.
void I2C_iniciar(void) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <I2C_iniciar+0x74>)
 80023d6:	4a1c      	ldr	r2, [pc, #112]	; (8002448 <I2C_iniciar+0x78>)
 80023d8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80023da:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <I2C_iniciar+0x74>)
 80023dc:	4a1b      	ldr	r2, [pc, #108]	; (800244c <I2C_iniciar+0x7c>)
 80023de:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023e0:	4b18      	ldr	r3, [pc, #96]	; (8002444 <I2C_iniciar+0x74>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80023e6:	4b17      	ldr	r3, [pc, #92]	; (8002444 <I2C_iniciar+0x74>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023ec:	4b15      	ldr	r3, [pc, #84]	; (8002444 <I2C_iniciar+0x74>)
 80023ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023f2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <I2C_iniciar+0x74>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80023fa:	4b12      	ldr	r3, [pc, #72]	; (8002444 <I2C_iniciar+0x74>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002400:	4b10      	ldr	r3, [pc, #64]	; (8002444 <I2C_iniciar+0x74>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <I2C_iniciar+0x74>)
 8002408:	2200      	movs	r2, #0
 800240a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800240c:	480d      	ldr	r0, [pc, #52]	; (8002444 <I2C_iniciar+0x74>)
 800240e:	f000 fed1 	bl	80031b4 <HAL_I2C_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <I2C_iniciar+0x4c>
		manejar_errores();
 8002418:	f7ff ffc2 	bl	80023a0 <manejar_errores>
	}

	/** Configura el filtro analogico
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800241c:	2100      	movs	r1, #0
 800241e:	4809      	ldr	r0, [pc, #36]	; (8002444 <I2C_iniciar+0x74>)
 8002420:	f001 fb13 	bl	8003a4a <HAL_I2CEx_ConfigAnalogFilter>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <I2C_iniciar+0x5e>
			!= HAL_OK) {
		manejar_errores();
 800242a:	f7ff ffb9 	bl	80023a0 <manejar_errores>
	}

	/** Configura el filtro digital
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800242e:	2100      	movs	r1, #0
 8002430:	4804      	ldr	r0, [pc, #16]	; (8002444 <I2C_iniciar+0x74>)
 8002432:	f001 fb46 	bl	8003ac2 <HAL_I2CEx_ConfigDigitalFilter>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <I2C_iniciar+0x70>
		manejar_errores();
 800243c:	f7ff ffb0 	bl	80023a0 <manejar_errores>
	}
}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000a80 	.word	0x20000a80
 8002448:	40005400 	.word	0x40005400
 800244c:	000186a0 	.word	0x000186a0

08002450 <I2C_transmitir>:

// Transmite un dato a través del bus I2C.
void I2C_transmitir(uint16_t direccion, uint8_t *dato, uint8_t tamano,
		uint8_t tiempo_espera) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af02      	add	r7, sp, #8
 8002456:	6039      	str	r1, [r7, #0]
 8002458:	4611      	mov	r1, r2
 800245a:	461a      	mov	r2, r3
 800245c:	4603      	mov	r3, r0
 800245e:	80fb      	strh	r3, [r7, #6]
 8002460:	460b      	mov	r3, r1
 8002462:	717b      	strb	r3, [r7, #5]
 8002464:	4613      	mov	r3, r2
 8002466:	713b      	strb	r3, [r7, #4]
	if (HAL_I2C_Master_Transmit(&hi2c1, direccion << 1, dato, tamano,
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	b299      	uxth	r1, r3
 800246e:	797b      	ldrb	r3, [r7, #5]
 8002470:	b29a      	uxth	r2, r3
 8002472:	793b      	ldrb	r3, [r7, #4]
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	4613      	mov	r3, r2
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	4806      	ldr	r0, [pc, #24]	; (8002494 <I2C_transmitir+0x44>)
 800247c:	f000 ffde 	bl	800343c <HAL_I2C_Master_Transmit>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <I2C_transmitir+0x3a>
			tiempo_espera) != HAL_OK) {
		manejar_errores();
 8002486:	f7ff ff8b 	bl	80023a0 <manejar_errores>
	}
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000a80 	.word	0x20000a80

08002498 <esperar>:
		manejar_errores();
	}
}

// Espera durante un período de tiempo especificado en milisegundos
void esperar(uint32_t tiempo) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	HAL_Delay(tiempo);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f877 	bl	8002594 <HAL_Delay>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024b4:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <HAL_Init+0x40>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a0d      	ldr	r2, [pc, #52]	; (80024f0 <HAL_Init+0x40>)
 80024ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_Init+0x40>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <HAL_Init+0x40>)
 80024c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024cc:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <HAL_Init+0x40>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a07      	ldr	r2, [pc, #28]	; (80024f0 <HAL_Init+0x40>)
 80024d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d8:	2003      	movs	r0, #3
 80024da:	f000 f931 	bl	8002740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024de:	2000      	movs	r0, #0
 80024e0:	f000 f808 	bl	80024f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e4:	f7fe ffac 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40023c00 	.word	0x40023c00

080024f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024fc:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_InitTick+0x54>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <HAL_InitTick+0x58>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4619      	mov	r1, r3
 8002506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800250a:	fbb3 f3f1 	udiv	r3, r3, r1
 800250e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f93b 	bl	800278e <HAL_SYSTICK_Config>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e00e      	b.n	8002540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b0f      	cmp	r3, #15
 8002526:	d80a      	bhi.n	800253e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002528:	2200      	movs	r2, #0
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002530:	f000 f911 	bl	8002756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002534:	4a06      	ldr	r2, [pc, #24]	; (8002550 <HAL_InitTick+0x5c>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e000      	b.n	8002540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000000 	.word	0x20000000
 800254c:	20000040 	.word	0x20000040
 8002550:	2000003c 	.word	0x2000003c

08002554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_IncTick+0x20>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_IncTick+0x24>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4413      	add	r3, r2
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <HAL_IncTick+0x24>)
 8002566:	6013      	str	r3, [r2, #0]
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	20000040 	.word	0x20000040
 8002578:	20000ad4 	.word	0x20000ad4

0800257c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return uwTick;
 8002580:	4b03      	ldr	r3, [pc, #12]	; (8002590 <HAL_GetTick+0x14>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000ad4 	.word	0x20000ad4

08002594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800259c:	f7ff ffee 	bl	800257c <HAL_GetTick>
 80025a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ac:	d005      	beq.n	80025ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <HAL_Delay+0x44>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4413      	add	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ba:	bf00      	nop
 80025bc:	f7ff ffde 	bl	800257c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d8f7      	bhi.n	80025bc <HAL_Delay+0x28>
  {
  }
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000040 	.word	0x20000040

080025dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f8:	4013      	ands	r3, r2
 80025fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260e:	4a04      	ldr	r2, [pc, #16]	; (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	60d3      	str	r3, [r2, #12]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002628:	4b04      	ldr	r3, [pc, #16]	; (800263c <__NVIC_GetPriorityGrouping+0x18>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	0a1b      	lsrs	r3, r3, #8
 800262e:	f003 0307 	and.w	r3, r3, #7
}
 8002632:	4618      	mov	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	6039      	str	r1, [r7, #0]
 800264a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	2b00      	cmp	r3, #0
 8002652:	db0a      	blt.n	800266a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	490c      	ldr	r1, [pc, #48]	; (800268c <__NVIC_SetPriority+0x4c>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	440b      	add	r3, r1
 8002664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002668:	e00a      	b.n	8002680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4908      	ldr	r1, [pc, #32]	; (8002690 <__NVIC_SetPriority+0x50>)
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	3b04      	subs	r3, #4
 8002678:	0112      	lsls	r2, r2, #4
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	440b      	add	r3, r1
 800267e:	761a      	strb	r2, [r3, #24]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000e100 	.word	0xe000e100
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f1c3 0307 	rsb	r3, r3, #7
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	bf28      	it	cs
 80026b2:	2304      	movcs	r3, #4
 80026b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3304      	adds	r3, #4
 80026ba:	2b06      	cmp	r3, #6
 80026bc:	d902      	bls.n	80026c4 <NVIC_EncodePriority+0x30>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3b03      	subs	r3, #3
 80026c2:	e000      	b.n	80026c6 <NVIC_EncodePriority+0x32>
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43da      	mvns	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	401a      	ands	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	43d9      	mvns	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	4313      	orrs	r3, r2
         );
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3724      	adds	r7, #36	; 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3b01      	subs	r3, #1
 8002708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800270c:	d301      	bcc.n	8002712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800270e:	2301      	movs	r3, #1
 8002710:	e00f      	b.n	8002732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002712:	4a0a      	ldr	r2, [pc, #40]	; (800273c <SysTick_Config+0x40>)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3b01      	subs	r3, #1
 8002718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800271a:	210f      	movs	r1, #15
 800271c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002720:	f7ff ff8e 	bl	8002640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <SysTick_Config+0x40>)
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272a:	4b04      	ldr	r3, [pc, #16]	; (800273c <SysTick_Config+0x40>)
 800272c:	2207      	movs	r2, #7
 800272e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	e000e010 	.word	0xe000e010

08002740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff ff47 	bl	80025dc <__NVIC_SetPriorityGrouping>
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002756:	b580      	push	{r7, lr}
 8002758:	b086      	sub	sp, #24
 800275a:	af00      	add	r7, sp, #0
 800275c:	4603      	mov	r3, r0
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
 8002762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002768:	f7ff ff5c 	bl	8002624 <__NVIC_GetPriorityGrouping>
 800276c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	6978      	ldr	r0, [r7, #20]
 8002774:	f7ff ff8e 	bl	8002694 <NVIC_EncodePriority>
 8002778:	4602      	mov	r2, r0
 800277a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff5d 	bl	8002640 <__NVIC_SetPriority>
}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ffb0 	bl	80026fc <SysTick_Config>
 800279c:	4603      	mov	r3, r0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e06c      	b.n	8002894 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d106      	bne.n	80027d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2223      	movs	r2, #35	; 0x23
 80027c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7fe fe5f 	bl	8001490 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	4b31      	ldr	r3, [pc, #196]	; (800289c <HAL_ETH_Init+0xf4>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	4a30      	ldr	r2, [pc, #192]	; (800289c <HAL_ETH_Init+0xf4>)
 80027dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e0:	6453      	str	r3, [r2, #68]	; 0x44
 80027e2:	4b2e      	ldr	r3, [pc, #184]	; (800289c <HAL_ETH_Init+0xf4>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80027ee:	4b2c      	ldr	r3, [pc, #176]	; (80028a0 <HAL_ETH_Init+0xf8>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4a2b      	ldr	r2, [pc, #172]	; (80028a0 <HAL_ETH_Init+0xf8>)
 80027f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027f8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80027fa:	4b29      	ldr	r3, [pc, #164]	; (80028a0 <HAL_ETH_Init+0xf8>)
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	4927      	ldr	r1, [pc, #156]	; (80028a0 <HAL_ETH_Init+0xf8>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002808:	4b25      	ldr	r3, [pc, #148]	; (80028a0 <HAL_ETH_Init+0xf8>)
 800280a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002822:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002824:	f7ff feaa 	bl	800257c <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800282a:	e011      	b.n	8002850 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800282c:	f7ff fea6 	bl	800257c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800283a:	d909      	bls.n	8002850 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2204      	movs	r2, #4
 8002840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	22e0      	movs	r2, #224	; 0xe0
 8002848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e021      	b.n	8002894 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1e4      	bne.n	800282c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f958 	bl	8002b18 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f9ff 	bl	8002c6c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fa55 	bl	8002d1e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	461a      	mov	r2, r3
 800287a:	2100      	movs	r1, #0
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f9bd 	bl	8002bfc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2210      	movs	r2, #16
 800288e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	40013800 	.word	0x40013800

080028a4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4b51      	ldr	r3, [pc, #324]	; (8002a00 <ETH_SetMACConfig+0x15c>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	7c1b      	ldrb	r3, [r3, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d102      	bne.n	80028cc <ETH_SetMACConfig+0x28>
 80028c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80028ca:	e000      	b.n	80028ce <ETH_SetMACConfig+0x2a>
 80028cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	7c5b      	ldrb	r3, [r3, #17]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <ETH_SetMACConfig+0x38>
 80028d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028da:	e000      	b.n	80028de <ETH_SetMACConfig+0x3a>
 80028dc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80028e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	7fdb      	ldrb	r3, [r3, #31]
 80028ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80028ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80028f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	7f92      	ldrb	r2, [r2, #30]
 80028f8:	2a00      	cmp	r2, #0
 80028fa:	d102      	bne.n	8002902 <ETH_SetMACConfig+0x5e>
 80028fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002900:	e000      	b.n	8002904 <ETH_SetMACConfig+0x60>
 8002902:	2200      	movs	r2, #0
                        macconf->Speed |
 8002904:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	7f1b      	ldrb	r3, [r3, #28]
 800290a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800290c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002912:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	791b      	ldrb	r3, [r3, #4]
 8002918:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800291a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002922:	2a00      	cmp	r2, #0
 8002924:	d102      	bne.n	800292c <ETH_SetMACConfig+0x88>
 8002926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800292a:	e000      	b.n	800292e <ETH_SetMACConfig+0x8a>
 800292c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800292e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	7bdb      	ldrb	r3, [r3, #15]
 8002934:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002936:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800293c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002944:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002946:	4313      	orrs	r3, r2
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800295e:	2001      	movs	r0, #1
 8002960:	f7ff fe18 	bl	8002594 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	f64f 7341 	movw	r3, #65345	; 0xff41
 800297a:	4013      	ands	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800298a:	2a00      	cmp	r2, #0
 800298c:	d101      	bne.n	8002992 <ETH_SetMACConfig+0xee>
 800298e:	2280      	movs	r2, #128	; 0x80
 8002990:	e000      	b.n	8002994 <ETH_SetMACConfig+0xf0>
 8002992:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002994:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800299a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80029a2:	2a01      	cmp	r2, #1
 80029a4:	d101      	bne.n	80029aa <ETH_SetMACConfig+0x106>
 80029a6:	2208      	movs	r2, #8
 80029a8:	e000      	b.n	80029ac <ETH_SetMACConfig+0x108>
 80029aa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80029ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80029b4:	2a01      	cmp	r2, #1
 80029b6:	d101      	bne.n	80029bc <ETH_SetMACConfig+0x118>
 80029b8:	2204      	movs	r2, #4
 80029ba:	e000      	b.n	80029be <ETH_SetMACConfig+0x11a>
 80029bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80029be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80029c6:	2a01      	cmp	r2, #1
 80029c8:	d101      	bne.n	80029ce <ETH_SetMACConfig+0x12a>
 80029ca:	2202      	movs	r2, #2
 80029cc:	e000      	b.n	80029d0 <ETH_SetMACConfig+0x12c>
 80029ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029d0:	4313      	orrs	r3, r2
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029e8:	2001      	movs	r0, #1
 80029ea:	f7ff fdd3 	bl	8002594 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	619a      	str	r2, [r3, #24]
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	ff20810f 	.word	0xff20810f

08002a04 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4b3d      	ldr	r3, [pc, #244]	; (8002b14 <ETH_SetDMAConfig+0x110>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	7b1b      	ldrb	r3, [r3, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d102      	bne.n	8002a30 <ETH_SetDMAConfig+0x2c>
 8002a2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a2e:	e000      	b.n	8002a32 <ETH_SetDMAConfig+0x2e>
 8002a30:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	7b5b      	ldrb	r3, [r3, #13]
 8002a36:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a38:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	7f52      	ldrb	r2, [r2, #29]
 8002a3e:	2a00      	cmp	r2, #0
 8002a40:	d102      	bne.n	8002a48 <ETH_SetDMAConfig+0x44>
 8002a42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a46:	e000      	b.n	8002a4a <ETH_SetDMAConfig+0x46>
 8002a48:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	7b9b      	ldrb	r3, [r3, #14]
 8002a50:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a52:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a58:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	7f1b      	ldrb	r3, [r3, #28]
 8002a5e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002a60:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	7f9b      	ldrb	r3, [r3, #30]
 8002a66:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a68:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a76:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	f7ff fd7a 	bl	8002594 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	791b      	ldrb	r3, [r3, #4]
 8002ab2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ab8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002abe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ac4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002acc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002ace:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ad6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002adc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ae6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002aea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002af8:	2001      	movs	r0, #1
 8002afa:	f7ff fd4b 	bl	8002594 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	f8de3f23 	.word	0xf8de3f23

08002b18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b0a6      	sub	sp, #152	; 0x98
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002b20:	2301      	movs	r3, #1
 8002b22:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002b26:	2301      	movs	r3, #1
 8002b28:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b36:	2301      	movs	r3, #1
 8002b38:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b54:	2300      	movs	r3, #0
 8002b56:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b7e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b90:	4619      	mov	r1, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff fe86 	bl	80028a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bcc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002bce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bd2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002bd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bd8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002be8:	f107 0308 	add.w	r3, r7, #8
 8002bec:	4619      	mov	r1, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff ff08 	bl	8002a04 <ETH_SetDMAConfig>
}
 8002bf4:	bf00      	nop
 8002bf6:	3798      	adds	r7, #152	; 0x98
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3305      	adds	r3, #5
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	3204      	adds	r2, #4
 8002c14:	7812      	ldrb	r2, [r2, #0]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <ETH_MACAddressConfig+0x68>)
 8002c1e:	4413      	add	r3, r2
 8002c20:	461a      	mov	r2, r3
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3303      	adds	r3, #3
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	061a      	lsls	r2, r3, #24
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3302      	adds	r3, #2
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	041b      	lsls	r3, r3, #16
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	4313      	orrs	r3, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	7812      	ldrb	r2, [r2, #0]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <ETH_MACAddressConfig+0x6c>)
 8002c4e:	4413      	add	r3, r2
 8002c50:	461a      	mov	r2, r3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	6013      	str	r3, [r2, #0]
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40028040 	.word	0x40028040
 8002c68:	40028044 	.word	0x40028044

08002c6c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	e03e      	b.n	8002cf8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68d9      	ldr	r1, [r3, #12]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	440b      	add	r3, r1
 8002c8a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2200      	movs	r2, #0
 8002c96:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	3206      	adds	r2, #6
 8002cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d80c      	bhi.n	8002cdc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68d9      	ldr	r1, [r3, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	440b      	add	r3, r1
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	e004      	b.n	8002ce6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d9bd      	bls.n	8002c7a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d10:	611a      	str	r2, [r3, #16]
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	e046      	b.n	8002dba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6919      	ldr	r1, [r3, #16]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2200      	movs	r2, #0
 8002d48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2200      	movs	r2, #0
 8002d54:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d68:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002d70:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	3212      	adds	r2, #18
 8002d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d80c      	bhi.n	8002daa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6919      	ldr	r1, [r3, #16]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	461a      	mov	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	60da      	str	r2, [r3, #12]
 8002da8:	e004      	b.n	8002db4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	461a      	mov	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3301      	adds	r3, #1
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d9b5      	bls.n	8002d2c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dea:	60da      	str	r2, [r3, #12]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	; 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	e177      	b.n	8003104 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e14:	2201      	movs	r2, #1
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	f040 8166 	bne.w	80030fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d005      	beq.n	8002e4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d130      	bne.n	8002eac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	2203      	movs	r2, #3
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e80:	2201      	movs	r2, #1
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 0201 	and.w	r2, r3, #1
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d017      	beq.n	8002ee8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d123      	bne.n	8002f3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	08da      	lsrs	r2, r3, #3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3208      	adds	r2, #8
 8002efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	220f      	movs	r2, #15
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	08da      	lsrs	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3208      	adds	r2, #8
 8002f36:	69b9      	ldr	r1, [r7, #24]
 8002f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	2203      	movs	r2, #3
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 0203 	and.w	r2, r3, #3
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80c0 	beq.w	80030fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	4b66      	ldr	r3, [pc, #408]	; (800311c <HAL_GPIO_Init+0x324>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	4a65      	ldr	r2, [pc, #404]	; (800311c <HAL_GPIO_Init+0x324>)
 8002f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8e:	4b63      	ldr	r3, [pc, #396]	; (800311c <HAL_GPIO_Init+0x324>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f9a:	4a61      	ldr	r2, [pc, #388]	; (8003120 <HAL_GPIO_Init+0x328>)
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a58      	ldr	r2, [pc, #352]	; (8003124 <HAL_GPIO_Init+0x32c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d037      	beq.n	8003036 <HAL_GPIO_Init+0x23e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a57      	ldr	r2, [pc, #348]	; (8003128 <HAL_GPIO_Init+0x330>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d031      	beq.n	8003032 <HAL_GPIO_Init+0x23a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a56      	ldr	r2, [pc, #344]	; (800312c <HAL_GPIO_Init+0x334>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d02b      	beq.n	800302e <HAL_GPIO_Init+0x236>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a55      	ldr	r2, [pc, #340]	; (8003130 <HAL_GPIO_Init+0x338>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d025      	beq.n	800302a <HAL_GPIO_Init+0x232>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a54      	ldr	r2, [pc, #336]	; (8003134 <HAL_GPIO_Init+0x33c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d01f      	beq.n	8003026 <HAL_GPIO_Init+0x22e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a53      	ldr	r2, [pc, #332]	; (8003138 <HAL_GPIO_Init+0x340>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d019      	beq.n	8003022 <HAL_GPIO_Init+0x22a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_GPIO_Init+0x344>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_GPIO_Init+0x226>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a51      	ldr	r2, [pc, #324]	; (8003140 <HAL_GPIO_Init+0x348>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00d      	beq.n	800301a <HAL_GPIO_Init+0x222>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a50      	ldr	r2, [pc, #320]	; (8003144 <HAL_GPIO_Init+0x34c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d007      	beq.n	8003016 <HAL_GPIO_Init+0x21e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a4f      	ldr	r2, [pc, #316]	; (8003148 <HAL_GPIO_Init+0x350>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <HAL_GPIO_Init+0x21a>
 800300e:	2309      	movs	r3, #9
 8003010:	e012      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003012:	230a      	movs	r3, #10
 8003014:	e010      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003016:	2308      	movs	r3, #8
 8003018:	e00e      	b.n	8003038 <HAL_GPIO_Init+0x240>
 800301a:	2307      	movs	r3, #7
 800301c:	e00c      	b.n	8003038 <HAL_GPIO_Init+0x240>
 800301e:	2306      	movs	r3, #6
 8003020:	e00a      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003022:	2305      	movs	r3, #5
 8003024:	e008      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003026:	2304      	movs	r3, #4
 8003028:	e006      	b.n	8003038 <HAL_GPIO_Init+0x240>
 800302a:	2303      	movs	r3, #3
 800302c:	e004      	b.n	8003038 <HAL_GPIO_Init+0x240>
 800302e:	2302      	movs	r3, #2
 8003030:	e002      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003036:	2300      	movs	r3, #0
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	f002 0203 	and.w	r2, r2, #3
 800303e:	0092      	lsls	r2, r2, #2
 8003040:	4093      	lsls	r3, r2
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003048:	4935      	ldr	r1, [pc, #212]	; (8003120 <HAL_GPIO_Init+0x328>)
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	3302      	adds	r3, #2
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003056:	4b3d      	ldr	r3, [pc, #244]	; (800314c <HAL_GPIO_Init+0x354>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800307a:	4a34      	ldr	r2, [pc, #208]	; (800314c <HAL_GPIO_Init+0x354>)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003080:	4b32      	ldr	r3, [pc, #200]	; (800314c <HAL_GPIO_Init+0x354>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030a4:	4a29      	ldr	r2, [pc, #164]	; (800314c <HAL_GPIO_Init+0x354>)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030aa:	4b28      	ldr	r3, [pc, #160]	; (800314c <HAL_GPIO_Init+0x354>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ce:	4a1f      	ldr	r2, [pc, #124]	; (800314c <HAL_GPIO_Init+0x354>)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030d4:	4b1d      	ldr	r3, [pc, #116]	; (800314c <HAL_GPIO_Init+0x354>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030f8:	4a14      	ldr	r2, [pc, #80]	; (800314c <HAL_GPIO_Init+0x354>)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3301      	adds	r3, #1
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b0f      	cmp	r3, #15
 8003108:	f67f ae84 	bls.w	8002e14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3724      	adds	r7, #36	; 0x24
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800
 8003120:	40013800 	.word	0x40013800
 8003124:	40020000 	.word	0x40020000
 8003128:	40020400 	.word	0x40020400
 800312c:	40020800 	.word	0x40020800
 8003130:	40020c00 	.word	0x40020c00
 8003134:	40021000 	.word	0x40021000
 8003138:	40021400 	.word	0x40021400
 800313c:	40021800 	.word	0x40021800
 8003140:	40021c00 	.word	0x40021c00
 8003144:	40022000 	.word	0x40022000
 8003148:	40022400 	.word	0x40022400
 800314c:	40013c00 	.word	0x40013c00

08003150 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	887b      	ldrh	r3, [r7, #2]
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
 800316c:	e001      	b.n	8003172 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800316e:	2300      	movs	r3, #0
 8003170:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003172:	7bfb      	ldrb	r3, [r7, #15]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
 800318c:	4613      	mov	r3, r2
 800318e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003190:	787b      	ldrb	r3, [r7, #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800319c:	e003      	b.n	80031a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800319e:	887b      	ldrh	r3, [r7, #2]
 80031a0:	041a      	lsls	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	619a      	str	r2, [r3, #24]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e12b      	b.n	800341e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fe fa1e 	bl	800161c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2224      	movs	r2, #36	; 0x24
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003206:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003216:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003218:	f001 fa20 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 800321c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4a81      	ldr	r2, [pc, #516]	; (8003428 <HAL_I2C_Init+0x274>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d807      	bhi.n	8003238 <HAL_I2C_Init+0x84>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4a80      	ldr	r2, [pc, #512]	; (800342c <HAL_I2C_Init+0x278>)
 800322c:	4293      	cmp	r3, r2
 800322e:	bf94      	ite	ls
 8003230:	2301      	movls	r3, #1
 8003232:	2300      	movhi	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e006      	b.n	8003246 <HAL_I2C_Init+0x92>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a7d      	ldr	r2, [pc, #500]	; (8003430 <HAL_I2C_Init+0x27c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	bf94      	ite	ls
 8003240:	2301      	movls	r3, #1
 8003242:	2300      	movhi	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e0e7      	b.n	800341e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4a78      	ldr	r2, [pc, #480]	; (8003434 <HAL_I2C_Init+0x280>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	0c9b      	lsrs	r3, r3, #18
 8003258:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4a6a      	ldr	r2, [pc, #424]	; (8003428 <HAL_I2C_Init+0x274>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d802      	bhi.n	8003288 <HAL_I2C_Init+0xd4>
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	3301      	adds	r3, #1
 8003286:	e009      	b.n	800329c <HAL_I2C_Init+0xe8>
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	4a69      	ldr	r2, [pc, #420]	; (8003438 <HAL_I2C_Init+0x284>)
 8003294:	fba2 2303 	umull	r2, r3, r2, r3
 8003298:	099b      	lsrs	r3, r3, #6
 800329a:	3301      	adds	r3, #1
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	495c      	ldr	r1, [pc, #368]	; (8003428 <HAL_I2C_Init+0x274>)
 80032b8:	428b      	cmp	r3, r1
 80032ba:	d819      	bhi.n	80032f0 <HAL_I2C_Init+0x13c>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1e59      	subs	r1, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ca:	1c59      	adds	r1, r3, #1
 80032cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032d0:	400b      	ands	r3, r1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_I2C_Init+0x138>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1e59      	subs	r1, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032e4:	3301      	adds	r3, #1
 80032e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ea:	e051      	b.n	8003390 <HAL_I2C_Init+0x1dc>
 80032ec:	2304      	movs	r3, #4
 80032ee:	e04f      	b.n	8003390 <HAL_I2C_Init+0x1dc>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d111      	bne.n	800331c <HAL_I2C_Init+0x168>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1e58      	subs	r0, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	440b      	add	r3, r1
 8003306:	fbb0 f3f3 	udiv	r3, r0, r3
 800330a:	3301      	adds	r3, #1
 800330c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	e012      	b.n	8003342 <HAL_I2C_Init+0x18e>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1e58      	subs	r0, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	0099      	lsls	r1, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003332:	3301      	adds	r3, #1
 8003334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_I2C_Init+0x196>
 8003346:	2301      	movs	r3, #1
 8003348:	e022      	b.n	8003390 <HAL_I2C_Init+0x1dc>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10e      	bne.n	8003370 <HAL_I2C_Init+0x1bc>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1e58      	subs	r0, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6859      	ldr	r1, [r3, #4]
 800335a:	460b      	mov	r3, r1
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	440b      	add	r3, r1
 8003360:	fbb0 f3f3 	udiv	r3, r0, r3
 8003364:	3301      	adds	r3, #1
 8003366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800336a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800336e:	e00f      	b.n	8003390 <HAL_I2C_Init+0x1dc>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1e58      	subs	r0, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	0099      	lsls	r1, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	fbb0 f3f3 	udiv	r3, r0, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	6809      	ldr	r1, [r1, #0]
 8003394:	4313      	orrs	r3, r2
 8003396:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69da      	ldr	r2, [r3, #28]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6911      	ldr	r1, [r2, #16]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	68d2      	ldr	r2, [r2, #12]
 80033ca:	4311      	orrs	r1, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	430b      	orrs	r3, r1
 80033d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	000186a0 	.word	0x000186a0
 800342c:	001e847f 	.word	0x001e847f
 8003430:	003d08ff 	.word	0x003d08ff
 8003434:	431bde83 	.word	0x431bde83
 8003438:	10624dd3 	.word	0x10624dd3

0800343c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	607a      	str	r2, [r7, #4]
 8003446:	461a      	mov	r2, r3
 8003448:	460b      	mov	r3, r1
 800344a:	817b      	strh	r3, [r7, #10]
 800344c:	4613      	mov	r3, r2
 800344e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003450:	f7ff f894 	bl	800257c <HAL_GetTick>
 8003454:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b20      	cmp	r3, #32
 8003460:	f040 80e0 	bne.w	8003624 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2319      	movs	r3, #25
 800346a:	2201      	movs	r2, #1
 800346c:	4970      	ldr	r1, [pc, #448]	; (8003630 <HAL_I2C_Master_Transmit+0x1f4>)
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f964 	bl	800373c <I2C_WaitOnFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800347a:	2302      	movs	r3, #2
 800347c:	e0d3      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_I2C_Master_Transmit+0x50>
 8003488:	2302      	movs	r3, #2
 800348a:	e0cc      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1ea>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d007      	beq.n	80034b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0201 	orr.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2221      	movs	r2, #33	; 0x21
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2210      	movs	r2, #16
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	893a      	ldrh	r2, [r7, #8]
 80034e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4a50      	ldr	r2, [pc, #320]	; (8003634 <HAL_I2C_Master_Transmit+0x1f8>)
 80034f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034f4:	8979      	ldrh	r1, [r7, #10]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	6a3a      	ldr	r2, [r7, #32]
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 f89c 	bl	8003638 <I2C_MasterRequestWrite>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e08d      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003520:	e066      	b.n	80035f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	6a39      	ldr	r1, [r7, #32]
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f9de 	bl	80038e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00d      	beq.n	800354e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	2b04      	cmp	r3, #4
 8003538:	d107      	bne.n	800354a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003548:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e06b      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b04      	cmp	r3, #4
 800358a:	d11b      	bne.n	80035c4 <HAL_I2C_Master_Transmit+0x188>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003590:	2b00      	cmp	r3, #0
 8003592:	d017      	beq.n	80035c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	781a      	ldrb	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	6a39      	ldr	r1, [r7, #32]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f9ce 	bl	800396a <I2C_WaitOnBTFFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00d      	beq.n	80035f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d107      	bne.n	80035ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e01a      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d194      	bne.n	8003522 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	e000      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003624:	2302      	movs	r3, #2
  }
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	00100002 	.word	0x00100002
 8003634:	ffff0000 	.word	0xffff0000

08003638 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af02      	add	r7, sp, #8
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	460b      	mov	r3, r1
 8003646:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b08      	cmp	r3, #8
 8003652:	d006      	beq.n	8003662 <I2C_MasterRequestWrite+0x2a>
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d003      	beq.n	8003662 <I2C_MasterRequestWrite+0x2a>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003660:	d108      	bne.n	8003674 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	e00b      	b.n	800368c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	2b12      	cmp	r3, #18
 800367a:	d107      	bne.n	800368c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800368a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f84f 	bl	800373c <I2C_WaitOnFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00d      	beq.n	80036c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b2:	d103      	bne.n	80036bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e035      	b.n	800372c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036c8:	d108      	bne.n	80036dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ca:	897b      	ldrh	r3, [r7, #10]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036d8:	611a      	str	r2, [r3, #16]
 80036da:	e01b      	b.n	8003714 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036dc:	897b      	ldrh	r3, [r7, #10]
 80036de:	11db      	asrs	r3, r3, #7
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	f003 0306 	and.w	r3, r3, #6
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	f063 030f 	orn	r3, r3, #15
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	490e      	ldr	r1, [pc, #56]	; (8003734 <I2C_MasterRequestWrite+0xfc>)
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f875 	bl	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e010      	b.n	800372c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800370a:	897b      	ldrh	r3, [r7, #10]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	4907      	ldr	r1, [pc, #28]	; (8003738 <I2C_MasterRequestWrite+0x100>)
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f865 	bl	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	00010008 	.word	0x00010008
 8003738:	00010002 	.word	0x00010002

0800373c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	4613      	mov	r3, r2
 800374a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800374c:	e025      	b.n	800379a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003754:	d021      	beq.n	800379a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003756:	f7fe ff11 	bl	800257c <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d302      	bcc.n	800376c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d116      	bne.n	800379a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f043 0220 	orr.w	r2, r3, #32
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e023      	b.n	80037e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	0c1b      	lsrs	r3, r3, #16
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d10d      	bne.n	80037c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	43da      	mvns	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4013      	ands	r3, r2
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	bf0c      	ite	eq
 80037b6:	2301      	moveq	r3, #1
 80037b8:	2300      	movne	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	e00c      	b.n	80037da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	43da      	mvns	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4013      	ands	r3, r2
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	bf0c      	ite	eq
 80037d2:	2301      	moveq	r3, #1
 80037d4:	2300      	movne	r3, #0
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	461a      	mov	r2, r3
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d0b6      	beq.n	800374e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037f8:	e051      	b.n	800389e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003808:	d123      	bne.n	8003852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003818:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003822:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f043 0204 	orr.w	r2, r3, #4
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e046      	b.n	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003858:	d021      	beq.n	800389e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385a:	f7fe fe8f 	bl	800257c <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	429a      	cmp	r2, r3
 8003868:	d302      	bcc.n	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d116      	bne.n	800389e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e020      	b.n	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	0c1b      	lsrs	r3, r3, #16
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d10c      	bne.n	80038c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	43da      	mvns	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4013      	ands	r3, r2
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	bf14      	ite	ne
 80038ba:	2301      	movne	r3, #1
 80038bc:	2300      	moveq	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	e00b      	b.n	80038da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	43da      	mvns	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4013      	ands	r3, r2
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf14      	ite	ne
 80038d4:	2301      	movne	r3, #1
 80038d6:	2300      	moveq	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d18d      	bne.n	80037fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038f4:	e02d      	b.n	8003952 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f878 	bl	80039ec <I2C_IsAcknowledgeFailed>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e02d      	b.n	8003962 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800390c:	d021      	beq.n	8003952 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390e:	f7fe fe35 	bl	800257c <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	429a      	cmp	r2, r3
 800391c:	d302      	bcc.n	8003924 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d116      	bne.n	8003952 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f043 0220 	orr.w	r2, r3, #32
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e007      	b.n	8003962 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395c:	2b80      	cmp	r3, #128	; 0x80
 800395e:	d1ca      	bne.n	80038f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003976:	e02d      	b.n	80039d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f837 	bl	80039ec <I2C_IsAcknowledgeFailed>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e02d      	b.n	80039e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800398e:	d021      	beq.n	80039d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003990:	f7fe fdf4 	bl	800257c <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	429a      	cmp	r2, r3
 800399e:	d302      	bcc.n	80039a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d116      	bne.n	80039d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f043 0220 	orr.w	r2, r3, #32
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e007      	b.n	80039e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d1ca      	bne.n	8003978 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a02:	d11b      	bne.n	8003a3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f043 0204 	orr.w	r2, r3, #4
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d129      	bne.n	8003ab4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2224      	movs	r2, #36	; 0x24
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0201 	bic.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0210 	bic.w	r2, r2, #16
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	e000      	b.n	8003ab6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003ab4:	2302      	movs	r3, #2
  }
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b085      	sub	sp, #20
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d12a      	bne.n	8003b32 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2224      	movs	r2, #36	; 0x24
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003afc:	89fb      	ldrh	r3, [r7, #14]
 8003afe:	f023 030f 	bic.w	r3, r3, #15
 8003b02:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	89fb      	ldrh	r3, [r7, #14]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	89fa      	ldrh	r2, [r7, #14]
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0201 	orr.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e000      	b.n	8003b34 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003b32:	2302      	movs	r3, #2
  }
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b42:	b08f      	sub	sp, #60	; 0x3c
 8003b44:	af0a      	add	r7, sp, #40	; 0x28
 8003b46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e10f      	b.n	8003d72 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d106      	bne.n	8003b72 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7fd fde5 	bl	800173c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2203      	movs	r2, #3
 8003b76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d102      	bne.n	8003b8c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f001 f9ae 	bl	8004ef2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	687e      	ldr	r6, [r7, #4]
 8003b9e:	466d      	mov	r5, sp
 8003ba0:	f106 0410 	add.w	r4, r6, #16
 8003ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003baa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bb4:	1d33      	adds	r3, r6, #4
 8003bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bb8:	6838      	ldr	r0, [r7, #0]
 8003bba:	f001 f939 	bl	8004e30 <USB_CoreInit>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0d0      	b.n	8003d72 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f001 f99c 	bl	8004f14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	73fb      	strb	r3, [r7, #15]
 8003be0:	e04a      	b.n	8003c78 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003be2:	7bfa      	ldrb	r2, [r7, #15]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	333d      	adds	r3, #61	; 0x3d
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bf6:	7bfa      	ldrb	r2, [r7, #15]
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	333c      	adds	r3, #60	; 0x3c
 8003c06:	7bfa      	ldrb	r2, [r7, #15]
 8003c08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c0a:	7bfa      	ldrb	r2, [r7, #15]
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	b298      	uxth	r0, r3
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	3344      	adds	r3, #68	; 0x44
 8003c1e:	4602      	mov	r2, r0
 8003c20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c22:	7bfa      	ldrb	r2, [r7, #15]
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	3340      	adds	r3, #64	; 0x40
 8003c32:	2200      	movs	r2, #0
 8003c34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c36:	7bfa      	ldrb	r2, [r7, #15]
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	3348      	adds	r3, #72	; 0x48
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c4a:	7bfa      	ldrb	r2, [r7, #15]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	334c      	adds	r3, #76	; 0x4c
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c5e:	7bfa      	ldrb	r2, [r7, #15]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	3354      	adds	r3, #84	; 0x54
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	3301      	adds	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
 8003c78:	7bfa      	ldrb	r2, [r7, #15]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d3af      	bcc.n	8003be2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]
 8003c86:	e044      	b.n	8003d12 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003cb0:	7bfa      	ldrb	r2, [r7, #15]
 8003cb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cb4:	7bfa      	ldrb	r2, [r7, #15]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cca:	7bfa      	ldrb	r2, [r7, #15]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ce0:	7bfa      	ldrb	r2, [r7, #15]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003cf6:	7bfa      	ldrb	r2, [r7, #15]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
 8003d12:	7bfa      	ldrb	r2, [r7, #15]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d3b5      	bcc.n	8003c88 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	603b      	str	r3, [r7, #0]
 8003d22:	687e      	ldr	r6, [r7, #4]
 8003d24:	466d      	mov	r5, sp
 8003d26:	f106 0410 	add.w	r4, r6, #16
 8003d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d36:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d3a:	1d33      	adds	r3, r6, #4
 8003d3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d3e:	6838      	ldr	r0, [r7, #0]
 8003d40:	f001 f934 	bl	8004fac <USB_DevInit>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e00d      	b.n	8003d72 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f001 faff 	bl	800536e <USB_DevDisconnect>

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003d7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e267      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d075      	beq.n	8003e86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d9a:	4b88      	ldr	r3, [pc, #544]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d00c      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003da6:	4b85      	ldr	r3, [pc, #532]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d112      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db2:	4b82      	ldr	r3, [pc, #520]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dbe:	d10b      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc0:	4b7e      	ldr	r3, [pc, #504]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d05b      	beq.n	8003e84 <HAL_RCC_OscConfig+0x108>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d157      	bne.n	8003e84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e242      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de0:	d106      	bne.n	8003df0 <HAL_RCC_OscConfig+0x74>
 8003de2:	4b76      	ldr	r3, [pc, #472]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a75      	ldr	r2, [pc, #468]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	e01d      	b.n	8003e2c <HAL_RCC_OscConfig+0xb0>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003df8:	d10c      	bne.n	8003e14 <HAL_RCC_OscConfig+0x98>
 8003dfa:	4b70      	ldr	r3, [pc, #448]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a6f      	ldr	r2, [pc, #444]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	4b6d      	ldr	r3, [pc, #436]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a6c      	ldr	r2, [pc, #432]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	e00b      	b.n	8003e2c <HAL_RCC_OscConfig+0xb0>
 8003e14:	4b69      	ldr	r3, [pc, #420]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a68      	ldr	r2, [pc, #416]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	4b66      	ldr	r3, [pc, #408]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a65      	ldr	r2, [pc, #404]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d013      	beq.n	8003e5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fe fba2 	bl	800257c <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e3c:	f7fe fb9e 	bl	800257c <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b64      	cmp	r3, #100	; 0x64
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e207      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4e:	4b5b      	ldr	r3, [pc, #364]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCC_OscConfig+0xc0>
 8003e5a:	e014      	b.n	8003e86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fe fb8e 	bl	800257c <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e64:	f7fe fb8a 	bl	800257c <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b64      	cmp	r3, #100	; 0x64
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e1f3      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e76:	4b51      	ldr	r3, [pc, #324]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0xe8>
 8003e82:	e000      	b.n	8003e86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d063      	beq.n	8003f5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e92:	4b4a      	ldr	r3, [pc, #296]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00b      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e9e:	4b47      	ldr	r3, [pc, #284]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d11c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eaa:	4b44      	ldr	r3, [pc, #272]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d116      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb6:	4b41      	ldr	r3, [pc, #260]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <HAL_RCC_OscConfig+0x152>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d001      	beq.n	8003ece <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e1c7      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ece:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4937      	ldr	r1, [pc, #220]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee2:	e03a      	b.n	8003f5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d020      	beq.n	8003f2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eec:	4b34      	ldr	r3, [pc, #208]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7fe fb43 	bl	800257c <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003efa:	f7fe fb3f 	bl	800257c <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e1a8      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0c:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f18:	4b28      	ldr	r3, [pc, #160]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4925      	ldr	r1, [pc, #148]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	600b      	str	r3, [r1, #0]
 8003f2c:	e015      	b.n	8003f5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f2e:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fe fb22 	bl	800257c <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f3c:	f7fe fb1e 	bl	800257c <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e187      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f4e:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d036      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d016      	beq.n	8003f9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <HAL_RCC_OscConfig+0x248>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f74:	f7fe fb02 	bl	800257c <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f7c:	f7fe fafe 	bl	800257c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e167      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0x200>
 8003f9a:	e01b      	b.n	8003fd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f9c:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <HAL_RCC_OscConfig+0x248>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa2:	f7fe faeb 	bl	800257c <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa8:	e00e      	b.n	8003fc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003faa:	f7fe fae7 	bl	800257c <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d907      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e150      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	42470000 	.word	0x42470000
 8003fc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc8:	4b88      	ldr	r3, [pc, #544]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8003fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1ea      	bne.n	8003faa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8097 	beq.w	8004110 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fe6:	4b81      	ldr	r3, [pc, #516]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10f      	bne.n	8004012 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	4b7d      	ldr	r3, [pc, #500]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	4a7c      	ldr	r2, [pc, #496]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8003ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004000:	6413      	str	r3, [r2, #64]	; 0x40
 8004002:	4b7a      	ldr	r3, [pc, #488]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800400e:	2301      	movs	r3, #1
 8004010:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004012:	4b77      	ldr	r3, [pc, #476]	; (80041f0 <HAL_RCC_OscConfig+0x474>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d118      	bne.n	8004050 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800401e:	4b74      	ldr	r3, [pc, #464]	; (80041f0 <HAL_RCC_OscConfig+0x474>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a73      	ldr	r2, [pc, #460]	; (80041f0 <HAL_RCC_OscConfig+0x474>)
 8004024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800402a:	f7fe faa7 	bl	800257c <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004032:	f7fe faa3 	bl	800257c <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e10c      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004044:	4b6a      	ldr	r3, [pc, #424]	; (80041f0 <HAL_RCC_OscConfig+0x474>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0f0      	beq.n	8004032 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d106      	bne.n	8004066 <HAL_RCC_OscConfig+0x2ea>
 8004058:	4b64      	ldr	r3, [pc, #400]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	4a63      	ldr	r2, [pc, #396]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	6713      	str	r3, [r2, #112]	; 0x70
 8004064:	e01c      	b.n	80040a0 <HAL_RCC_OscConfig+0x324>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2b05      	cmp	r3, #5
 800406c:	d10c      	bne.n	8004088 <HAL_RCC_OscConfig+0x30c>
 800406e:	4b5f      	ldr	r3, [pc, #380]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004072:	4a5e      	ldr	r2, [pc, #376]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004074:	f043 0304 	orr.w	r3, r3, #4
 8004078:	6713      	str	r3, [r2, #112]	; 0x70
 800407a:	4b5c      	ldr	r3, [pc, #368]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800407c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407e:	4a5b      	ldr	r2, [pc, #364]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	6713      	str	r3, [r2, #112]	; 0x70
 8004086:	e00b      	b.n	80040a0 <HAL_RCC_OscConfig+0x324>
 8004088:	4b58      	ldr	r3, [pc, #352]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	4a57      	ldr	r2, [pc, #348]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800408e:	f023 0301 	bic.w	r3, r3, #1
 8004092:	6713      	str	r3, [r2, #112]	; 0x70
 8004094:	4b55      	ldr	r3, [pc, #340]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	4a54      	ldr	r2, [pc, #336]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800409a:	f023 0304 	bic.w	r3, r3, #4
 800409e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d015      	beq.n	80040d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a8:	f7fe fa68 	bl	800257c <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b0:	f7fe fa64 	bl	800257c <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e0cb      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c6:	4b49      	ldr	r3, [pc, #292]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0ee      	beq.n	80040b0 <HAL_RCC_OscConfig+0x334>
 80040d2:	e014      	b.n	80040fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d4:	f7fe fa52 	bl	800257c <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040da:	e00a      	b.n	80040f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040dc:	f7fe fa4e 	bl	800257c <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e0b5      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f2:	4b3e      	ldr	r3, [pc, #248]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1ee      	bne.n	80040dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040fe:	7dfb      	ldrb	r3, [r7, #23]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d105      	bne.n	8004110 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004104:	4b39      	ldr	r3, [pc, #228]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	4a38      	ldr	r2, [pc, #224]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800410a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800410e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 80a1 	beq.w	800425c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800411a:	4b34      	ldr	r3, [pc, #208]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	2b08      	cmp	r3, #8
 8004124:	d05c      	beq.n	80041e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d141      	bne.n	80041b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412e:	4b31      	ldr	r3, [pc, #196]	; (80041f4 <HAL_RCC_OscConfig+0x478>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004134:	f7fe fa22 	bl	800257c <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413c:	f7fe fa1e 	bl	800257c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e087      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414e:	4b27      	ldr	r3, [pc, #156]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69da      	ldr	r2, [r3, #28]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	019b      	lsls	r3, r3, #6
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	085b      	lsrs	r3, r3, #1
 8004172:	3b01      	subs	r3, #1
 8004174:	041b      	lsls	r3, r3, #16
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	061b      	lsls	r3, r3, #24
 800417e:	491b      	ldr	r1, [pc, #108]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004180:	4313      	orrs	r3, r2
 8004182:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004184:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <HAL_RCC_OscConfig+0x478>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418a:	f7fe f9f7 	bl	800257c <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004192:	f7fe f9f3 	bl	800257c <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e05c      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a4:	4b11      	ldr	r3, [pc, #68]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x416>
 80041b0:	e054      	b.n	800425c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b2:	4b10      	ldr	r3, [pc, #64]	; (80041f4 <HAL_RCC_OscConfig+0x478>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fe f9e0 	bl	800257c <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c0:	f7fe f9dc 	bl	800257c <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e045      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x444>
 80041de:	e03d      	b.n	800425c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d107      	bne.n	80041f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e038      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40007000 	.word	0x40007000
 80041f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041f8:	4b1b      	ldr	r3, [pc, #108]	; (8004268 <HAL_RCC_OscConfig+0x4ec>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d028      	beq.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d121      	bne.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421e:	429a      	cmp	r2, r3
 8004220:	d11a      	bne.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004228:	4013      	ands	r3, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800422e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004230:	4293      	cmp	r3, r2
 8004232:	d111      	bne.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	085b      	lsrs	r3, r3, #1
 8004240:	3b01      	subs	r3, #1
 8004242:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d107      	bne.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d001      	beq.n	800425c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40023800 	.word	0x40023800

0800426c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0cc      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004280:	4b68      	ldr	r3, [pc, #416]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d90c      	bls.n	80042a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428e:	4b65      	ldr	r3, [pc, #404]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b63      	ldr	r3, [pc, #396]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0b8      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d020      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042c0:	4b59      	ldr	r3, [pc, #356]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	4a58      	ldr	r2, [pc, #352]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042d8:	4b53      	ldr	r3, [pc, #332]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	4a52      	ldr	r2, [pc, #328]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e4:	4b50      	ldr	r3, [pc, #320]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	494d      	ldr	r1, [pc, #308]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d044      	beq.n	800438c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d107      	bne.n	800431a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430a:	4b47      	ldr	r3, [pc, #284]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d119      	bne.n	800434a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e07f      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d003      	beq.n	800432a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004326:	2b03      	cmp	r3, #3
 8004328:	d107      	bne.n	800433a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432a:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e06f      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433a:	4b3b      	ldr	r3, [pc, #236]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e067      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800434a:	4b37      	ldr	r3, [pc, #220]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f023 0203 	bic.w	r2, r3, #3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	4934      	ldr	r1, [pc, #208]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	4313      	orrs	r3, r2
 800435a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800435c:	f7fe f90e 	bl	800257c <HAL_GetTick>
 8004360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004362:	e00a      	b.n	800437a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004364:	f7fe f90a 	bl	800257c <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e04f      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437a:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 020c 	and.w	r2, r3, #12
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	429a      	cmp	r2, r3
 800438a:	d1eb      	bne.n	8004364 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800438c:	4b25      	ldr	r3, [pc, #148]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d20c      	bcs.n	80043b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439a:	4b22      	ldr	r3, [pc, #136]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a2:	4b20      	ldr	r3, [pc, #128]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e032      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d008      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c0:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4916      	ldr	r1, [pc, #88]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	490e      	ldr	r1, [pc, #56]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043f2:	f000 f821 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 80043f6:	4602      	mov	r2, r0
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	490a      	ldr	r1, [pc, #40]	; (800442c <HAL_RCC_ClockConfig+0x1c0>)
 8004404:	5ccb      	ldrb	r3, [r1, r3]
 8004406:	fa22 f303 	lsr.w	r3, r2, r3
 800440a:	4a09      	ldr	r2, [pc, #36]	; (8004430 <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800440e:	4b09      	ldr	r3, [pc, #36]	; (8004434 <HAL_RCC_ClockConfig+0x1c8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe f86e 	bl	80024f4 <HAL_InitTick>

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40023c00 	.word	0x40023c00
 8004428:	40023800 	.word	0x40023800
 800442c:	08009dd0 	.word	0x08009dd0
 8004430:	20000000 	.word	0x20000000
 8004434:	2000003c 	.word	0x2000003c

08004438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800443c:	b094      	sub	sp, #80	; 0x50
 800443e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	647b      	str	r3, [r7, #68]	; 0x44
 8004444:	2300      	movs	r3, #0
 8004446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004448:	2300      	movs	r3, #0
 800444a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004450:	4b79      	ldr	r3, [pc, #484]	; (8004638 <HAL_RCC_GetSysClockFreq+0x200>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 030c 	and.w	r3, r3, #12
 8004458:	2b08      	cmp	r3, #8
 800445a:	d00d      	beq.n	8004478 <HAL_RCC_GetSysClockFreq+0x40>
 800445c:	2b08      	cmp	r3, #8
 800445e:	f200 80e1 	bhi.w	8004624 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0x34>
 8004466:	2b04      	cmp	r3, #4
 8004468:	d003      	beq.n	8004472 <HAL_RCC_GetSysClockFreq+0x3a>
 800446a:	e0db      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800446c:	4b73      	ldr	r3, [pc, #460]	; (800463c <HAL_RCC_GetSysClockFreq+0x204>)
 800446e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004470:	e0db      	b.n	800462a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004472:	4b73      	ldr	r3, [pc, #460]	; (8004640 <HAL_RCC_GetSysClockFreq+0x208>)
 8004474:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004476:	e0d8      	b.n	800462a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004478:	4b6f      	ldr	r3, [pc, #444]	; (8004638 <HAL_RCC_GetSysClockFreq+0x200>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004480:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004482:	4b6d      	ldr	r3, [pc, #436]	; (8004638 <HAL_RCC_GetSysClockFreq+0x200>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d063      	beq.n	8004556 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800448e:	4b6a      	ldr	r3, [pc, #424]	; (8004638 <HAL_RCC_GetSysClockFreq+0x200>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	099b      	lsrs	r3, r3, #6
 8004494:	2200      	movs	r2, #0
 8004496:	63bb      	str	r3, [r7, #56]	; 0x38
 8004498:	63fa      	str	r2, [r7, #60]	; 0x3c
 800449a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a0:	633b      	str	r3, [r7, #48]	; 0x30
 80044a2:	2300      	movs	r3, #0
 80044a4:	637b      	str	r3, [r7, #52]	; 0x34
 80044a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80044aa:	4622      	mov	r2, r4
 80044ac:	462b      	mov	r3, r5
 80044ae:	f04f 0000 	mov.w	r0, #0
 80044b2:	f04f 0100 	mov.w	r1, #0
 80044b6:	0159      	lsls	r1, r3, #5
 80044b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044bc:	0150      	lsls	r0, r2, #5
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4621      	mov	r1, r4
 80044c4:	1a51      	subs	r1, r2, r1
 80044c6:	6139      	str	r1, [r7, #16]
 80044c8:	4629      	mov	r1, r5
 80044ca:	eb63 0301 	sbc.w	r3, r3, r1
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044dc:	4659      	mov	r1, fp
 80044de:	018b      	lsls	r3, r1, #6
 80044e0:	4651      	mov	r1, sl
 80044e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044e6:	4651      	mov	r1, sl
 80044e8:	018a      	lsls	r2, r1, #6
 80044ea:	4651      	mov	r1, sl
 80044ec:	ebb2 0801 	subs.w	r8, r2, r1
 80044f0:	4659      	mov	r1, fp
 80044f2:	eb63 0901 	sbc.w	r9, r3, r1
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800450a:	4690      	mov	r8, r2
 800450c:	4699      	mov	r9, r3
 800450e:	4623      	mov	r3, r4
 8004510:	eb18 0303 	adds.w	r3, r8, r3
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	462b      	mov	r3, r5
 8004518:	eb49 0303 	adc.w	r3, r9, r3
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800452a:	4629      	mov	r1, r5
 800452c:	024b      	lsls	r3, r1, #9
 800452e:	4621      	mov	r1, r4
 8004530:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004534:	4621      	mov	r1, r4
 8004536:	024a      	lsls	r2, r1, #9
 8004538:	4610      	mov	r0, r2
 800453a:	4619      	mov	r1, r3
 800453c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800453e:	2200      	movs	r2, #0
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28
 8004542:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004544:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004548:	f7fc fbae 	bl	8000ca8 <__aeabi_uldivmod>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4613      	mov	r3, r2
 8004552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004554:	e058      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004556:	4b38      	ldr	r3, [pc, #224]	; (8004638 <HAL_RCC_GetSysClockFreq+0x200>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	099b      	lsrs	r3, r3, #6
 800455c:	2200      	movs	r2, #0
 800455e:	4618      	mov	r0, r3
 8004560:	4611      	mov	r1, r2
 8004562:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004566:	623b      	str	r3, [r7, #32]
 8004568:	2300      	movs	r3, #0
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
 800456c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004570:	4642      	mov	r2, r8
 8004572:	464b      	mov	r3, r9
 8004574:	f04f 0000 	mov.w	r0, #0
 8004578:	f04f 0100 	mov.w	r1, #0
 800457c:	0159      	lsls	r1, r3, #5
 800457e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004582:	0150      	lsls	r0, r2, #5
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4641      	mov	r1, r8
 800458a:	ebb2 0a01 	subs.w	sl, r2, r1
 800458e:	4649      	mov	r1, r9
 8004590:	eb63 0b01 	sbc.w	fp, r3, r1
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045a8:	ebb2 040a 	subs.w	r4, r2, sl
 80045ac:	eb63 050b 	sbc.w	r5, r3, fp
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	00eb      	lsls	r3, r5, #3
 80045ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045be:	00e2      	lsls	r2, r4, #3
 80045c0:	4614      	mov	r4, r2
 80045c2:	461d      	mov	r5, r3
 80045c4:	4643      	mov	r3, r8
 80045c6:	18e3      	adds	r3, r4, r3
 80045c8:	603b      	str	r3, [r7, #0]
 80045ca:	464b      	mov	r3, r9
 80045cc:	eb45 0303 	adc.w	r3, r5, r3
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045de:	4629      	mov	r1, r5
 80045e0:	028b      	lsls	r3, r1, #10
 80045e2:	4621      	mov	r1, r4
 80045e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045e8:	4621      	mov	r1, r4
 80045ea:	028a      	lsls	r2, r1, #10
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045f2:	2200      	movs	r2, #0
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	61fa      	str	r2, [r7, #28]
 80045f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045fc:	f7fc fb54 	bl	8000ca8 <__aeabi_uldivmod>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4613      	mov	r3, r2
 8004606:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004608:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <HAL_RCC_GetSysClockFreq+0x200>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	0c1b      	lsrs	r3, r3, #16
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	3301      	adds	r3, #1
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004618:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800461a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800461c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004620:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004622:	e002      	b.n	800462a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004624:	4b05      	ldr	r3, [pc, #20]	; (800463c <HAL_RCC_GetSysClockFreq+0x204>)
 8004626:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800462a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800462c:	4618      	mov	r0, r3
 800462e:	3750      	adds	r7, #80	; 0x50
 8004630:	46bd      	mov	sp, r7
 8004632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004636:	bf00      	nop
 8004638:	40023800 	.word	0x40023800
 800463c:	00f42400 	.word	0x00f42400
 8004640:	007a1200 	.word	0x007a1200

08004644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004648:	4b03      	ldr	r3, [pc, #12]	; (8004658 <HAL_RCC_GetHCLKFreq+0x14>)
 800464a:	681b      	ldr	r3, [r3, #0]
}
 800464c:	4618      	mov	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	20000000 	.word	0x20000000

0800465c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004660:	f7ff fff0 	bl	8004644 <HAL_RCC_GetHCLKFreq>
 8004664:	4602      	mov	r2, r0
 8004666:	4b05      	ldr	r3, [pc, #20]	; (800467c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	0a9b      	lsrs	r3, r3, #10
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	4903      	ldr	r1, [pc, #12]	; (8004680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004672:	5ccb      	ldrb	r3, [r1, r3]
 8004674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004678:	4618      	mov	r0, r3
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40023800 	.word	0x40023800
 8004680:	08009de0 	.word	0x08009de0

08004684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004688:	f7ff ffdc 	bl	8004644 <HAL_RCC_GetHCLKFreq>
 800468c:	4602      	mov	r2, r0
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	0b5b      	lsrs	r3, r3, #13
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	4903      	ldr	r1, [pc, #12]	; (80046a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800469a:	5ccb      	ldrb	r3, [r1, r3]
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40023800 	.word	0x40023800
 80046a8:	08009de0 	.word	0x08009de0

080046ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e03f      	b.n	800473e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fc ffea 	bl	80016ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2224      	movs	r2, #36	; 0x24
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f929 	bl	8004948 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695a      	ldr	r2, [r3, #20]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b08a      	sub	sp, #40	; 0x28
 800474a:	af02      	add	r7, sp, #8
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	4613      	mov	r3, r2
 8004754:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b20      	cmp	r3, #32
 8004764:	d17c      	bne.n	8004860 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <HAL_UART_Transmit+0x2c>
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e075      	b.n	8004862 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_UART_Transmit+0x3e>
 8004780:	2302      	movs	r3, #2
 8004782:	e06e      	b.n	8004862 <HAL_UART_Transmit+0x11c>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2221      	movs	r2, #33	; 0x21
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800479a:	f7fd feef 	bl	800257c <HAL_GetTick>
 800479e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	88fa      	ldrh	r2, [r7, #6]
 80047a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	88fa      	ldrh	r2, [r7, #6]
 80047aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b4:	d108      	bne.n	80047c8 <HAL_UART_Transmit+0x82>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d104      	bne.n	80047c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047be:	2300      	movs	r3, #0
 80047c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	e003      	b.n	80047d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047d8:	e02a      	b.n	8004830 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2200      	movs	r2, #0
 80047e2:	2180      	movs	r1, #128	; 0x80
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f840 	bl	800486a <UART_WaitOnFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e036      	b.n	8004862 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10b      	bne.n	8004812 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004808:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	3302      	adds	r3, #2
 800480e:	61bb      	str	r3, [r7, #24]
 8004810:	e007      	b.n	8004822 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	781a      	ldrb	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	3301      	adds	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1cf      	bne.n	80047da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2200      	movs	r2, #0
 8004842:	2140      	movs	r1, #64	; 0x40
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f810 	bl	800486a <UART_WaitOnFlagUntilTimeout>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e006      	b.n	8004862 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800485c:	2300      	movs	r3, #0
 800485e:	e000      	b.n	8004862 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004860:	2302      	movs	r3, #2
  }
}
 8004862:	4618      	mov	r0, r3
 8004864:	3720      	adds	r7, #32
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b090      	sub	sp, #64	; 0x40
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	603b      	str	r3, [r7, #0]
 8004876:	4613      	mov	r3, r2
 8004878:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800487a:	e050      	b.n	800491e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004882:	d04c      	beq.n	800491e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004886:	2b00      	cmp	r3, #0
 8004888:	d007      	beq.n	800489a <UART_WaitOnFlagUntilTimeout+0x30>
 800488a:	f7fd fe77 	bl	800257c <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004896:	429a      	cmp	r2, r3
 8004898:	d241      	bcs.n	800491e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	330c      	adds	r3, #12
 80048a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a4:	e853 3f00 	ldrex	r3, [r3]
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	330c      	adds	r3, #12
 80048b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048ba:	637a      	str	r2, [r7, #52]	; 0x34
 80048bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1e5      	bne.n	800489a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3314      	adds	r3, #20
 80048d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	613b      	str	r3, [r7, #16]
   return(result);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f023 0301 	bic.w	r3, r3, #1
 80048e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3314      	adds	r3, #20
 80048ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048ee:	623a      	str	r2, [r7, #32]
 80048f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	69f9      	ldr	r1, [r7, #28]
 80048f4:	6a3a      	ldr	r2, [r7, #32]
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e5      	bne.n	80048ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e00f      	b.n	800493e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4013      	ands	r3, r2
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	429a      	cmp	r2, r3
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	461a      	mov	r2, r3
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	429a      	cmp	r2, r3
 800493a:	d09f      	beq.n	800487c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3740      	adds	r7, #64	; 0x40
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800494c:	b0c0      	sub	sp, #256	; 0x100
 800494e:	af00      	add	r7, sp, #0
 8004950:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004964:	68d9      	ldr	r1, [r3, #12]
 8004966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	ea40 0301 	orr.w	r3, r0, r1
 8004970:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	431a      	orrs	r2, r3
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	431a      	orrs	r2, r3
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049a0:	f021 010c 	bic.w	r1, r1, #12
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049ae:	430b      	orrs	r3, r1
 80049b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c2:	6999      	ldr	r1, [r3, #24]
 80049c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	ea40 0301 	orr.w	r3, r0, r1
 80049ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4b8f      	ldr	r3, [pc, #572]	; (8004c14 <UART_SetConfig+0x2cc>)
 80049d8:	429a      	cmp	r2, r3
 80049da:	d005      	beq.n	80049e8 <UART_SetConfig+0xa0>
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b8d      	ldr	r3, [pc, #564]	; (8004c18 <UART_SetConfig+0x2d0>)
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d104      	bne.n	80049f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049e8:	f7ff fe4c 	bl	8004684 <HAL_RCC_GetPCLK2Freq>
 80049ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049f0:	e003      	b.n	80049fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049f2:	f7ff fe33 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 80049f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a04:	f040 810c 	bne.w	8004c20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	462b      	mov	r3, r5
 8004a1e:	1891      	adds	r1, r2, r2
 8004a20:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a22:	415b      	adcs	r3, r3
 8004a24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	eb12 0801 	adds.w	r8, r2, r1
 8004a30:	4629      	mov	r1, r5
 8004a32:	eb43 0901 	adc.w	r9, r3, r1
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a4a:	4690      	mov	r8, r2
 8004a4c:	4699      	mov	r9, r3
 8004a4e:	4623      	mov	r3, r4
 8004a50:	eb18 0303 	adds.w	r3, r8, r3
 8004a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a58:	462b      	mov	r3, r5
 8004a5a:	eb49 0303 	adc.w	r3, r9, r3
 8004a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a76:	460b      	mov	r3, r1
 8004a78:	18db      	adds	r3, r3, r3
 8004a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	eb42 0303 	adc.w	r3, r2, r3
 8004a82:	657b      	str	r3, [r7, #84]	; 0x54
 8004a84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a8c:	f7fc f90c 	bl	8000ca8 <__aeabi_uldivmod>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4b61      	ldr	r3, [pc, #388]	; (8004c1c <UART_SetConfig+0x2d4>)
 8004a96:	fba3 2302 	umull	r2, r3, r3, r2
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	011c      	lsls	r4, r3, #4
 8004a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004aa8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004aac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	1891      	adds	r1, r2, r2
 8004ab6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ab8:	415b      	adcs	r3, r3
 8004aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004abc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	eb43 0b01 	adc.w	fp, r3, r1
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ad8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004adc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ae0:	4692      	mov	sl, r2
 8004ae2:	469b      	mov	fp, r3
 8004ae4:	4643      	mov	r3, r8
 8004ae6:	eb1a 0303 	adds.w	r3, sl, r3
 8004aea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004aee:	464b      	mov	r3, r9
 8004af0:	eb4b 0303 	adc.w	r3, fp, r3
 8004af4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	18db      	adds	r3, r3, r3
 8004b10:	643b      	str	r3, [r7, #64]	; 0x40
 8004b12:	4613      	mov	r3, r2
 8004b14:	eb42 0303 	adc.w	r3, r2, r3
 8004b18:	647b      	str	r3, [r7, #68]	; 0x44
 8004b1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b22:	f7fc f8c1 	bl	8000ca8 <__aeabi_uldivmod>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	4b3b      	ldr	r3, [pc, #236]	; (8004c1c <UART_SetConfig+0x2d4>)
 8004b2e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	2264      	movs	r2, #100	; 0x64
 8004b36:	fb02 f303 	mul.w	r3, r2, r3
 8004b3a:	1acb      	subs	r3, r1, r3
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b42:	4b36      	ldr	r3, [pc, #216]	; (8004c1c <UART_SetConfig+0x2d4>)
 8004b44:	fba3 2302 	umull	r2, r3, r3, r2
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b50:	441c      	add	r4, r3
 8004b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b64:	4642      	mov	r2, r8
 8004b66:	464b      	mov	r3, r9
 8004b68:	1891      	adds	r1, r2, r2
 8004b6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b6c:	415b      	adcs	r3, r3
 8004b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b74:	4641      	mov	r1, r8
 8004b76:	1851      	adds	r1, r2, r1
 8004b78:	6339      	str	r1, [r7, #48]	; 0x30
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	414b      	adcs	r3, r1
 8004b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b8c:	4659      	mov	r1, fp
 8004b8e:	00cb      	lsls	r3, r1, #3
 8004b90:	4651      	mov	r1, sl
 8004b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b96:	4651      	mov	r1, sl
 8004b98:	00ca      	lsls	r2, r1, #3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4642      	mov	r2, r8
 8004ba2:	189b      	adds	r3, r3, r2
 8004ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ba8:	464b      	mov	r3, r9
 8004baa:	460a      	mov	r2, r1
 8004bac:	eb42 0303 	adc.w	r3, r2, r3
 8004bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004bc8:	460b      	mov	r3, r1
 8004bca:	18db      	adds	r3, r3, r3
 8004bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bce:	4613      	mov	r3, r2
 8004bd0:	eb42 0303 	adc.w	r3, r2, r3
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004bde:	f7fc f863 	bl	8000ca8 <__aeabi_uldivmod>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4b0d      	ldr	r3, [pc, #52]	; (8004c1c <UART_SetConfig+0x2d4>)
 8004be8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bec:	095b      	lsrs	r3, r3, #5
 8004bee:	2164      	movs	r1, #100	; 0x64
 8004bf0:	fb01 f303 	mul.w	r3, r1, r3
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	3332      	adds	r3, #50	; 0x32
 8004bfa:	4a08      	ldr	r2, [pc, #32]	; (8004c1c <UART_SetConfig+0x2d4>)
 8004bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	f003 0207 	and.w	r2, r3, #7
 8004c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4422      	add	r2, r4
 8004c0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c10:	e106      	b.n	8004e20 <UART_SetConfig+0x4d8>
 8004c12:	bf00      	nop
 8004c14:	40011000 	.word	0x40011000
 8004c18:	40011400 	.word	0x40011400
 8004c1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c24:	2200      	movs	r2, #0
 8004c26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c32:	4642      	mov	r2, r8
 8004c34:	464b      	mov	r3, r9
 8004c36:	1891      	adds	r1, r2, r2
 8004c38:	6239      	str	r1, [r7, #32]
 8004c3a:	415b      	adcs	r3, r3
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c42:	4641      	mov	r1, r8
 8004c44:	1854      	adds	r4, r2, r1
 8004c46:	4649      	mov	r1, r9
 8004c48:	eb43 0501 	adc.w	r5, r3, r1
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	00eb      	lsls	r3, r5, #3
 8004c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c5a:	00e2      	lsls	r2, r4, #3
 8004c5c:	4614      	mov	r4, r2
 8004c5e:	461d      	mov	r5, r3
 8004c60:	4643      	mov	r3, r8
 8004c62:	18e3      	adds	r3, r4, r3
 8004c64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c68:	464b      	mov	r3, r9
 8004c6a:	eb45 0303 	adc.w	r3, r5, r3
 8004c6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c8e:	4629      	mov	r1, r5
 8004c90:	008b      	lsls	r3, r1, #2
 8004c92:	4621      	mov	r1, r4
 8004c94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c98:	4621      	mov	r1, r4
 8004c9a:	008a      	lsls	r2, r1, #2
 8004c9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ca0:	f7fc f802 	bl	8000ca8 <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4b60      	ldr	r3, [pc, #384]	; (8004e2c <UART_SetConfig+0x4e4>)
 8004caa:	fba3 2302 	umull	r2, r3, r3, r2
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	011c      	lsls	r4, r3, #4
 8004cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004cc4:	4642      	mov	r2, r8
 8004cc6:	464b      	mov	r3, r9
 8004cc8:	1891      	adds	r1, r2, r2
 8004cca:	61b9      	str	r1, [r7, #24]
 8004ccc:	415b      	adcs	r3, r3
 8004cce:	61fb      	str	r3, [r7, #28]
 8004cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cd4:	4641      	mov	r1, r8
 8004cd6:	1851      	adds	r1, r2, r1
 8004cd8:	6139      	str	r1, [r7, #16]
 8004cda:	4649      	mov	r1, r9
 8004cdc:	414b      	adcs	r3, r1
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cec:	4659      	mov	r1, fp
 8004cee:	00cb      	lsls	r3, r1, #3
 8004cf0:	4651      	mov	r1, sl
 8004cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cf6:	4651      	mov	r1, sl
 8004cf8:	00ca      	lsls	r2, r1, #3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4642      	mov	r2, r8
 8004d02:	189b      	adds	r3, r3, r2
 8004d04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d08:	464b      	mov	r3, r9
 8004d0a:	460a      	mov	r2, r1
 8004d0c:	eb42 0303 	adc.w	r3, r2, r3
 8004d10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d2c:	4649      	mov	r1, r9
 8004d2e:	008b      	lsls	r3, r1, #2
 8004d30:	4641      	mov	r1, r8
 8004d32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d36:	4641      	mov	r1, r8
 8004d38:	008a      	lsls	r2, r1, #2
 8004d3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d3e:	f7fb ffb3 	bl	8000ca8 <__aeabi_uldivmod>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4611      	mov	r1, r2
 8004d48:	4b38      	ldr	r3, [pc, #224]	; (8004e2c <UART_SetConfig+0x4e4>)
 8004d4a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	2264      	movs	r2, #100	; 0x64
 8004d52:	fb02 f303 	mul.w	r3, r2, r3
 8004d56:	1acb      	subs	r3, r1, r3
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	3332      	adds	r3, #50	; 0x32
 8004d5c:	4a33      	ldr	r2, [pc, #204]	; (8004e2c <UART_SetConfig+0x4e4>)
 8004d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d68:	441c      	add	r4, r3
 8004d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d6e:	2200      	movs	r2, #0
 8004d70:	673b      	str	r3, [r7, #112]	; 0x70
 8004d72:	677a      	str	r2, [r7, #116]	; 0x74
 8004d74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d78:	4642      	mov	r2, r8
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	1891      	adds	r1, r2, r2
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	415b      	adcs	r3, r3
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d88:	4641      	mov	r1, r8
 8004d8a:	1851      	adds	r1, r2, r1
 8004d8c:	6039      	str	r1, [r7, #0]
 8004d8e:	4649      	mov	r1, r9
 8004d90:	414b      	adcs	r3, r1
 8004d92:	607b      	str	r3, [r7, #4]
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004da0:	4659      	mov	r1, fp
 8004da2:	00cb      	lsls	r3, r1, #3
 8004da4:	4651      	mov	r1, sl
 8004da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004daa:	4651      	mov	r1, sl
 8004dac:	00ca      	lsls	r2, r1, #3
 8004dae:	4610      	mov	r0, r2
 8004db0:	4619      	mov	r1, r3
 8004db2:	4603      	mov	r3, r0
 8004db4:	4642      	mov	r2, r8
 8004db6:	189b      	adds	r3, r3, r2
 8004db8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dba:	464b      	mov	r3, r9
 8004dbc:	460a      	mov	r2, r1
 8004dbe:	eb42 0303 	adc.w	r3, r2, r3
 8004dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8004dce:	667a      	str	r2, [r7, #100]	; 0x64
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ddc:	4649      	mov	r1, r9
 8004dde:	008b      	lsls	r3, r1, #2
 8004de0:	4641      	mov	r1, r8
 8004de2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004de6:	4641      	mov	r1, r8
 8004de8:	008a      	lsls	r2, r1, #2
 8004dea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004dee:	f7fb ff5b 	bl	8000ca8 <__aeabi_uldivmod>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4b0d      	ldr	r3, [pc, #52]	; (8004e2c <UART_SetConfig+0x4e4>)
 8004df8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	2164      	movs	r1, #100	; 0x64
 8004e00:	fb01 f303 	mul.w	r3, r1, r3
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	3332      	adds	r3, #50	; 0x32
 8004e0a:	4a08      	ldr	r2, [pc, #32]	; (8004e2c <UART_SetConfig+0x4e4>)
 8004e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	f003 020f 	and.w	r2, r3, #15
 8004e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4422      	add	r2, r4
 8004e1e:	609a      	str	r2, [r3, #8]
}
 8004e20:	bf00      	nop
 8004e22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e26:	46bd      	mov	sp, r7
 8004e28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e2c:	51eb851f 	.word	0x51eb851f

08004e30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e30:	b084      	sub	sp, #16
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	f107 001c 	add.w	r0, r7, #28
 8004e3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d122      	bne.n	8004e8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d105      	bne.n	8004e82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 faa2 	bl	80053cc <USB_CoreReset>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	73fb      	strb	r3, [r7, #15]
 8004e8c:	e01a      	b.n	8004ec4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fa96 	bl	80053cc <USB_CoreReset>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	639a      	str	r2, [r3, #56]	; 0x38
 8004eb6:	e005      	b.n	8004ec4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d10b      	bne.n	8004ee2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f043 0206 	orr.w	r2, r3, #6
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f043 0220 	orr.w	r2, r3, #32
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eee:	b004      	add	sp, #16
 8004ef0:	4770      	bx	lr

08004ef2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f023 0201 	bic.w	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d115      	bne.n	8004f62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f42:	2001      	movs	r0, #1
 8004f44:	f7fd fb26 	bl	8002594 <HAL_Delay>
      ms++;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fa2e 	bl	80053b0 <USB_GetMode>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d01e      	beq.n	8004f98 <USB_SetCurrentMode+0x84>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b31      	cmp	r3, #49	; 0x31
 8004f5e:	d9f0      	bls.n	8004f42 <USB_SetCurrentMode+0x2e>
 8004f60:	e01a      	b.n	8004f98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f62:	78fb      	ldrb	r3, [r7, #3]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d115      	bne.n	8004f94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f74:	2001      	movs	r0, #1
 8004f76:	f7fd fb0d 	bl	8002594 <HAL_Delay>
      ms++;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fa15 	bl	80053b0 <USB_GetMode>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d005      	beq.n	8004f98 <USB_SetCurrentMode+0x84>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b31      	cmp	r3, #49	; 0x31
 8004f90:	d9f0      	bls.n	8004f74 <USB_SetCurrentMode+0x60>
 8004f92:	e001      	b.n	8004f98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e005      	b.n	8004fa4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b32      	cmp	r3, #50	; 0x32
 8004f9c:	d101      	bne.n	8004fa2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fac:	b084      	sub	sp, #16
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b086      	sub	sp, #24
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	e009      	b.n	8004fe0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	3340      	adds	r3, #64	; 0x40
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	2b0e      	cmp	r3, #14
 8004fe4:	d9f2      	bls.n	8004fcc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d11c      	bne.n	8005026 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ffa:	f043 0302 	orr.w	r3, r3, #2
 8004ffe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	639a      	str	r2, [r3, #56]	; 0x38
 8005024:	e00b      	b.n	800503e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005044:	461a      	mov	r2, r3
 8005046:	2300      	movs	r3, #0
 8005048:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005050:	4619      	mov	r1, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005058:	461a      	mov	r2, r3
 800505a:	680b      	ldr	r3, [r1, #0]
 800505c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005060:	2b01      	cmp	r3, #1
 8005062:	d10c      	bne.n	800507e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005066:	2b00      	cmp	r3, #0
 8005068:	d104      	bne.n	8005074 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800506a:	2100      	movs	r1, #0
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f965 	bl	800533c <USB_SetDevSpeed>
 8005072:	e008      	b.n	8005086 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005074:	2101      	movs	r1, #1
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f960 	bl	800533c <USB_SetDevSpeed>
 800507c:	e003      	b.n	8005086 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800507e:	2103      	movs	r1, #3
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f95b 	bl	800533c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005086:	2110      	movs	r1, #16
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f8f3 	bl	8005274 <USB_FlushTxFifo>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f91f 	bl	80052dc <USB_FlushRxFifo>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ae:	461a      	mov	r2, r3
 80050b0:	2300      	movs	r3, #0
 80050b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ba:	461a      	mov	r2, r3
 80050bc:	2300      	movs	r3, #0
 80050be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c6:	461a      	mov	r2, r3
 80050c8:	2300      	movs	r3, #0
 80050ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050cc:	2300      	movs	r3, #0
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	e043      	b.n	800515a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050e8:	d118      	bne.n	800511c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fc:	461a      	mov	r2, r3
 80050fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	e013      	b.n	800512e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005112:	461a      	mov	r2, r3
 8005114:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	e008      	b.n	800512e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005128:	461a      	mov	r2, r3
 800512a:	2300      	movs	r3, #0
 800512c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513a:	461a      	mov	r2, r3
 800513c:	2300      	movs	r3, #0
 800513e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514c:	461a      	mov	r2, r3
 800514e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005152:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	3301      	adds	r3, #1
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	429a      	cmp	r2, r3
 8005160:	d3b7      	bcc.n	80050d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005162:	2300      	movs	r3, #0
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	e043      	b.n	80051f0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800517a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800517e:	d118      	bne.n	80051b2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10a      	bne.n	800519c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005192:	461a      	mov	r2, r3
 8005194:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	e013      	b.n	80051c4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a8:	461a      	mov	r2, r3
 80051aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	e008      	b.n	80051c4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051be:	461a      	mov	r2, r3
 80051c0:	2300      	movs	r3, #0
 80051c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d0:	461a      	mov	r2, r3
 80051d2:	2300      	movs	r3, #0
 80051d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e2:	461a      	mov	r2, r3
 80051e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	3301      	adds	r3, #1
 80051ee:	613b      	str	r3, [r7, #16]
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d3b7      	bcc.n	8005168 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005206:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800520a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005218:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521c:	2b00      	cmp	r3, #0
 800521e:	d105      	bne.n	800522c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	f043 0210 	orr.w	r2, r3, #16
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699a      	ldr	r2, [r3, #24]
 8005230:	4b0f      	ldr	r3, [pc, #60]	; (8005270 <USB_DevInit+0x2c4>)
 8005232:	4313      	orrs	r3, r2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f043 0208 	orr.w	r2, r3, #8
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800524a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800524c:	2b01      	cmp	r3, #1
 800524e:	d107      	bne.n	8005260 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005258:	f043 0304 	orr.w	r3, r3, #4
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005260:	7dfb      	ldrb	r3, [r7, #23]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800526c:	b004      	add	sp, #16
 800526e:	4770      	bx	lr
 8005270:	803c3800 	.word	0x803c3800

08005274 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	3301      	adds	r3, #1
 8005286:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4a13      	ldr	r2, [pc, #76]	; (80052d8 <USB_FlushTxFifo+0x64>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d901      	bls.n	8005294 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e01b      	b.n	80052cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	daf2      	bge.n	8005282 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	019b      	lsls	r3, r3, #6
 80052a4:	f043 0220 	orr.w	r2, r3, #32
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3301      	adds	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4a08      	ldr	r2, [pc, #32]	; (80052d8 <USB_FlushTxFifo+0x64>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d901      	bls.n	80052be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e006      	b.n	80052cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b20      	cmp	r3, #32
 80052c8:	d0f0      	beq.n	80052ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	00030d40 	.word	0x00030d40

080052dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3301      	adds	r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4a11      	ldr	r2, [pc, #68]	; (8005338 <USB_FlushRxFifo+0x5c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d901      	bls.n	80052fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e018      	b.n	800532c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	daf2      	bge.n	80052e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005302:	2300      	movs	r3, #0
 8005304:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2210      	movs	r2, #16
 800530a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3301      	adds	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4a08      	ldr	r2, [pc, #32]	; (8005338 <USB_FlushRxFifo+0x5c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d901      	bls.n	800531e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e006      	b.n	800532c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b10      	cmp	r3, #16
 8005328:	d0f0      	beq.n	800530c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	00030d40 	.word	0x00030d40

0800533c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	68f9      	ldr	r1, [r7, #12]
 8005358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800535c:	4313      	orrs	r3, r2
 800535e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005388:	f023 0303 	bic.w	r3, r3, #3
 800538c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800539c:	f043 0302 	orr.w	r3, r3, #2
 80053a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	f003 0301 	and.w	r3, r3, #1
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3301      	adds	r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4a13      	ldr	r2, [pc, #76]	; (8005430 <USB_CoreReset+0x64>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d901      	bls.n	80053ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e01b      	b.n	8005422 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	daf2      	bge.n	80053d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f043 0201 	orr.w	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3301      	adds	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4a09      	ldr	r2, [pc, #36]	; (8005430 <USB_CoreReset+0x64>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d901      	bls.n	8005414 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e006      	b.n	8005422 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b01      	cmp	r3, #1
 800541e:	d0f0      	beq.n	8005402 <USB_CoreReset+0x36>

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	00030d40 	.word	0x00030d40

08005434 <__cvt>:
 8005434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005438:	ec55 4b10 	vmov	r4, r5, d0
 800543c:	2d00      	cmp	r5, #0
 800543e:	460e      	mov	r6, r1
 8005440:	4619      	mov	r1, r3
 8005442:	462b      	mov	r3, r5
 8005444:	bfbb      	ittet	lt
 8005446:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800544a:	461d      	movlt	r5, r3
 800544c:	2300      	movge	r3, #0
 800544e:	232d      	movlt	r3, #45	; 0x2d
 8005450:	700b      	strb	r3, [r1, #0]
 8005452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005454:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005458:	4691      	mov	r9, r2
 800545a:	f023 0820 	bic.w	r8, r3, #32
 800545e:	bfbc      	itt	lt
 8005460:	4622      	movlt	r2, r4
 8005462:	4614      	movlt	r4, r2
 8005464:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005468:	d005      	beq.n	8005476 <__cvt+0x42>
 800546a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800546e:	d100      	bne.n	8005472 <__cvt+0x3e>
 8005470:	3601      	adds	r6, #1
 8005472:	2102      	movs	r1, #2
 8005474:	e000      	b.n	8005478 <__cvt+0x44>
 8005476:	2103      	movs	r1, #3
 8005478:	ab03      	add	r3, sp, #12
 800547a:	9301      	str	r3, [sp, #4]
 800547c:	ab02      	add	r3, sp, #8
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	ec45 4b10 	vmov	d0, r4, r5
 8005484:	4653      	mov	r3, sl
 8005486:	4632      	mov	r2, r6
 8005488:	f001 f8b2 	bl	80065f0 <_dtoa_r>
 800548c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005490:	4607      	mov	r7, r0
 8005492:	d102      	bne.n	800549a <__cvt+0x66>
 8005494:	f019 0f01 	tst.w	r9, #1
 8005498:	d022      	beq.n	80054e0 <__cvt+0xac>
 800549a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800549e:	eb07 0906 	add.w	r9, r7, r6
 80054a2:	d110      	bne.n	80054c6 <__cvt+0x92>
 80054a4:	783b      	ldrb	r3, [r7, #0]
 80054a6:	2b30      	cmp	r3, #48	; 0x30
 80054a8:	d10a      	bne.n	80054c0 <__cvt+0x8c>
 80054aa:	2200      	movs	r2, #0
 80054ac:	2300      	movs	r3, #0
 80054ae:	4620      	mov	r0, r4
 80054b0:	4629      	mov	r1, r5
 80054b2:	f7fb fb19 	bl	8000ae8 <__aeabi_dcmpeq>
 80054b6:	b918      	cbnz	r0, 80054c0 <__cvt+0x8c>
 80054b8:	f1c6 0601 	rsb	r6, r6, #1
 80054bc:	f8ca 6000 	str.w	r6, [sl]
 80054c0:	f8da 3000 	ldr.w	r3, [sl]
 80054c4:	4499      	add	r9, r3
 80054c6:	2200      	movs	r2, #0
 80054c8:	2300      	movs	r3, #0
 80054ca:	4620      	mov	r0, r4
 80054cc:	4629      	mov	r1, r5
 80054ce:	f7fb fb0b 	bl	8000ae8 <__aeabi_dcmpeq>
 80054d2:	b108      	cbz	r0, 80054d8 <__cvt+0xa4>
 80054d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80054d8:	2230      	movs	r2, #48	; 0x30
 80054da:	9b03      	ldr	r3, [sp, #12]
 80054dc:	454b      	cmp	r3, r9
 80054de:	d307      	bcc.n	80054f0 <__cvt+0xbc>
 80054e0:	9b03      	ldr	r3, [sp, #12]
 80054e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054e4:	1bdb      	subs	r3, r3, r7
 80054e6:	4638      	mov	r0, r7
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	b004      	add	sp, #16
 80054ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f0:	1c59      	adds	r1, r3, #1
 80054f2:	9103      	str	r1, [sp, #12]
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	e7f0      	b.n	80054da <__cvt+0xa6>

080054f8 <__exponent>:
 80054f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054fa:	4603      	mov	r3, r0
 80054fc:	2900      	cmp	r1, #0
 80054fe:	bfb8      	it	lt
 8005500:	4249      	neglt	r1, r1
 8005502:	f803 2b02 	strb.w	r2, [r3], #2
 8005506:	bfb4      	ite	lt
 8005508:	222d      	movlt	r2, #45	; 0x2d
 800550a:	222b      	movge	r2, #43	; 0x2b
 800550c:	2909      	cmp	r1, #9
 800550e:	7042      	strb	r2, [r0, #1]
 8005510:	dd2a      	ble.n	8005568 <__exponent+0x70>
 8005512:	f10d 0207 	add.w	r2, sp, #7
 8005516:	4617      	mov	r7, r2
 8005518:	260a      	movs	r6, #10
 800551a:	4694      	mov	ip, r2
 800551c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005520:	fb06 1415 	mls	r4, r6, r5, r1
 8005524:	3430      	adds	r4, #48	; 0x30
 8005526:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800552a:	460c      	mov	r4, r1
 800552c:	2c63      	cmp	r4, #99	; 0x63
 800552e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005532:	4629      	mov	r1, r5
 8005534:	dcf1      	bgt.n	800551a <__exponent+0x22>
 8005536:	3130      	adds	r1, #48	; 0x30
 8005538:	f1ac 0402 	sub.w	r4, ip, #2
 800553c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005540:	1c41      	adds	r1, r0, #1
 8005542:	4622      	mov	r2, r4
 8005544:	42ba      	cmp	r2, r7
 8005546:	d30a      	bcc.n	800555e <__exponent+0x66>
 8005548:	f10d 0209 	add.w	r2, sp, #9
 800554c:	eba2 020c 	sub.w	r2, r2, ip
 8005550:	42bc      	cmp	r4, r7
 8005552:	bf88      	it	hi
 8005554:	2200      	movhi	r2, #0
 8005556:	4413      	add	r3, r2
 8005558:	1a18      	subs	r0, r3, r0
 800555a:	b003      	add	sp, #12
 800555c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800555e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005562:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005566:	e7ed      	b.n	8005544 <__exponent+0x4c>
 8005568:	2330      	movs	r3, #48	; 0x30
 800556a:	3130      	adds	r1, #48	; 0x30
 800556c:	7083      	strb	r3, [r0, #2]
 800556e:	70c1      	strb	r1, [r0, #3]
 8005570:	1d03      	adds	r3, r0, #4
 8005572:	e7f1      	b.n	8005558 <__exponent+0x60>

08005574 <_printf_float>:
 8005574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005578:	ed2d 8b02 	vpush	{d8}
 800557c:	b08d      	sub	sp, #52	; 0x34
 800557e:	460c      	mov	r4, r1
 8005580:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005584:	4616      	mov	r6, r2
 8005586:	461f      	mov	r7, r3
 8005588:	4605      	mov	r5, r0
 800558a:	f000 ff2b 	bl	80063e4 <_localeconv_r>
 800558e:	f8d0 a000 	ldr.w	sl, [r0]
 8005592:	4650      	mov	r0, sl
 8005594:	f7fa fe7c 	bl	8000290 <strlen>
 8005598:	2300      	movs	r3, #0
 800559a:	930a      	str	r3, [sp, #40]	; 0x28
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	9305      	str	r3, [sp, #20]
 80055a0:	f8d8 3000 	ldr.w	r3, [r8]
 80055a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80055a8:	3307      	adds	r3, #7
 80055aa:	f023 0307 	bic.w	r3, r3, #7
 80055ae:	f103 0208 	add.w	r2, r3, #8
 80055b2:	f8c8 2000 	str.w	r2, [r8]
 80055b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055be:	9307      	str	r3, [sp, #28]
 80055c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80055c4:	ee08 0a10 	vmov	s16, r0
 80055c8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80055cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055d0:	4b9e      	ldr	r3, [pc, #632]	; (800584c <_printf_float+0x2d8>)
 80055d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055d6:	f7fb fab9 	bl	8000b4c <__aeabi_dcmpun>
 80055da:	bb88      	cbnz	r0, 8005640 <_printf_float+0xcc>
 80055dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055e0:	4b9a      	ldr	r3, [pc, #616]	; (800584c <_printf_float+0x2d8>)
 80055e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055e6:	f7fb fa93 	bl	8000b10 <__aeabi_dcmple>
 80055ea:	bb48      	cbnz	r0, 8005640 <_printf_float+0xcc>
 80055ec:	2200      	movs	r2, #0
 80055ee:	2300      	movs	r3, #0
 80055f0:	4640      	mov	r0, r8
 80055f2:	4649      	mov	r1, r9
 80055f4:	f7fb fa82 	bl	8000afc <__aeabi_dcmplt>
 80055f8:	b110      	cbz	r0, 8005600 <_printf_float+0x8c>
 80055fa:	232d      	movs	r3, #45	; 0x2d
 80055fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005600:	4a93      	ldr	r2, [pc, #588]	; (8005850 <_printf_float+0x2dc>)
 8005602:	4b94      	ldr	r3, [pc, #592]	; (8005854 <_printf_float+0x2e0>)
 8005604:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005608:	bf94      	ite	ls
 800560a:	4690      	movls	r8, r2
 800560c:	4698      	movhi	r8, r3
 800560e:	2303      	movs	r3, #3
 8005610:	6123      	str	r3, [r4, #16]
 8005612:	9b05      	ldr	r3, [sp, #20]
 8005614:	f023 0304 	bic.w	r3, r3, #4
 8005618:	6023      	str	r3, [r4, #0]
 800561a:	f04f 0900 	mov.w	r9, #0
 800561e:	9700      	str	r7, [sp, #0]
 8005620:	4633      	mov	r3, r6
 8005622:	aa0b      	add	r2, sp, #44	; 0x2c
 8005624:	4621      	mov	r1, r4
 8005626:	4628      	mov	r0, r5
 8005628:	f000 f9da 	bl	80059e0 <_printf_common>
 800562c:	3001      	adds	r0, #1
 800562e:	f040 8090 	bne.w	8005752 <_printf_float+0x1de>
 8005632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005636:	b00d      	add	sp, #52	; 0x34
 8005638:	ecbd 8b02 	vpop	{d8}
 800563c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005640:	4642      	mov	r2, r8
 8005642:	464b      	mov	r3, r9
 8005644:	4640      	mov	r0, r8
 8005646:	4649      	mov	r1, r9
 8005648:	f7fb fa80 	bl	8000b4c <__aeabi_dcmpun>
 800564c:	b140      	cbz	r0, 8005660 <_printf_float+0xec>
 800564e:	464b      	mov	r3, r9
 8005650:	2b00      	cmp	r3, #0
 8005652:	bfbc      	itt	lt
 8005654:	232d      	movlt	r3, #45	; 0x2d
 8005656:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800565a:	4a7f      	ldr	r2, [pc, #508]	; (8005858 <_printf_float+0x2e4>)
 800565c:	4b7f      	ldr	r3, [pc, #508]	; (800585c <_printf_float+0x2e8>)
 800565e:	e7d1      	b.n	8005604 <_printf_float+0x90>
 8005660:	6863      	ldr	r3, [r4, #4]
 8005662:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005666:	9206      	str	r2, [sp, #24]
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	d13f      	bne.n	80056ec <_printf_float+0x178>
 800566c:	2306      	movs	r3, #6
 800566e:	6063      	str	r3, [r4, #4]
 8005670:	9b05      	ldr	r3, [sp, #20]
 8005672:	6861      	ldr	r1, [r4, #4]
 8005674:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005678:	2300      	movs	r3, #0
 800567a:	9303      	str	r3, [sp, #12]
 800567c:	ab0a      	add	r3, sp, #40	; 0x28
 800567e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005682:	ab09      	add	r3, sp, #36	; 0x24
 8005684:	ec49 8b10 	vmov	d0, r8, r9
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	6022      	str	r2, [r4, #0]
 800568c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005690:	4628      	mov	r0, r5
 8005692:	f7ff fecf 	bl	8005434 <__cvt>
 8005696:	9b06      	ldr	r3, [sp, #24]
 8005698:	9909      	ldr	r1, [sp, #36]	; 0x24
 800569a:	2b47      	cmp	r3, #71	; 0x47
 800569c:	4680      	mov	r8, r0
 800569e:	d108      	bne.n	80056b2 <_printf_float+0x13e>
 80056a0:	1cc8      	adds	r0, r1, #3
 80056a2:	db02      	blt.n	80056aa <_printf_float+0x136>
 80056a4:	6863      	ldr	r3, [r4, #4]
 80056a6:	4299      	cmp	r1, r3
 80056a8:	dd41      	ble.n	800572e <_printf_float+0x1ba>
 80056aa:	f1ab 0302 	sub.w	r3, fp, #2
 80056ae:	fa5f fb83 	uxtb.w	fp, r3
 80056b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056b6:	d820      	bhi.n	80056fa <_printf_float+0x186>
 80056b8:	3901      	subs	r1, #1
 80056ba:	465a      	mov	r2, fp
 80056bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056c0:	9109      	str	r1, [sp, #36]	; 0x24
 80056c2:	f7ff ff19 	bl	80054f8 <__exponent>
 80056c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056c8:	1813      	adds	r3, r2, r0
 80056ca:	2a01      	cmp	r2, #1
 80056cc:	4681      	mov	r9, r0
 80056ce:	6123      	str	r3, [r4, #16]
 80056d0:	dc02      	bgt.n	80056d8 <_printf_float+0x164>
 80056d2:	6822      	ldr	r2, [r4, #0]
 80056d4:	07d2      	lsls	r2, r2, #31
 80056d6:	d501      	bpl.n	80056dc <_printf_float+0x168>
 80056d8:	3301      	adds	r3, #1
 80056da:	6123      	str	r3, [r4, #16]
 80056dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d09c      	beq.n	800561e <_printf_float+0xaa>
 80056e4:	232d      	movs	r3, #45	; 0x2d
 80056e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ea:	e798      	b.n	800561e <_printf_float+0xaa>
 80056ec:	9a06      	ldr	r2, [sp, #24]
 80056ee:	2a47      	cmp	r2, #71	; 0x47
 80056f0:	d1be      	bne.n	8005670 <_printf_float+0xfc>
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1bc      	bne.n	8005670 <_printf_float+0xfc>
 80056f6:	2301      	movs	r3, #1
 80056f8:	e7b9      	b.n	800566e <_printf_float+0xfa>
 80056fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80056fe:	d118      	bne.n	8005732 <_printf_float+0x1be>
 8005700:	2900      	cmp	r1, #0
 8005702:	6863      	ldr	r3, [r4, #4]
 8005704:	dd0b      	ble.n	800571e <_printf_float+0x1aa>
 8005706:	6121      	str	r1, [r4, #16]
 8005708:	b913      	cbnz	r3, 8005710 <_printf_float+0x19c>
 800570a:	6822      	ldr	r2, [r4, #0]
 800570c:	07d0      	lsls	r0, r2, #31
 800570e:	d502      	bpl.n	8005716 <_printf_float+0x1a2>
 8005710:	3301      	adds	r3, #1
 8005712:	440b      	add	r3, r1
 8005714:	6123      	str	r3, [r4, #16]
 8005716:	65a1      	str	r1, [r4, #88]	; 0x58
 8005718:	f04f 0900 	mov.w	r9, #0
 800571c:	e7de      	b.n	80056dc <_printf_float+0x168>
 800571e:	b913      	cbnz	r3, 8005726 <_printf_float+0x1b2>
 8005720:	6822      	ldr	r2, [r4, #0]
 8005722:	07d2      	lsls	r2, r2, #31
 8005724:	d501      	bpl.n	800572a <_printf_float+0x1b6>
 8005726:	3302      	adds	r3, #2
 8005728:	e7f4      	b.n	8005714 <_printf_float+0x1a0>
 800572a:	2301      	movs	r3, #1
 800572c:	e7f2      	b.n	8005714 <_printf_float+0x1a0>
 800572e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005734:	4299      	cmp	r1, r3
 8005736:	db05      	blt.n	8005744 <_printf_float+0x1d0>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	6121      	str	r1, [r4, #16]
 800573c:	07d8      	lsls	r0, r3, #31
 800573e:	d5ea      	bpl.n	8005716 <_printf_float+0x1a2>
 8005740:	1c4b      	adds	r3, r1, #1
 8005742:	e7e7      	b.n	8005714 <_printf_float+0x1a0>
 8005744:	2900      	cmp	r1, #0
 8005746:	bfd4      	ite	le
 8005748:	f1c1 0202 	rsble	r2, r1, #2
 800574c:	2201      	movgt	r2, #1
 800574e:	4413      	add	r3, r2
 8005750:	e7e0      	b.n	8005714 <_printf_float+0x1a0>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	055a      	lsls	r2, r3, #21
 8005756:	d407      	bmi.n	8005768 <_printf_float+0x1f4>
 8005758:	6923      	ldr	r3, [r4, #16]
 800575a:	4642      	mov	r2, r8
 800575c:	4631      	mov	r1, r6
 800575e:	4628      	mov	r0, r5
 8005760:	47b8      	blx	r7
 8005762:	3001      	adds	r0, #1
 8005764:	d12c      	bne.n	80057c0 <_printf_float+0x24c>
 8005766:	e764      	b.n	8005632 <_printf_float+0xbe>
 8005768:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800576c:	f240 80e0 	bls.w	8005930 <_printf_float+0x3bc>
 8005770:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005774:	2200      	movs	r2, #0
 8005776:	2300      	movs	r3, #0
 8005778:	f7fb f9b6 	bl	8000ae8 <__aeabi_dcmpeq>
 800577c:	2800      	cmp	r0, #0
 800577e:	d034      	beq.n	80057ea <_printf_float+0x276>
 8005780:	4a37      	ldr	r2, [pc, #220]	; (8005860 <_printf_float+0x2ec>)
 8005782:	2301      	movs	r3, #1
 8005784:	4631      	mov	r1, r6
 8005786:	4628      	mov	r0, r5
 8005788:	47b8      	blx	r7
 800578a:	3001      	adds	r0, #1
 800578c:	f43f af51 	beq.w	8005632 <_printf_float+0xbe>
 8005790:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005794:	429a      	cmp	r2, r3
 8005796:	db02      	blt.n	800579e <_printf_float+0x22a>
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	07d8      	lsls	r0, r3, #31
 800579c:	d510      	bpl.n	80057c0 <_printf_float+0x24c>
 800579e:	ee18 3a10 	vmov	r3, s16
 80057a2:	4652      	mov	r2, sl
 80057a4:	4631      	mov	r1, r6
 80057a6:	4628      	mov	r0, r5
 80057a8:	47b8      	blx	r7
 80057aa:	3001      	adds	r0, #1
 80057ac:	f43f af41 	beq.w	8005632 <_printf_float+0xbe>
 80057b0:	f04f 0800 	mov.w	r8, #0
 80057b4:	f104 091a 	add.w	r9, r4, #26
 80057b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ba:	3b01      	subs	r3, #1
 80057bc:	4543      	cmp	r3, r8
 80057be:	dc09      	bgt.n	80057d4 <_printf_float+0x260>
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	079b      	lsls	r3, r3, #30
 80057c4:	f100 8107 	bmi.w	80059d6 <_printf_float+0x462>
 80057c8:	68e0      	ldr	r0, [r4, #12]
 80057ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057cc:	4298      	cmp	r0, r3
 80057ce:	bfb8      	it	lt
 80057d0:	4618      	movlt	r0, r3
 80057d2:	e730      	b.n	8005636 <_printf_float+0xc2>
 80057d4:	2301      	movs	r3, #1
 80057d6:	464a      	mov	r2, r9
 80057d8:	4631      	mov	r1, r6
 80057da:	4628      	mov	r0, r5
 80057dc:	47b8      	blx	r7
 80057de:	3001      	adds	r0, #1
 80057e0:	f43f af27 	beq.w	8005632 <_printf_float+0xbe>
 80057e4:	f108 0801 	add.w	r8, r8, #1
 80057e8:	e7e6      	b.n	80057b8 <_printf_float+0x244>
 80057ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	dc39      	bgt.n	8005864 <_printf_float+0x2f0>
 80057f0:	4a1b      	ldr	r2, [pc, #108]	; (8005860 <_printf_float+0x2ec>)
 80057f2:	2301      	movs	r3, #1
 80057f4:	4631      	mov	r1, r6
 80057f6:	4628      	mov	r0, r5
 80057f8:	47b8      	blx	r7
 80057fa:	3001      	adds	r0, #1
 80057fc:	f43f af19 	beq.w	8005632 <_printf_float+0xbe>
 8005800:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005804:	4313      	orrs	r3, r2
 8005806:	d102      	bne.n	800580e <_printf_float+0x29a>
 8005808:	6823      	ldr	r3, [r4, #0]
 800580a:	07d9      	lsls	r1, r3, #31
 800580c:	d5d8      	bpl.n	80057c0 <_printf_float+0x24c>
 800580e:	ee18 3a10 	vmov	r3, s16
 8005812:	4652      	mov	r2, sl
 8005814:	4631      	mov	r1, r6
 8005816:	4628      	mov	r0, r5
 8005818:	47b8      	blx	r7
 800581a:	3001      	adds	r0, #1
 800581c:	f43f af09 	beq.w	8005632 <_printf_float+0xbe>
 8005820:	f04f 0900 	mov.w	r9, #0
 8005824:	f104 0a1a 	add.w	sl, r4, #26
 8005828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800582a:	425b      	negs	r3, r3
 800582c:	454b      	cmp	r3, r9
 800582e:	dc01      	bgt.n	8005834 <_printf_float+0x2c0>
 8005830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005832:	e792      	b.n	800575a <_printf_float+0x1e6>
 8005834:	2301      	movs	r3, #1
 8005836:	4652      	mov	r2, sl
 8005838:	4631      	mov	r1, r6
 800583a:	4628      	mov	r0, r5
 800583c:	47b8      	blx	r7
 800583e:	3001      	adds	r0, #1
 8005840:	f43f aef7 	beq.w	8005632 <_printf_float+0xbe>
 8005844:	f109 0901 	add.w	r9, r9, #1
 8005848:	e7ee      	b.n	8005828 <_printf_float+0x2b4>
 800584a:	bf00      	nop
 800584c:	7fefffff 	.word	0x7fefffff
 8005850:	08009de8 	.word	0x08009de8
 8005854:	08009dec 	.word	0x08009dec
 8005858:	08009df0 	.word	0x08009df0
 800585c:	08009df4 	.word	0x08009df4
 8005860:	08009df8 	.word	0x08009df8
 8005864:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005866:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005868:	429a      	cmp	r2, r3
 800586a:	bfa8      	it	ge
 800586c:	461a      	movge	r2, r3
 800586e:	2a00      	cmp	r2, #0
 8005870:	4691      	mov	r9, r2
 8005872:	dc37      	bgt.n	80058e4 <_printf_float+0x370>
 8005874:	f04f 0b00 	mov.w	fp, #0
 8005878:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800587c:	f104 021a 	add.w	r2, r4, #26
 8005880:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005882:	9305      	str	r3, [sp, #20]
 8005884:	eba3 0309 	sub.w	r3, r3, r9
 8005888:	455b      	cmp	r3, fp
 800588a:	dc33      	bgt.n	80058f4 <_printf_float+0x380>
 800588c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005890:	429a      	cmp	r2, r3
 8005892:	db3b      	blt.n	800590c <_printf_float+0x398>
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	07da      	lsls	r2, r3, #31
 8005898:	d438      	bmi.n	800590c <_printf_float+0x398>
 800589a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800589e:	eba2 0903 	sub.w	r9, r2, r3
 80058a2:	9b05      	ldr	r3, [sp, #20]
 80058a4:	1ad2      	subs	r2, r2, r3
 80058a6:	4591      	cmp	r9, r2
 80058a8:	bfa8      	it	ge
 80058aa:	4691      	movge	r9, r2
 80058ac:	f1b9 0f00 	cmp.w	r9, #0
 80058b0:	dc35      	bgt.n	800591e <_printf_float+0x3aa>
 80058b2:	f04f 0800 	mov.w	r8, #0
 80058b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058ba:	f104 0a1a 	add.w	sl, r4, #26
 80058be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	eba3 0309 	sub.w	r3, r3, r9
 80058c8:	4543      	cmp	r3, r8
 80058ca:	f77f af79 	ble.w	80057c0 <_printf_float+0x24c>
 80058ce:	2301      	movs	r3, #1
 80058d0:	4652      	mov	r2, sl
 80058d2:	4631      	mov	r1, r6
 80058d4:	4628      	mov	r0, r5
 80058d6:	47b8      	blx	r7
 80058d8:	3001      	adds	r0, #1
 80058da:	f43f aeaa 	beq.w	8005632 <_printf_float+0xbe>
 80058de:	f108 0801 	add.w	r8, r8, #1
 80058e2:	e7ec      	b.n	80058be <_printf_float+0x34a>
 80058e4:	4613      	mov	r3, r2
 80058e6:	4631      	mov	r1, r6
 80058e8:	4642      	mov	r2, r8
 80058ea:	4628      	mov	r0, r5
 80058ec:	47b8      	blx	r7
 80058ee:	3001      	adds	r0, #1
 80058f0:	d1c0      	bne.n	8005874 <_printf_float+0x300>
 80058f2:	e69e      	b.n	8005632 <_printf_float+0xbe>
 80058f4:	2301      	movs	r3, #1
 80058f6:	4631      	mov	r1, r6
 80058f8:	4628      	mov	r0, r5
 80058fa:	9205      	str	r2, [sp, #20]
 80058fc:	47b8      	blx	r7
 80058fe:	3001      	adds	r0, #1
 8005900:	f43f ae97 	beq.w	8005632 <_printf_float+0xbe>
 8005904:	9a05      	ldr	r2, [sp, #20]
 8005906:	f10b 0b01 	add.w	fp, fp, #1
 800590a:	e7b9      	b.n	8005880 <_printf_float+0x30c>
 800590c:	ee18 3a10 	vmov	r3, s16
 8005910:	4652      	mov	r2, sl
 8005912:	4631      	mov	r1, r6
 8005914:	4628      	mov	r0, r5
 8005916:	47b8      	blx	r7
 8005918:	3001      	adds	r0, #1
 800591a:	d1be      	bne.n	800589a <_printf_float+0x326>
 800591c:	e689      	b.n	8005632 <_printf_float+0xbe>
 800591e:	9a05      	ldr	r2, [sp, #20]
 8005920:	464b      	mov	r3, r9
 8005922:	4442      	add	r2, r8
 8005924:	4631      	mov	r1, r6
 8005926:	4628      	mov	r0, r5
 8005928:	47b8      	blx	r7
 800592a:	3001      	adds	r0, #1
 800592c:	d1c1      	bne.n	80058b2 <_printf_float+0x33e>
 800592e:	e680      	b.n	8005632 <_printf_float+0xbe>
 8005930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005932:	2a01      	cmp	r2, #1
 8005934:	dc01      	bgt.n	800593a <_printf_float+0x3c6>
 8005936:	07db      	lsls	r3, r3, #31
 8005938:	d53a      	bpl.n	80059b0 <_printf_float+0x43c>
 800593a:	2301      	movs	r3, #1
 800593c:	4642      	mov	r2, r8
 800593e:	4631      	mov	r1, r6
 8005940:	4628      	mov	r0, r5
 8005942:	47b8      	blx	r7
 8005944:	3001      	adds	r0, #1
 8005946:	f43f ae74 	beq.w	8005632 <_printf_float+0xbe>
 800594a:	ee18 3a10 	vmov	r3, s16
 800594e:	4652      	mov	r2, sl
 8005950:	4631      	mov	r1, r6
 8005952:	4628      	mov	r0, r5
 8005954:	47b8      	blx	r7
 8005956:	3001      	adds	r0, #1
 8005958:	f43f ae6b 	beq.w	8005632 <_printf_float+0xbe>
 800595c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005960:	2200      	movs	r2, #0
 8005962:	2300      	movs	r3, #0
 8005964:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005968:	f7fb f8be 	bl	8000ae8 <__aeabi_dcmpeq>
 800596c:	b9d8      	cbnz	r0, 80059a6 <_printf_float+0x432>
 800596e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005972:	f108 0201 	add.w	r2, r8, #1
 8005976:	4631      	mov	r1, r6
 8005978:	4628      	mov	r0, r5
 800597a:	47b8      	blx	r7
 800597c:	3001      	adds	r0, #1
 800597e:	d10e      	bne.n	800599e <_printf_float+0x42a>
 8005980:	e657      	b.n	8005632 <_printf_float+0xbe>
 8005982:	2301      	movs	r3, #1
 8005984:	4652      	mov	r2, sl
 8005986:	4631      	mov	r1, r6
 8005988:	4628      	mov	r0, r5
 800598a:	47b8      	blx	r7
 800598c:	3001      	adds	r0, #1
 800598e:	f43f ae50 	beq.w	8005632 <_printf_float+0xbe>
 8005992:	f108 0801 	add.w	r8, r8, #1
 8005996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005998:	3b01      	subs	r3, #1
 800599a:	4543      	cmp	r3, r8
 800599c:	dcf1      	bgt.n	8005982 <_printf_float+0x40e>
 800599e:	464b      	mov	r3, r9
 80059a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059a4:	e6da      	b.n	800575c <_printf_float+0x1e8>
 80059a6:	f04f 0800 	mov.w	r8, #0
 80059aa:	f104 0a1a 	add.w	sl, r4, #26
 80059ae:	e7f2      	b.n	8005996 <_printf_float+0x422>
 80059b0:	2301      	movs	r3, #1
 80059b2:	4642      	mov	r2, r8
 80059b4:	e7df      	b.n	8005976 <_printf_float+0x402>
 80059b6:	2301      	movs	r3, #1
 80059b8:	464a      	mov	r2, r9
 80059ba:	4631      	mov	r1, r6
 80059bc:	4628      	mov	r0, r5
 80059be:	47b8      	blx	r7
 80059c0:	3001      	adds	r0, #1
 80059c2:	f43f ae36 	beq.w	8005632 <_printf_float+0xbe>
 80059c6:	f108 0801 	add.w	r8, r8, #1
 80059ca:	68e3      	ldr	r3, [r4, #12]
 80059cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059ce:	1a5b      	subs	r3, r3, r1
 80059d0:	4543      	cmp	r3, r8
 80059d2:	dcf0      	bgt.n	80059b6 <_printf_float+0x442>
 80059d4:	e6f8      	b.n	80057c8 <_printf_float+0x254>
 80059d6:	f04f 0800 	mov.w	r8, #0
 80059da:	f104 0919 	add.w	r9, r4, #25
 80059de:	e7f4      	b.n	80059ca <_printf_float+0x456>

080059e0 <_printf_common>:
 80059e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e4:	4616      	mov	r6, r2
 80059e6:	4699      	mov	r9, r3
 80059e8:	688a      	ldr	r2, [r1, #8]
 80059ea:	690b      	ldr	r3, [r1, #16]
 80059ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059f0:	4293      	cmp	r3, r2
 80059f2:	bfb8      	it	lt
 80059f4:	4613      	movlt	r3, r2
 80059f6:	6033      	str	r3, [r6, #0]
 80059f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059fc:	4607      	mov	r7, r0
 80059fe:	460c      	mov	r4, r1
 8005a00:	b10a      	cbz	r2, 8005a06 <_printf_common+0x26>
 8005a02:	3301      	adds	r3, #1
 8005a04:	6033      	str	r3, [r6, #0]
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	0699      	lsls	r1, r3, #26
 8005a0a:	bf42      	ittt	mi
 8005a0c:	6833      	ldrmi	r3, [r6, #0]
 8005a0e:	3302      	addmi	r3, #2
 8005a10:	6033      	strmi	r3, [r6, #0]
 8005a12:	6825      	ldr	r5, [r4, #0]
 8005a14:	f015 0506 	ands.w	r5, r5, #6
 8005a18:	d106      	bne.n	8005a28 <_printf_common+0x48>
 8005a1a:	f104 0a19 	add.w	sl, r4, #25
 8005a1e:	68e3      	ldr	r3, [r4, #12]
 8005a20:	6832      	ldr	r2, [r6, #0]
 8005a22:	1a9b      	subs	r3, r3, r2
 8005a24:	42ab      	cmp	r3, r5
 8005a26:	dc26      	bgt.n	8005a76 <_printf_common+0x96>
 8005a28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a2c:	1e13      	subs	r3, r2, #0
 8005a2e:	6822      	ldr	r2, [r4, #0]
 8005a30:	bf18      	it	ne
 8005a32:	2301      	movne	r3, #1
 8005a34:	0692      	lsls	r2, r2, #26
 8005a36:	d42b      	bmi.n	8005a90 <_printf_common+0xb0>
 8005a38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	4638      	mov	r0, r7
 8005a40:	47c0      	blx	r8
 8005a42:	3001      	adds	r0, #1
 8005a44:	d01e      	beq.n	8005a84 <_printf_common+0xa4>
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	6922      	ldr	r2, [r4, #16]
 8005a4a:	f003 0306 	and.w	r3, r3, #6
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	bf02      	ittt	eq
 8005a52:	68e5      	ldreq	r5, [r4, #12]
 8005a54:	6833      	ldreq	r3, [r6, #0]
 8005a56:	1aed      	subeq	r5, r5, r3
 8005a58:	68a3      	ldr	r3, [r4, #8]
 8005a5a:	bf0c      	ite	eq
 8005a5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a60:	2500      	movne	r5, #0
 8005a62:	4293      	cmp	r3, r2
 8005a64:	bfc4      	itt	gt
 8005a66:	1a9b      	subgt	r3, r3, r2
 8005a68:	18ed      	addgt	r5, r5, r3
 8005a6a:	2600      	movs	r6, #0
 8005a6c:	341a      	adds	r4, #26
 8005a6e:	42b5      	cmp	r5, r6
 8005a70:	d11a      	bne.n	8005aa8 <_printf_common+0xc8>
 8005a72:	2000      	movs	r0, #0
 8005a74:	e008      	b.n	8005a88 <_printf_common+0xa8>
 8005a76:	2301      	movs	r3, #1
 8005a78:	4652      	mov	r2, sl
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	4638      	mov	r0, r7
 8005a7e:	47c0      	blx	r8
 8005a80:	3001      	adds	r0, #1
 8005a82:	d103      	bne.n	8005a8c <_printf_common+0xac>
 8005a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8c:	3501      	adds	r5, #1
 8005a8e:	e7c6      	b.n	8005a1e <_printf_common+0x3e>
 8005a90:	18e1      	adds	r1, r4, r3
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	2030      	movs	r0, #48	; 0x30
 8005a96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a9a:	4422      	add	r2, r4
 8005a9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005aa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005aa4:	3302      	adds	r3, #2
 8005aa6:	e7c7      	b.n	8005a38 <_printf_common+0x58>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	4622      	mov	r2, r4
 8005aac:	4649      	mov	r1, r9
 8005aae:	4638      	mov	r0, r7
 8005ab0:	47c0      	blx	r8
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	d0e6      	beq.n	8005a84 <_printf_common+0xa4>
 8005ab6:	3601      	adds	r6, #1
 8005ab8:	e7d9      	b.n	8005a6e <_printf_common+0x8e>
	...

08005abc <_printf_i>:
 8005abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac0:	7e0f      	ldrb	r7, [r1, #24]
 8005ac2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ac4:	2f78      	cmp	r7, #120	; 0x78
 8005ac6:	4691      	mov	r9, r2
 8005ac8:	4680      	mov	r8, r0
 8005aca:	460c      	mov	r4, r1
 8005acc:	469a      	mov	sl, r3
 8005ace:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ad2:	d807      	bhi.n	8005ae4 <_printf_i+0x28>
 8005ad4:	2f62      	cmp	r7, #98	; 0x62
 8005ad6:	d80a      	bhi.n	8005aee <_printf_i+0x32>
 8005ad8:	2f00      	cmp	r7, #0
 8005ada:	f000 80d4 	beq.w	8005c86 <_printf_i+0x1ca>
 8005ade:	2f58      	cmp	r7, #88	; 0x58
 8005ae0:	f000 80c0 	beq.w	8005c64 <_printf_i+0x1a8>
 8005ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005aec:	e03a      	b.n	8005b64 <_printf_i+0xa8>
 8005aee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005af2:	2b15      	cmp	r3, #21
 8005af4:	d8f6      	bhi.n	8005ae4 <_printf_i+0x28>
 8005af6:	a101      	add	r1, pc, #4	; (adr r1, 8005afc <_printf_i+0x40>)
 8005af8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005afc:	08005b55 	.word	0x08005b55
 8005b00:	08005b69 	.word	0x08005b69
 8005b04:	08005ae5 	.word	0x08005ae5
 8005b08:	08005ae5 	.word	0x08005ae5
 8005b0c:	08005ae5 	.word	0x08005ae5
 8005b10:	08005ae5 	.word	0x08005ae5
 8005b14:	08005b69 	.word	0x08005b69
 8005b18:	08005ae5 	.word	0x08005ae5
 8005b1c:	08005ae5 	.word	0x08005ae5
 8005b20:	08005ae5 	.word	0x08005ae5
 8005b24:	08005ae5 	.word	0x08005ae5
 8005b28:	08005c6d 	.word	0x08005c6d
 8005b2c:	08005b95 	.word	0x08005b95
 8005b30:	08005c27 	.word	0x08005c27
 8005b34:	08005ae5 	.word	0x08005ae5
 8005b38:	08005ae5 	.word	0x08005ae5
 8005b3c:	08005c8f 	.word	0x08005c8f
 8005b40:	08005ae5 	.word	0x08005ae5
 8005b44:	08005b95 	.word	0x08005b95
 8005b48:	08005ae5 	.word	0x08005ae5
 8005b4c:	08005ae5 	.word	0x08005ae5
 8005b50:	08005c2f 	.word	0x08005c2f
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	1d1a      	adds	r2, r3, #4
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	602a      	str	r2, [r5, #0]
 8005b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b64:	2301      	movs	r3, #1
 8005b66:	e09f      	b.n	8005ca8 <_printf_i+0x1ec>
 8005b68:	6820      	ldr	r0, [r4, #0]
 8005b6a:	682b      	ldr	r3, [r5, #0]
 8005b6c:	0607      	lsls	r7, r0, #24
 8005b6e:	f103 0104 	add.w	r1, r3, #4
 8005b72:	6029      	str	r1, [r5, #0]
 8005b74:	d501      	bpl.n	8005b7a <_printf_i+0xbe>
 8005b76:	681e      	ldr	r6, [r3, #0]
 8005b78:	e003      	b.n	8005b82 <_printf_i+0xc6>
 8005b7a:	0646      	lsls	r6, r0, #25
 8005b7c:	d5fb      	bpl.n	8005b76 <_printf_i+0xba>
 8005b7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b82:	2e00      	cmp	r6, #0
 8005b84:	da03      	bge.n	8005b8e <_printf_i+0xd2>
 8005b86:	232d      	movs	r3, #45	; 0x2d
 8005b88:	4276      	negs	r6, r6
 8005b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b8e:	485a      	ldr	r0, [pc, #360]	; (8005cf8 <_printf_i+0x23c>)
 8005b90:	230a      	movs	r3, #10
 8005b92:	e012      	b.n	8005bba <_printf_i+0xfe>
 8005b94:	682b      	ldr	r3, [r5, #0]
 8005b96:	6820      	ldr	r0, [r4, #0]
 8005b98:	1d19      	adds	r1, r3, #4
 8005b9a:	6029      	str	r1, [r5, #0]
 8005b9c:	0605      	lsls	r5, r0, #24
 8005b9e:	d501      	bpl.n	8005ba4 <_printf_i+0xe8>
 8005ba0:	681e      	ldr	r6, [r3, #0]
 8005ba2:	e002      	b.n	8005baa <_printf_i+0xee>
 8005ba4:	0641      	lsls	r1, r0, #25
 8005ba6:	d5fb      	bpl.n	8005ba0 <_printf_i+0xe4>
 8005ba8:	881e      	ldrh	r6, [r3, #0]
 8005baa:	4853      	ldr	r0, [pc, #332]	; (8005cf8 <_printf_i+0x23c>)
 8005bac:	2f6f      	cmp	r7, #111	; 0x6f
 8005bae:	bf0c      	ite	eq
 8005bb0:	2308      	moveq	r3, #8
 8005bb2:	230a      	movne	r3, #10
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bba:	6865      	ldr	r5, [r4, #4]
 8005bbc:	60a5      	str	r5, [r4, #8]
 8005bbe:	2d00      	cmp	r5, #0
 8005bc0:	bfa2      	ittt	ge
 8005bc2:	6821      	ldrge	r1, [r4, #0]
 8005bc4:	f021 0104 	bicge.w	r1, r1, #4
 8005bc8:	6021      	strge	r1, [r4, #0]
 8005bca:	b90e      	cbnz	r6, 8005bd0 <_printf_i+0x114>
 8005bcc:	2d00      	cmp	r5, #0
 8005bce:	d04b      	beq.n	8005c68 <_printf_i+0x1ac>
 8005bd0:	4615      	mov	r5, r2
 8005bd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bd6:	fb03 6711 	mls	r7, r3, r1, r6
 8005bda:	5dc7      	ldrb	r7, [r0, r7]
 8005bdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005be0:	4637      	mov	r7, r6
 8005be2:	42bb      	cmp	r3, r7
 8005be4:	460e      	mov	r6, r1
 8005be6:	d9f4      	bls.n	8005bd2 <_printf_i+0x116>
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d10b      	bne.n	8005c04 <_printf_i+0x148>
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	07de      	lsls	r6, r3, #31
 8005bf0:	d508      	bpl.n	8005c04 <_printf_i+0x148>
 8005bf2:	6923      	ldr	r3, [r4, #16]
 8005bf4:	6861      	ldr	r1, [r4, #4]
 8005bf6:	4299      	cmp	r1, r3
 8005bf8:	bfde      	ittt	le
 8005bfa:	2330      	movle	r3, #48	; 0x30
 8005bfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005c04:	1b52      	subs	r2, r2, r5
 8005c06:	6122      	str	r2, [r4, #16]
 8005c08:	f8cd a000 	str.w	sl, [sp]
 8005c0c:	464b      	mov	r3, r9
 8005c0e:	aa03      	add	r2, sp, #12
 8005c10:	4621      	mov	r1, r4
 8005c12:	4640      	mov	r0, r8
 8005c14:	f7ff fee4 	bl	80059e0 <_printf_common>
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d14a      	bne.n	8005cb2 <_printf_i+0x1f6>
 8005c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c20:	b004      	add	sp, #16
 8005c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	f043 0320 	orr.w	r3, r3, #32
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	4833      	ldr	r0, [pc, #204]	; (8005cfc <_printf_i+0x240>)
 8005c30:	2778      	movs	r7, #120	; 0x78
 8005c32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	6829      	ldr	r1, [r5, #0]
 8005c3a:	061f      	lsls	r7, r3, #24
 8005c3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c40:	d402      	bmi.n	8005c48 <_printf_i+0x18c>
 8005c42:	065f      	lsls	r7, r3, #25
 8005c44:	bf48      	it	mi
 8005c46:	b2b6      	uxthmi	r6, r6
 8005c48:	07df      	lsls	r7, r3, #31
 8005c4a:	bf48      	it	mi
 8005c4c:	f043 0320 	orrmi.w	r3, r3, #32
 8005c50:	6029      	str	r1, [r5, #0]
 8005c52:	bf48      	it	mi
 8005c54:	6023      	strmi	r3, [r4, #0]
 8005c56:	b91e      	cbnz	r6, 8005c60 <_printf_i+0x1a4>
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	f023 0320 	bic.w	r3, r3, #32
 8005c5e:	6023      	str	r3, [r4, #0]
 8005c60:	2310      	movs	r3, #16
 8005c62:	e7a7      	b.n	8005bb4 <_printf_i+0xf8>
 8005c64:	4824      	ldr	r0, [pc, #144]	; (8005cf8 <_printf_i+0x23c>)
 8005c66:	e7e4      	b.n	8005c32 <_printf_i+0x176>
 8005c68:	4615      	mov	r5, r2
 8005c6a:	e7bd      	b.n	8005be8 <_printf_i+0x12c>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	6826      	ldr	r6, [r4, #0]
 8005c70:	6961      	ldr	r1, [r4, #20]
 8005c72:	1d18      	adds	r0, r3, #4
 8005c74:	6028      	str	r0, [r5, #0]
 8005c76:	0635      	lsls	r5, r6, #24
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	d501      	bpl.n	8005c80 <_printf_i+0x1c4>
 8005c7c:	6019      	str	r1, [r3, #0]
 8005c7e:	e002      	b.n	8005c86 <_printf_i+0x1ca>
 8005c80:	0670      	lsls	r0, r6, #25
 8005c82:	d5fb      	bpl.n	8005c7c <_printf_i+0x1c0>
 8005c84:	8019      	strh	r1, [r3, #0]
 8005c86:	2300      	movs	r3, #0
 8005c88:	6123      	str	r3, [r4, #16]
 8005c8a:	4615      	mov	r5, r2
 8005c8c:	e7bc      	b.n	8005c08 <_printf_i+0x14c>
 8005c8e:	682b      	ldr	r3, [r5, #0]
 8005c90:	1d1a      	adds	r2, r3, #4
 8005c92:	602a      	str	r2, [r5, #0]
 8005c94:	681d      	ldr	r5, [r3, #0]
 8005c96:	6862      	ldr	r2, [r4, #4]
 8005c98:	2100      	movs	r1, #0
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f7fa faa8 	bl	80001f0 <memchr>
 8005ca0:	b108      	cbz	r0, 8005ca6 <_printf_i+0x1ea>
 8005ca2:	1b40      	subs	r0, r0, r5
 8005ca4:	6060      	str	r0, [r4, #4]
 8005ca6:	6863      	ldr	r3, [r4, #4]
 8005ca8:	6123      	str	r3, [r4, #16]
 8005caa:	2300      	movs	r3, #0
 8005cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cb0:	e7aa      	b.n	8005c08 <_printf_i+0x14c>
 8005cb2:	6923      	ldr	r3, [r4, #16]
 8005cb4:	462a      	mov	r2, r5
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	4640      	mov	r0, r8
 8005cba:	47d0      	blx	sl
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	d0ad      	beq.n	8005c1c <_printf_i+0x160>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	079b      	lsls	r3, r3, #30
 8005cc4:	d413      	bmi.n	8005cee <_printf_i+0x232>
 8005cc6:	68e0      	ldr	r0, [r4, #12]
 8005cc8:	9b03      	ldr	r3, [sp, #12]
 8005cca:	4298      	cmp	r0, r3
 8005ccc:	bfb8      	it	lt
 8005cce:	4618      	movlt	r0, r3
 8005cd0:	e7a6      	b.n	8005c20 <_printf_i+0x164>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	4632      	mov	r2, r6
 8005cd6:	4649      	mov	r1, r9
 8005cd8:	4640      	mov	r0, r8
 8005cda:	47d0      	blx	sl
 8005cdc:	3001      	adds	r0, #1
 8005cde:	d09d      	beq.n	8005c1c <_printf_i+0x160>
 8005ce0:	3501      	adds	r5, #1
 8005ce2:	68e3      	ldr	r3, [r4, #12]
 8005ce4:	9903      	ldr	r1, [sp, #12]
 8005ce6:	1a5b      	subs	r3, r3, r1
 8005ce8:	42ab      	cmp	r3, r5
 8005cea:	dcf2      	bgt.n	8005cd2 <_printf_i+0x216>
 8005cec:	e7eb      	b.n	8005cc6 <_printf_i+0x20a>
 8005cee:	2500      	movs	r5, #0
 8005cf0:	f104 0619 	add.w	r6, r4, #25
 8005cf4:	e7f5      	b.n	8005ce2 <_printf_i+0x226>
 8005cf6:	bf00      	nop
 8005cf8:	08009dfa 	.word	0x08009dfa
 8005cfc:	08009e0b 	.word	0x08009e0b

08005d00 <_scanf_float>:
 8005d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	b087      	sub	sp, #28
 8005d06:	4617      	mov	r7, r2
 8005d08:	9303      	str	r3, [sp, #12]
 8005d0a:	688b      	ldr	r3, [r1, #8]
 8005d0c:	1e5a      	subs	r2, r3, #1
 8005d0e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005d12:	bf83      	ittte	hi
 8005d14:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005d18:	195b      	addhi	r3, r3, r5
 8005d1a:	9302      	strhi	r3, [sp, #8]
 8005d1c:	2300      	movls	r3, #0
 8005d1e:	bf86      	itte	hi
 8005d20:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005d24:	608b      	strhi	r3, [r1, #8]
 8005d26:	9302      	strls	r3, [sp, #8]
 8005d28:	680b      	ldr	r3, [r1, #0]
 8005d2a:	468b      	mov	fp, r1
 8005d2c:	2500      	movs	r5, #0
 8005d2e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005d32:	f84b 3b1c 	str.w	r3, [fp], #28
 8005d36:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005d3a:	4680      	mov	r8, r0
 8005d3c:	460c      	mov	r4, r1
 8005d3e:	465e      	mov	r6, fp
 8005d40:	46aa      	mov	sl, r5
 8005d42:	46a9      	mov	r9, r5
 8005d44:	9501      	str	r5, [sp, #4]
 8005d46:	68a2      	ldr	r2, [r4, #8]
 8005d48:	b152      	cbz	r2, 8005d60 <_scanf_float+0x60>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b4e      	cmp	r3, #78	; 0x4e
 8005d50:	d864      	bhi.n	8005e1c <_scanf_float+0x11c>
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d83c      	bhi.n	8005dd0 <_scanf_float+0xd0>
 8005d56:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005d5a:	b2c8      	uxtb	r0, r1
 8005d5c:	280e      	cmp	r0, #14
 8005d5e:	d93a      	bls.n	8005dd6 <_scanf_float+0xd6>
 8005d60:	f1b9 0f00 	cmp.w	r9, #0
 8005d64:	d003      	beq.n	8005d6e <_scanf_float+0x6e>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005d72:	f1ba 0f01 	cmp.w	sl, #1
 8005d76:	f200 8113 	bhi.w	8005fa0 <_scanf_float+0x2a0>
 8005d7a:	455e      	cmp	r6, fp
 8005d7c:	f200 8105 	bhi.w	8005f8a <_scanf_float+0x28a>
 8005d80:	2501      	movs	r5, #1
 8005d82:	4628      	mov	r0, r5
 8005d84:	b007      	add	sp, #28
 8005d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005d8e:	2a0d      	cmp	r2, #13
 8005d90:	d8e6      	bhi.n	8005d60 <_scanf_float+0x60>
 8005d92:	a101      	add	r1, pc, #4	; (adr r1, 8005d98 <_scanf_float+0x98>)
 8005d94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d98:	08005ed7 	.word	0x08005ed7
 8005d9c:	08005d61 	.word	0x08005d61
 8005da0:	08005d61 	.word	0x08005d61
 8005da4:	08005d61 	.word	0x08005d61
 8005da8:	08005f37 	.word	0x08005f37
 8005dac:	08005f0f 	.word	0x08005f0f
 8005db0:	08005d61 	.word	0x08005d61
 8005db4:	08005d61 	.word	0x08005d61
 8005db8:	08005ee5 	.word	0x08005ee5
 8005dbc:	08005d61 	.word	0x08005d61
 8005dc0:	08005d61 	.word	0x08005d61
 8005dc4:	08005d61 	.word	0x08005d61
 8005dc8:	08005d61 	.word	0x08005d61
 8005dcc:	08005e9d 	.word	0x08005e9d
 8005dd0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005dd4:	e7db      	b.n	8005d8e <_scanf_float+0x8e>
 8005dd6:	290e      	cmp	r1, #14
 8005dd8:	d8c2      	bhi.n	8005d60 <_scanf_float+0x60>
 8005dda:	a001      	add	r0, pc, #4	; (adr r0, 8005de0 <_scanf_float+0xe0>)
 8005ddc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005de0:	08005e8f 	.word	0x08005e8f
 8005de4:	08005d61 	.word	0x08005d61
 8005de8:	08005e8f 	.word	0x08005e8f
 8005dec:	08005f23 	.word	0x08005f23
 8005df0:	08005d61 	.word	0x08005d61
 8005df4:	08005e3d 	.word	0x08005e3d
 8005df8:	08005e79 	.word	0x08005e79
 8005dfc:	08005e79 	.word	0x08005e79
 8005e00:	08005e79 	.word	0x08005e79
 8005e04:	08005e79 	.word	0x08005e79
 8005e08:	08005e79 	.word	0x08005e79
 8005e0c:	08005e79 	.word	0x08005e79
 8005e10:	08005e79 	.word	0x08005e79
 8005e14:	08005e79 	.word	0x08005e79
 8005e18:	08005e79 	.word	0x08005e79
 8005e1c:	2b6e      	cmp	r3, #110	; 0x6e
 8005e1e:	d809      	bhi.n	8005e34 <_scanf_float+0x134>
 8005e20:	2b60      	cmp	r3, #96	; 0x60
 8005e22:	d8b2      	bhi.n	8005d8a <_scanf_float+0x8a>
 8005e24:	2b54      	cmp	r3, #84	; 0x54
 8005e26:	d077      	beq.n	8005f18 <_scanf_float+0x218>
 8005e28:	2b59      	cmp	r3, #89	; 0x59
 8005e2a:	d199      	bne.n	8005d60 <_scanf_float+0x60>
 8005e2c:	2d07      	cmp	r5, #7
 8005e2e:	d197      	bne.n	8005d60 <_scanf_float+0x60>
 8005e30:	2508      	movs	r5, #8
 8005e32:	e029      	b.n	8005e88 <_scanf_float+0x188>
 8005e34:	2b74      	cmp	r3, #116	; 0x74
 8005e36:	d06f      	beq.n	8005f18 <_scanf_float+0x218>
 8005e38:	2b79      	cmp	r3, #121	; 0x79
 8005e3a:	e7f6      	b.n	8005e2a <_scanf_float+0x12a>
 8005e3c:	6821      	ldr	r1, [r4, #0]
 8005e3e:	05c8      	lsls	r0, r1, #23
 8005e40:	d51a      	bpl.n	8005e78 <_scanf_float+0x178>
 8005e42:	9b02      	ldr	r3, [sp, #8]
 8005e44:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005e48:	6021      	str	r1, [r4, #0]
 8005e4a:	f109 0901 	add.w	r9, r9, #1
 8005e4e:	b11b      	cbz	r3, 8005e58 <_scanf_float+0x158>
 8005e50:	3b01      	subs	r3, #1
 8005e52:	3201      	adds	r2, #1
 8005e54:	9302      	str	r3, [sp, #8]
 8005e56:	60a2      	str	r2, [r4, #8]
 8005e58:	68a3      	ldr	r3, [r4, #8]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	60a3      	str	r3, [r4, #8]
 8005e5e:	6923      	ldr	r3, [r4, #16]
 8005e60:	3301      	adds	r3, #1
 8005e62:	6123      	str	r3, [r4, #16]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	607b      	str	r3, [r7, #4]
 8005e6c:	f340 8084 	ble.w	8005f78 <_scanf_float+0x278>
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	3301      	adds	r3, #1
 8005e74:	603b      	str	r3, [r7, #0]
 8005e76:	e766      	b.n	8005d46 <_scanf_float+0x46>
 8005e78:	eb1a 0f05 	cmn.w	sl, r5
 8005e7c:	f47f af70 	bne.w	8005d60 <_scanf_float+0x60>
 8005e80:	6822      	ldr	r2, [r4, #0]
 8005e82:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005e86:	6022      	str	r2, [r4, #0]
 8005e88:	f806 3b01 	strb.w	r3, [r6], #1
 8005e8c:	e7e4      	b.n	8005e58 <_scanf_float+0x158>
 8005e8e:	6822      	ldr	r2, [r4, #0]
 8005e90:	0610      	lsls	r0, r2, #24
 8005e92:	f57f af65 	bpl.w	8005d60 <_scanf_float+0x60>
 8005e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e9a:	e7f4      	b.n	8005e86 <_scanf_float+0x186>
 8005e9c:	f1ba 0f00 	cmp.w	sl, #0
 8005ea0:	d10e      	bne.n	8005ec0 <_scanf_float+0x1c0>
 8005ea2:	f1b9 0f00 	cmp.w	r9, #0
 8005ea6:	d10e      	bne.n	8005ec6 <_scanf_float+0x1c6>
 8005ea8:	6822      	ldr	r2, [r4, #0]
 8005eaa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005eae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005eb2:	d108      	bne.n	8005ec6 <_scanf_float+0x1c6>
 8005eb4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005eb8:	6022      	str	r2, [r4, #0]
 8005eba:	f04f 0a01 	mov.w	sl, #1
 8005ebe:	e7e3      	b.n	8005e88 <_scanf_float+0x188>
 8005ec0:	f1ba 0f02 	cmp.w	sl, #2
 8005ec4:	d055      	beq.n	8005f72 <_scanf_float+0x272>
 8005ec6:	2d01      	cmp	r5, #1
 8005ec8:	d002      	beq.n	8005ed0 <_scanf_float+0x1d0>
 8005eca:	2d04      	cmp	r5, #4
 8005ecc:	f47f af48 	bne.w	8005d60 <_scanf_float+0x60>
 8005ed0:	3501      	adds	r5, #1
 8005ed2:	b2ed      	uxtb	r5, r5
 8005ed4:	e7d8      	b.n	8005e88 <_scanf_float+0x188>
 8005ed6:	f1ba 0f01 	cmp.w	sl, #1
 8005eda:	f47f af41 	bne.w	8005d60 <_scanf_float+0x60>
 8005ede:	f04f 0a02 	mov.w	sl, #2
 8005ee2:	e7d1      	b.n	8005e88 <_scanf_float+0x188>
 8005ee4:	b97d      	cbnz	r5, 8005f06 <_scanf_float+0x206>
 8005ee6:	f1b9 0f00 	cmp.w	r9, #0
 8005eea:	f47f af3c 	bne.w	8005d66 <_scanf_float+0x66>
 8005eee:	6822      	ldr	r2, [r4, #0]
 8005ef0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ef4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ef8:	f47f af39 	bne.w	8005d6e <_scanf_float+0x6e>
 8005efc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f00:	6022      	str	r2, [r4, #0]
 8005f02:	2501      	movs	r5, #1
 8005f04:	e7c0      	b.n	8005e88 <_scanf_float+0x188>
 8005f06:	2d03      	cmp	r5, #3
 8005f08:	d0e2      	beq.n	8005ed0 <_scanf_float+0x1d0>
 8005f0a:	2d05      	cmp	r5, #5
 8005f0c:	e7de      	b.n	8005ecc <_scanf_float+0x1cc>
 8005f0e:	2d02      	cmp	r5, #2
 8005f10:	f47f af26 	bne.w	8005d60 <_scanf_float+0x60>
 8005f14:	2503      	movs	r5, #3
 8005f16:	e7b7      	b.n	8005e88 <_scanf_float+0x188>
 8005f18:	2d06      	cmp	r5, #6
 8005f1a:	f47f af21 	bne.w	8005d60 <_scanf_float+0x60>
 8005f1e:	2507      	movs	r5, #7
 8005f20:	e7b2      	b.n	8005e88 <_scanf_float+0x188>
 8005f22:	6822      	ldr	r2, [r4, #0]
 8005f24:	0591      	lsls	r1, r2, #22
 8005f26:	f57f af1b 	bpl.w	8005d60 <_scanf_float+0x60>
 8005f2a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005f2e:	6022      	str	r2, [r4, #0]
 8005f30:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f34:	e7a8      	b.n	8005e88 <_scanf_float+0x188>
 8005f36:	6822      	ldr	r2, [r4, #0]
 8005f38:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005f3c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005f40:	d006      	beq.n	8005f50 <_scanf_float+0x250>
 8005f42:	0550      	lsls	r0, r2, #21
 8005f44:	f57f af0c 	bpl.w	8005d60 <_scanf_float+0x60>
 8005f48:	f1b9 0f00 	cmp.w	r9, #0
 8005f4c:	f43f af0f 	beq.w	8005d6e <_scanf_float+0x6e>
 8005f50:	0591      	lsls	r1, r2, #22
 8005f52:	bf58      	it	pl
 8005f54:	9901      	ldrpl	r1, [sp, #4]
 8005f56:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f5a:	bf58      	it	pl
 8005f5c:	eba9 0101 	subpl.w	r1, r9, r1
 8005f60:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005f64:	bf58      	it	pl
 8005f66:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005f6a:	6022      	str	r2, [r4, #0]
 8005f6c:	f04f 0900 	mov.w	r9, #0
 8005f70:	e78a      	b.n	8005e88 <_scanf_float+0x188>
 8005f72:	f04f 0a03 	mov.w	sl, #3
 8005f76:	e787      	b.n	8005e88 <_scanf_float+0x188>
 8005f78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f7c:	4639      	mov	r1, r7
 8005f7e:	4640      	mov	r0, r8
 8005f80:	4798      	blx	r3
 8005f82:	2800      	cmp	r0, #0
 8005f84:	f43f aedf 	beq.w	8005d46 <_scanf_float+0x46>
 8005f88:	e6ea      	b.n	8005d60 <_scanf_float+0x60>
 8005f8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f92:	463a      	mov	r2, r7
 8005f94:	4640      	mov	r0, r8
 8005f96:	4798      	blx	r3
 8005f98:	6923      	ldr	r3, [r4, #16]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	6123      	str	r3, [r4, #16]
 8005f9e:	e6ec      	b.n	8005d7a <_scanf_float+0x7a>
 8005fa0:	1e6b      	subs	r3, r5, #1
 8005fa2:	2b06      	cmp	r3, #6
 8005fa4:	d825      	bhi.n	8005ff2 <_scanf_float+0x2f2>
 8005fa6:	2d02      	cmp	r5, #2
 8005fa8:	d836      	bhi.n	8006018 <_scanf_float+0x318>
 8005faa:	455e      	cmp	r6, fp
 8005fac:	f67f aee8 	bls.w	8005d80 <_scanf_float+0x80>
 8005fb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fb4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fb8:	463a      	mov	r2, r7
 8005fba:	4640      	mov	r0, r8
 8005fbc:	4798      	blx	r3
 8005fbe:	6923      	ldr	r3, [r4, #16]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	6123      	str	r3, [r4, #16]
 8005fc4:	e7f1      	b.n	8005faa <_scanf_float+0x2aa>
 8005fc6:	9802      	ldr	r0, [sp, #8]
 8005fc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fcc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005fd0:	9002      	str	r0, [sp, #8]
 8005fd2:	463a      	mov	r2, r7
 8005fd4:	4640      	mov	r0, r8
 8005fd6:	4798      	blx	r3
 8005fd8:	6923      	ldr	r3, [r4, #16]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	6123      	str	r3, [r4, #16]
 8005fde:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005fe2:	fa5f fa8a 	uxtb.w	sl, sl
 8005fe6:	f1ba 0f02 	cmp.w	sl, #2
 8005fea:	d1ec      	bne.n	8005fc6 <_scanf_float+0x2c6>
 8005fec:	3d03      	subs	r5, #3
 8005fee:	b2ed      	uxtb	r5, r5
 8005ff0:	1b76      	subs	r6, r6, r5
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	05da      	lsls	r2, r3, #23
 8005ff6:	d52f      	bpl.n	8006058 <_scanf_float+0x358>
 8005ff8:	055b      	lsls	r3, r3, #21
 8005ffa:	d510      	bpl.n	800601e <_scanf_float+0x31e>
 8005ffc:	455e      	cmp	r6, fp
 8005ffe:	f67f aebf 	bls.w	8005d80 <_scanf_float+0x80>
 8006002:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006006:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800600a:	463a      	mov	r2, r7
 800600c:	4640      	mov	r0, r8
 800600e:	4798      	blx	r3
 8006010:	6923      	ldr	r3, [r4, #16]
 8006012:	3b01      	subs	r3, #1
 8006014:	6123      	str	r3, [r4, #16]
 8006016:	e7f1      	b.n	8005ffc <_scanf_float+0x2fc>
 8006018:	46aa      	mov	sl, r5
 800601a:	9602      	str	r6, [sp, #8]
 800601c:	e7df      	b.n	8005fde <_scanf_float+0x2de>
 800601e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006022:	6923      	ldr	r3, [r4, #16]
 8006024:	2965      	cmp	r1, #101	; 0x65
 8006026:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800602a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	d00c      	beq.n	800604c <_scanf_float+0x34c>
 8006032:	2945      	cmp	r1, #69	; 0x45
 8006034:	d00a      	beq.n	800604c <_scanf_float+0x34c>
 8006036:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800603a:	463a      	mov	r2, r7
 800603c:	4640      	mov	r0, r8
 800603e:	4798      	blx	r3
 8006040:	6923      	ldr	r3, [r4, #16]
 8006042:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006046:	3b01      	subs	r3, #1
 8006048:	1eb5      	subs	r5, r6, #2
 800604a:	6123      	str	r3, [r4, #16]
 800604c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006050:	463a      	mov	r2, r7
 8006052:	4640      	mov	r0, r8
 8006054:	4798      	blx	r3
 8006056:	462e      	mov	r6, r5
 8006058:	6825      	ldr	r5, [r4, #0]
 800605a:	f015 0510 	ands.w	r5, r5, #16
 800605e:	d158      	bne.n	8006112 <_scanf_float+0x412>
 8006060:	7035      	strb	r5, [r6, #0]
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800606c:	d11c      	bne.n	80060a8 <_scanf_float+0x3a8>
 800606e:	9b01      	ldr	r3, [sp, #4]
 8006070:	454b      	cmp	r3, r9
 8006072:	eba3 0209 	sub.w	r2, r3, r9
 8006076:	d124      	bne.n	80060c2 <_scanf_float+0x3c2>
 8006078:	2200      	movs	r2, #0
 800607a:	4659      	mov	r1, fp
 800607c:	4640      	mov	r0, r8
 800607e:	f002 fc63 	bl	8008948 <_strtod_r>
 8006082:	9b03      	ldr	r3, [sp, #12]
 8006084:	6821      	ldr	r1, [r4, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f011 0f02 	tst.w	r1, #2
 800608c:	ec57 6b10 	vmov	r6, r7, d0
 8006090:	f103 0204 	add.w	r2, r3, #4
 8006094:	d020      	beq.n	80060d8 <_scanf_float+0x3d8>
 8006096:	9903      	ldr	r1, [sp, #12]
 8006098:	600a      	str	r2, [r1, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	e9c3 6700 	strd	r6, r7, [r3]
 80060a0:	68e3      	ldr	r3, [r4, #12]
 80060a2:	3301      	adds	r3, #1
 80060a4:	60e3      	str	r3, [r4, #12]
 80060a6:	e66c      	b.n	8005d82 <_scanf_float+0x82>
 80060a8:	9b04      	ldr	r3, [sp, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0e4      	beq.n	8006078 <_scanf_float+0x378>
 80060ae:	9905      	ldr	r1, [sp, #20]
 80060b0:	230a      	movs	r3, #10
 80060b2:	462a      	mov	r2, r5
 80060b4:	3101      	adds	r1, #1
 80060b6:	4640      	mov	r0, r8
 80060b8:	f002 fcce 	bl	8008a58 <_strtol_r>
 80060bc:	9b04      	ldr	r3, [sp, #16]
 80060be:	9e05      	ldr	r6, [sp, #20]
 80060c0:	1ac2      	subs	r2, r0, r3
 80060c2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80060c6:	429e      	cmp	r6, r3
 80060c8:	bf28      	it	cs
 80060ca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80060ce:	4912      	ldr	r1, [pc, #72]	; (8006118 <_scanf_float+0x418>)
 80060d0:	4630      	mov	r0, r6
 80060d2:	f000 f91b 	bl	800630c <siprintf>
 80060d6:	e7cf      	b.n	8006078 <_scanf_float+0x378>
 80060d8:	f011 0f04 	tst.w	r1, #4
 80060dc:	9903      	ldr	r1, [sp, #12]
 80060de:	600a      	str	r2, [r1, #0]
 80060e0:	d1db      	bne.n	800609a <_scanf_float+0x39a>
 80060e2:	f8d3 8000 	ldr.w	r8, [r3]
 80060e6:	ee10 2a10 	vmov	r2, s0
 80060ea:	ee10 0a10 	vmov	r0, s0
 80060ee:	463b      	mov	r3, r7
 80060f0:	4639      	mov	r1, r7
 80060f2:	f7fa fd2b 	bl	8000b4c <__aeabi_dcmpun>
 80060f6:	b128      	cbz	r0, 8006104 <_scanf_float+0x404>
 80060f8:	4808      	ldr	r0, [pc, #32]	; (800611c <_scanf_float+0x41c>)
 80060fa:	f000 f9eb 	bl	80064d4 <nanf>
 80060fe:	ed88 0a00 	vstr	s0, [r8]
 8006102:	e7cd      	b.n	80060a0 <_scanf_float+0x3a0>
 8006104:	4630      	mov	r0, r6
 8006106:	4639      	mov	r1, r7
 8006108:	f7fa fd7e 	bl	8000c08 <__aeabi_d2f>
 800610c:	f8c8 0000 	str.w	r0, [r8]
 8006110:	e7c6      	b.n	80060a0 <_scanf_float+0x3a0>
 8006112:	2500      	movs	r5, #0
 8006114:	e635      	b.n	8005d82 <_scanf_float+0x82>
 8006116:	bf00      	nop
 8006118:	08009e1c 	.word	0x08009e1c
 800611c:	0800a1ad 	.word	0x0800a1ad

08006120 <std>:
 8006120:	2300      	movs	r3, #0
 8006122:	b510      	push	{r4, lr}
 8006124:	4604      	mov	r4, r0
 8006126:	e9c0 3300 	strd	r3, r3, [r0]
 800612a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800612e:	6083      	str	r3, [r0, #8]
 8006130:	8181      	strh	r1, [r0, #12]
 8006132:	6643      	str	r3, [r0, #100]	; 0x64
 8006134:	81c2      	strh	r2, [r0, #14]
 8006136:	6183      	str	r3, [r0, #24]
 8006138:	4619      	mov	r1, r3
 800613a:	2208      	movs	r2, #8
 800613c:	305c      	adds	r0, #92	; 0x5c
 800613e:	f000 f948 	bl	80063d2 <memset>
 8006142:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <std+0x58>)
 8006144:	6263      	str	r3, [r4, #36]	; 0x24
 8006146:	4b0d      	ldr	r3, [pc, #52]	; (800617c <std+0x5c>)
 8006148:	62a3      	str	r3, [r4, #40]	; 0x28
 800614a:	4b0d      	ldr	r3, [pc, #52]	; (8006180 <std+0x60>)
 800614c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800614e:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <std+0x64>)
 8006150:	6323      	str	r3, [r4, #48]	; 0x30
 8006152:	4b0d      	ldr	r3, [pc, #52]	; (8006188 <std+0x68>)
 8006154:	6224      	str	r4, [r4, #32]
 8006156:	429c      	cmp	r4, r3
 8006158:	d006      	beq.n	8006168 <std+0x48>
 800615a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800615e:	4294      	cmp	r4, r2
 8006160:	d002      	beq.n	8006168 <std+0x48>
 8006162:	33d0      	adds	r3, #208	; 0xd0
 8006164:	429c      	cmp	r4, r3
 8006166:	d105      	bne.n	8006174 <std+0x54>
 8006168:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800616c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006170:	f000 b9ac 	b.w	80064cc <__retarget_lock_init_recursive>
 8006174:	bd10      	pop	{r4, pc}
 8006176:	bf00      	nop
 8006178:	0800634d 	.word	0x0800634d
 800617c:	0800636f 	.word	0x0800636f
 8006180:	080063a7 	.word	0x080063a7
 8006184:	080063cb 	.word	0x080063cb
 8006188:	20000ad8 	.word	0x20000ad8

0800618c <stdio_exit_handler>:
 800618c:	4a02      	ldr	r2, [pc, #8]	; (8006198 <stdio_exit_handler+0xc>)
 800618e:	4903      	ldr	r1, [pc, #12]	; (800619c <stdio_exit_handler+0x10>)
 8006190:	4803      	ldr	r0, [pc, #12]	; (80061a0 <stdio_exit_handler+0x14>)
 8006192:	f000 b869 	b.w	8006268 <_fwalk_sglue>
 8006196:	bf00      	nop
 8006198:	20000044 	.word	0x20000044
 800619c:	08008e19 	.word	0x08008e19
 80061a0:	20000050 	.word	0x20000050

080061a4 <cleanup_stdio>:
 80061a4:	6841      	ldr	r1, [r0, #4]
 80061a6:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <cleanup_stdio+0x34>)
 80061a8:	4299      	cmp	r1, r3
 80061aa:	b510      	push	{r4, lr}
 80061ac:	4604      	mov	r4, r0
 80061ae:	d001      	beq.n	80061b4 <cleanup_stdio+0x10>
 80061b0:	f002 fe32 	bl	8008e18 <_fflush_r>
 80061b4:	68a1      	ldr	r1, [r4, #8]
 80061b6:	4b09      	ldr	r3, [pc, #36]	; (80061dc <cleanup_stdio+0x38>)
 80061b8:	4299      	cmp	r1, r3
 80061ba:	d002      	beq.n	80061c2 <cleanup_stdio+0x1e>
 80061bc:	4620      	mov	r0, r4
 80061be:	f002 fe2b 	bl	8008e18 <_fflush_r>
 80061c2:	68e1      	ldr	r1, [r4, #12]
 80061c4:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <cleanup_stdio+0x3c>)
 80061c6:	4299      	cmp	r1, r3
 80061c8:	d004      	beq.n	80061d4 <cleanup_stdio+0x30>
 80061ca:	4620      	mov	r0, r4
 80061cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d0:	f002 be22 	b.w	8008e18 <_fflush_r>
 80061d4:	bd10      	pop	{r4, pc}
 80061d6:	bf00      	nop
 80061d8:	20000ad8 	.word	0x20000ad8
 80061dc:	20000b40 	.word	0x20000b40
 80061e0:	20000ba8 	.word	0x20000ba8

080061e4 <global_stdio_init.part.0>:
 80061e4:	b510      	push	{r4, lr}
 80061e6:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <global_stdio_init.part.0+0x30>)
 80061e8:	4c0b      	ldr	r4, [pc, #44]	; (8006218 <global_stdio_init.part.0+0x34>)
 80061ea:	4a0c      	ldr	r2, [pc, #48]	; (800621c <global_stdio_init.part.0+0x38>)
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	4620      	mov	r0, r4
 80061f0:	2200      	movs	r2, #0
 80061f2:	2104      	movs	r1, #4
 80061f4:	f7ff ff94 	bl	8006120 <std>
 80061f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80061fc:	2201      	movs	r2, #1
 80061fe:	2109      	movs	r1, #9
 8006200:	f7ff ff8e 	bl	8006120 <std>
 8006204:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006208:	2202      	movs	r2, #2
 800620a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800620e:	2112      	movs	r1, #18
 8006210:	f7ff bf86 	b.w	8006120 <std>
 8006214:	20000c10 	.word	0x20000c10
 8006218:	20000ad8 	.word	0x20000ad8
 800621c:	0800618d 	.word	0x0800618d

08006220 <__sfp_lock_acquire>:
 8006220:	4801      	ldr	r0, [pc, #4]	; (8006228 <__sfp_lock_acquire+0x8>)
 8006222:	f000 b954 	b.w	80064ce <__retarget_lock_acquire_recursive>
 8006226:	bf00      	nop
 8006228:	20000c19 	.word	0x20000c19

0800622c <__sfp_lock_release>:
 800622c:	4801      	ldr	r0, [pc, #4]	; (8006234 <__sfp_lock_release+0x8>)
 800622e:	f000 b94f 	b.w	80064d0 <__retarget_lock_release_recursive>
 8006232:	bf00      	nop
 8006234:	20000c19 	.word	0x20000c19

08006238 <__sinit>:
 8006238:	b510      	push	{r4, lr}
 800623a:	4604      	mov	r4, r0
 800623c:	f7ff fff0 	bl	8006220 <__sfp_lock_acquire>
 8006240:	6a23      	ldr	r3, [r4, #32]
 8006242:	b11b      	cbz	r3, 800624c <__sinit+0x14>
 8006244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006248:	f7ff bff0 	b.w	800622c <__sfp_lock_release>
 800624c:	4b04      	ldr	r3, [pc, #16]	; (8006260 <__sinit+0x28>)
 800624e:	6223      	str	r3, [r4, #32]
 8006250:	4b04      	ldr	r3, [pc, #16]	; (8006264 <__sinit+0x2c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1f5      	bne.n	8006244 <__sinit+0xc>
 8006258:	f7ff ffc4 	bl	80061e4 <global_stdio_init.part.0>
 800625c:	e7f2      	b.n	8006244 <__sinit+0xc>
 800625e:	bf00      	nop
 8006260:	080061a5 	.word	0x080061a5
 8006264:	20000c10 	.word	0x20000c10

08006268 <_fwalk_sglue>:
 8006268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800626c:	4607      	mov	r7, r0
 800626e:	4688      	mov	r8, r1
 8006270:	4614      	mov	r4, r2
 8006272:	2600      	movs	r6, #0
 8006274:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006278:	f1b9 0901 	subs.w	r9, r9, #1
 800627c:	d505      	bpl.n	800628a <_fwalk_sglue+0x22>
 800627e:	6824      	ldr	r4, [r4, #0]
 8006280:	2c00      	cmp	r4, #0
 8006282:	d1f7      	bne.n	8006274 <_fwalk_sglue+0xc>
 8006284:	4630      	mov	r0, r6
 8006286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800628a:	89ab      	ldrh	r3, [r5, #12]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d907      	bls.n	80062a0 <_fwalk_sglue+0x38>
 8006290:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006294:	3301      	adds	r3, #1
 8006296:	d003      	beq.n	80062a0 <_fwalk_sglue+0x38>
 8006298:	4629      	mov	r1, r5
 800629a:	4638      	mov	r0, r7
 800629c:	47c0      	blx	r8
 800629e:	4306      	orrs	r6, r0
 80062a0:	3568      	adds	r5, #104	; 0x68
 80062a2:	e7e9      	b.n	8006278 <_fwalk_sglue+0x10>

080062a4 <sniprintf>:
 80062a4:	b40c      	push	{r2, r3}
 80062a6:	b530      	push	{r4, r5, lr}
 80062a8:	4b17      	ldr	r3, [pc, #92]	; (8006308 <sniprintf+0x64>)
 80062aa:	1e0c      	subs	r4, r1, #0
 80062ac:	681d      	ldr	r5, [r3, #0]
 80062ae:	b09d      	sub	sp, #116	; 0x74
 80062b0:	da08      	bge.n	80062c4 <sniprintf+0x20>
 80062b2:	238b      	movs	r3, #139	; 0x8b
 80062b4:	602b      	str	r3, [r5, #0]
 80062b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062ba:	b01d      	add	sp, #116	; 0x74
 80062bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062c0:	b002      	add	sp, #8
 80062c2:	4770      	bx	lr
 80062c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80062c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80062cc:	bf14      	ite	ne
 80062ce:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80062d2:	4623      	moveq	r3, r4
 80062d4:	9304      	str	r3, [sp, #16]
 80062d6:	9307      	str	r3, [sp, #28]
 80062d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062dc:	9002      	str	r0, [sp, #8]
 80062de:	9006      	str	r0, [sp, #24]
 80062e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80062e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80062e6:	ab21      	add	r3, sp, #132	; 0x84
 80062e8:	a902      	add	r1, sp, #8
 80062ea:	4628      	mov	r0, r5
 80062ec:	9301      	str	r3, [sp, #4]
 80062ee:	f002 fc0f 	bl	8008b10 <_svfiprintf_r>
 80062f2:	1c43      	adds	r3, r0, #1
 80062f4:	bfbc      	itt	lt
 80062f6:	238b      	movlt	r3, #139	; 0x8b
 80062f8:	602b      	strlt	r3, [r5, #0]
 80062fa:	2c00      	cmp	r4, #0
 80062fc:	d0dd      	beq.n	80062ba <sniprintf+0x16>
 80062fe:	9b02      	ldr	r3, [sp, #8]
 8006300:	2200      	movs	r2, #0
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	e7d9      	b.n	80062ba <sniprintf+0x16>
 8006306:	bf00      	nop
 8006308:	2000009c 	.word	0x2000009c

0800630c <siprintf>:
 800630c:	b40e      	push	{r1, r2, r3}
 800630e:	b500      	push	{lr}
 8006310:	b09c      	sub	sp, #112	; 0x70
 8006312:	ab1d      	add	r3, sp, #116	; 0x74
 8006314:	9002      	str	r0, [sp, #8]
 8006316:	9006      	str	r0, [sp, #24]
 8006318:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800631c:	4809      	ldr	r0, [pc, #36]	; (8006344 <siprintf+0x38>)
 800631e:	9107      	str	r1, [sp, #28]
 8006320:	9104      	str	r1, [sp, #16]
 8006322:	4909      	ldr	r1, [pc, #36]	; (8006348 <siprintf+0x3c>)
 8006324:	f853 2b04 	ldr.w	r2, [r3], #4
 8006328:	9105      	str	r1, [sp, #20]
 800632a:	6800      	ldr	r0, [r0, #0]
 800632c:	9301      	str	r3, [sp, #4]
 800632e:	a902      	add	r1, sp, #8
 8006330:	f002 fbee 	bl	8008b10 <_svfiprintf_r>
 8006334:	9b02      	ldr	r3, [sp, #8]
 8006336:	2200      	movs	r2, #0
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	b01c      	add	sp, #112	; 0x70
 800633c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006340:	b003      	add	sp, #12
 8006342:	4770      	bx	lr
 8006344:	2000009c 	.word	0x2000009c
 8006348:	ffff0208 	.word	0xffff0208

0800634c <__sread>:
 800634c:	b510      	push	{r4, lr}
 800634e:	460c      	mov	r4, r1
 8006350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006354:	f000 f86c 	bl	8006430 <_read_r>
 8006358:	2800      	cmp	r0, #0
 800635a:	bfab      	itete	ge
 800635c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800635e:	89a3      	ldrhlt	r3, [r4, #12]
 8006360:	181b      	addge	r3, r3, r0
 8006362:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006366:	bfac      	ite	ge
 8006368:	6563      	strge	r3, [r4, #84]	; 0x54
 800636a:	81a3      	strhlt	r3, [r4, #12]
 800636c:	bd10      	pop	{r4, pc}

0800636e <__swrite>:
 800636e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006372:	461f      	mov	r7, r3
 8006374:	898b      	ldrh	r3, [r1, #12]
 8006376:	05db      	lsls	r3, r3, #23
 8006378:	4605      	mov	r5, r0
 800637a:	460c      	mov	r4, r1
 800637c:	4616      	mov	r6, r2
 800637e:	d505      	bpl.n	800638c <__swrite+0x1e>
 8006380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006384:	2302      	movs	r3, #2
 8006386:	2200      	movs	r2, #0
 8006388:	f000 f840 	bl	800640c <_lseek_r>
 800638c:	89a3      	ldrh	r3, [r4, #12]
 800638e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006392:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006396:	81a3      	strh	r3, [r4, #12]
 8006398:	4632      	mov	r2, r6
 800639a:	463b      	mov	r3, r7
 800639c:	4628      	mov	r0, r5
 800639e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063a2:	f000 b857 	b.w	8006454 <_write_r>

080063a6 <__sseek>:
 80063a6:	b510      	push	{r4, lr}
 80063a8:	460c      	mov	r4, r1
 80063aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ae:	f000 f82d 	bl	800640c <_lseek_r>
 80063b2:	1c43      	adds	r3, r0, #1
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	bf15      	itete	ne
 80063b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80063ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063c2:	81a3      	strheq	r3, [r4, #12]
 80063c4:	bf18      	it	ne
 80063c6:	81a3      	strhne	r3, [r4, #12]
 80063c8:	bd10      	pop	{r4, pc}

080063ca <__sclose>:
 80063ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ce:	f000 b80d 	b.w	80063ec <_close_r>

080063d2 <memset>:
 80063d2:	4402      	add	r2, r0
 80063d4:	4603      	mov	r3, r0
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d100      	bne.n	80063dc <memset+0xa>
 80063da:	4770      	bx	lr
 80063dc:	f803 1b01 	strb.w	r1, [r3], #1
 80063e0:	e7f9      	b.n	80063d6 <memset+0x4>
	...

080063e4 <_localeconv_r>:
 80063e4:	4800      	ldr	r0, [pc, #0]	; (80063e8 <_localeconv_r+0x4>)
 80063e6:	4770      	bx	lr
 80063e8:	20000190 	.word	0x20000190

080063ec <_close_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	4d06      	ldr	r5, [pc, #24]	; (8006408 <_close_r+0x1c>)
 80063f0:	2300      	movs	r3, #0
 80063f2:	4604      	mov	r4, r0
 80063f4:	4608      	mov	r0, r1
 80063f6:	602b      	str	r3, [r5, #0]
 80063f8:	f7fb fa7f 	bl	80018fa <_close>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d102      	bne.n	8006406 <_close_r+0x1a>
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	b103      	cbz	r3, 8006406 <_close_r+0x1a>
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	20000c14 	.word	0x20000c14

0800640c <_lseek_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4d07      	ldr	r5, [pc, #28]	; (800642c <_lseek_r+0x20>)
 8006410:	4604      	mov	r4, r0
 8006412:	4608      	mov	r0, r1
 8006414:	4611      	mov	r1, r2
 8006416:	2200      	movs	r2, #0
 8006418:	602a      	str	r2, [r5, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	f7fb fa94 	bl	8001948 <_lseek>
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	d102      	bne.n	800642a <_lseek_r+0x1e>
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	b103      	cbz	r3, 800642a <_lseek_r+0x1e>
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	20000c14 	.word	0x20000c14

08006430 <_read_r>:
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	4d07      	ldr	r5, [pc, #28]	; (8006450 <_read_r+0x20>)
 8006434:	4604      	mov	r4, r0
 8006436:	4608      	mov	r0, r1
 8006438:	4611      	mov	r1, r2
 800643a:	2200      	movs	r2, #0
 800643c:	602a      	str	r2, [r5, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	f7fb fa22 	bl	8001888 <_read>
 8006444:	1c43      	adds	r3, r0, #1
 8006446:	d102      	bne.n	800644e <_read_r+0x1e>
 8006448:	682b      	ldr	r3, [r5, #0]
 800644a:	b103      	cbz	r3, 800644e <_read_r+0x1e>
 800644c:	6023      	str	r3, [r4, #0]
 800644e:	bd38      	pop	{r3, r4, r5, pc}
 8006450:	20000c14 	.word	0x20000c14

08006454 <_write_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4d07      	ldr	r5, [pc, #28]	; (8006474 <_write_r+0x20>)
 8006458:	4604      	mov	r4, r0
 800645a:	4608      	mov	r0, r1
 800645c:	4611      	mov	r1, r2
 800645e:	2200      	movs	r2, #0
 8006460:	602a      	str	r2, [r5, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	f7fb fa2d 	bl	80018c2 <_write>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d102      	bne.n	8006472 <_write_r+0x1e>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	b103      	cbz	r3, 8006472 <_write_r+0x1e>
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	20000c14 	.word	0x20000c14

08006478 <__errno>:
 8006478:	4b01      	ldr	r3, [pc, #4]	; (8006480 <__errno+0x8>)
 800647a:	6818      	ldr	r0, [r3, #0]
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	2000009c 	.word	0x2000009c

08006484 <__libc_init_array>:
 8006484:	b570      	push	{r4, r5, r6, lr}
 8006486:	4d0d      	ldr	r5, [pc, #52]	; (80064bc <__libc_init_array+0x38>)
 8006488:	4c0d      	ldr	r4, [pc, #52]	; (80064c0 <__libc_init_array+0x3c>)
 800648a:	1b64      	subs	r4, r4, r5
 800648c:	10a4      	asrs	r4, r4, #2
 800648e:	2600      	movs	r6, #0
 8006490:	42a6      	cmp	r6, r4
 8006492:	d109      	bne.n	80064a8 <__libc_init_array+0x24>
 8006494:	4d0b      	ldr	r5, [pc, #44]	; (80064c4 <__libc_init_array+0x40>)
 8006496:	4c0c      	ldr	r4, [pc, #48]	; (80064c8 <__libc_init_array+0x44>)
 8006498:	f003 fbd6 	bl	8009c48 <_init>
 800649c:	1b64      	subs	r4, r4, r5
 800649e:	10a4      	asrs	r4, r4, #2
 80064a0:	2600      	movs	r6, #0
 80064a2:	42a6      	cmp	r6, r4
 80064a4:	d105      	bne.n	80064b2 <__libc_init_array+0x2e>
 80064a6:	bd70      	pop	{r4, r5, r6, pc}
 80064a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ac:	4798      	blx	r3
 80064ae:	3601      	adds	r6, #1
 80064b0:	e7ee      	b.n	8006490 <__libc_init_array+0xc>
 80064b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b6:	4798      	blx	r3
 80064b8:	3601      	adds	r6, #1
 80064ba:	e7f2      	b.n	80064a2 <__libc_init_array+0x1e>
 80064bc:	0800a218 	.word	0x0800a218
 80064c0:	0800a218 	.word	0x0800a218
 80064c4:	0800a218 	.word	0x0800a218
 80064c8:	0800a21c 	.word	0x0800a21c

080064cc <__retarget_lock_init_recursive>:
 80064cc:	4770      	bx	lr

080064ce <__retarget_lock_acquire_recursive>:
 80064ce:	4770      	bx	lr

080064d0 <__retarget_lock_release_recursive>:
 80064d0:	4770      	bx	lr
	...

080064d4 <nanf>:
 80064d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80064dc <nanf+0x8>
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	7fc00000 	.word	0x7fc00000

080064e0 <quorem>:
 80064e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e4:	6903      	ldr	r3, [r0, #16]
 80064e6:	690c      	ldr	r4, [r1, #16]
 80064e8:	42a3      	cmp	r3, r4
 80064ea:	4607      	mov	r7, r0
 80064ec:	db7e      	blt.n	80065ec <quorem+0x10c>
 80064ee:	3c01      	subs	r4, #1
 80064f0:	f101 0814 	add.w	r8, r1, #20
 80064f4:	f100 0514 	add.w	r5, r0, #20
 80064f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064fc:	9301      	str	r3, [sp, #4]
 80064fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006502:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006506:	3301      	adds	r3, #1
 8006508:	429a      	cmp	r2, r3
 800650a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800650e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006512:	fbb2 f6f3 	udiv	r6, r2, r3
 8006516:	d331      	bcc.n	800657c <quorem+0x9c>
 8006518:	f04f 0e00 	mov.w	lr, #0
 800651c:	4640      	mov	r0, r8
 800651e:	46ac      	mov	ip, r5
 8006520:	46f2      	mov	sl, lr
 8006522:	f850 2b04 	ldr.w	r2, [r0], #4
 8006526:	b293      	uxth	r3, r2
 8006528:	fb06 e303 	mla	r3, r6, r3, lr
 800652c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006530:	0c1a      	lsrs	r2, r3, #16
 8006532:	b29b      	uxth	r3, r3
 8006534:	ebaa 0303 	sub.w	r3, sl, r3
 8006538:	f8dc a000 	ldr.w	sl, [ip]
 800653c:	fa13 f38a 	uxtah	r3, r3, sl
 8006540:	fb06 220e 	mla	r2, r6, lr, r2
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	9b00      	ldr	r3, [sp, #0]
 8006548:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800654c:	b292      	uxth	r2, r2
 800654e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006552:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006556:	f8bd 3000 	ldrh.w	r3, [sp]
 800655a:	4581      	cmp	r9, r0
 800655c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006560:	f84c 3b04 	str.w	r3, [ip], #4
 8006564:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006568:	d2db      	bcs.n	8006522 <quorem+0x42>
 800656a:	f855 300b 	ldr.w	r3, [r5, fp]
 800656e:	b92b      	cbnz	r3, 800657c <quorem+0x9c>
 8006570:	9b01      	ldr	r3, [sp, #4]
 8006572:	3b04      	subs	r3, #4
 8006574:	429d      	cmp	r5, r3
 8006576:	461a      	mov	r2, r3
 8006578:	d32c      	bcc.n	80065d4 <quorem+0xf4>
 800657a:	613c      	str	r4, [r7, #16]
 800657c:	4638      	mov	r0, r7
 800657e:	f001 f9ef 	bl	8007960 <__mcmp>
 8006582:	2800      	cmp	r0, #0
 8006584:	db22      	blt.n	80065cc <quorem+0xec>
 8006586:	3601      	adds	r6, #1
 8006588:	4629      	mov	r1, r5
 800658a:	2000      	movs	r0, #0
 800658c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006590:	f8d1 c000 	ldr.w	ip, [r1]
 8006594:	b293      	uxth	r3, r2
 8006596:	1ac3      	subs	r3, r0, r3
 8006598:	0c12      	lsrs	r2, r2, #16
 800659a:	fa13 f38c 	uxtah	r3, r3, ip
 800659e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80065a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065ac:	45c1      	cmp	r9, r8
 80065ae:	f841 3b04 	str.w	r3, [r1], #4
 80065b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80065b6:	d2e9      	bcs.n	800658c <quorem+0xac>
 80065b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065c0:	b922      	cbnz	r2, 80065cc <quorem+0xec>
 80065c2:	3b04      	subs	r3, #4
 80065c4:	429d      	cmp	r5, r3
 80065c6:	461a      	mov	r2, r3
 80065c8:	d30a      	bcc.n	80065e0 <quorem+0x100>
 80065ca:	613c      	str	r4, [r7, #16]
 80065cc:	4630      	mov	r0, r6
 80065ce:	b003      	add	sp, #12
 80065d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d4:	6812      	ldr	r2, [r2, #0]
 80065d6:	3b04      	subs	r3, #4
 80065d8:	2a00      	cmp	r2, #0
 80065da:	d1ce      	bne.n	800657a <quorem+0x9a>
 80065dc:	3c01      	subs	r4, #1
 80065de:	e7c9      	b.n	8006574 <quorem+0x94>
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	3b04      	subs	r3, #4
 80065e4:	2a00      	cmp	r2, #0
 80065e6:	d1f0      	bne.n	80065ca <quorem+0xea>
 80065e8:	3c01      	subs	r4, #1
 80065ea:	e7eb      	b.n	80065c4 <quorem+0xe4>
 80065ec:	2000      	movs	r0, #0
 80065ee:	e7ee      	b.n	80065ce <quorem+0xee>

080065f0 <_dtoa_r>:
 80065f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f4:	ed2d 8b04 	vpush	{d8-d9}
 80065f8:	69c5      	ldr	r5, [r0, #28]
 80065fa:	b093      	sub	sp, #76	; 0x4c
 80065fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006600:	ec57 6b10 	vmov	r6, r7, d0
 8006604:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006608:	9107      	str	r1, [sp, #28]
 800660a:	4604      	mov	r4, r0
 800660c:	920a      	str	r2, [sp, #40]	; 0x28
 800660e:	930d      	str	r3, [sp, #52]	; 0x34
 8006610:	b975      	cbnz	r5, 8006630 <_dtoa_r+0x40>
 8006612:	2010      	movs	r0, #16
 8006614:	f000 fe2a 	bl	800726c <malloc>
 8006618:	4602      	mov	r2, r0
 800661a:	61e0      	str	r0, [r4, #28]
 800661c:	b920      	cbnz	r0, 8006628 <_dtoa_r+0x38>
 800661e:	4bae      	ldr	r3, [pc, #696]	; (80068d8 <_dtoa_r+0x2e8>)
 8006620:	21ef      	movs	r1, #239	; 0xef
 8006622:	48ae      	ldr	r0, [pc, #696]	; (80068dc <_dtoa_r+0x2ec>)
 8006624:	f002 fc74 	bl	8008f10 <__assert_func>
 8006628:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800662c:	6005      	str	r5, [r0, #0]
 800662e:	60c5      	str	r5, [r0, #12]
 8006630:	69e3      	ldr	r3, [r4, #28]
 8006632:	6819      	ldr	r1, [r3, #0]
 8006634:	b151      	cbz	r1, 800664c <_dtoa_r+0x5c>
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	604a      	str	r2, [r1, #4]
 800663a:	2301      	movs	r3, #1
 800663c:	4093      	lsls	r3, r2
 800663e:	608b      	str	r3, [r1, #8]
 8006640:	4620      	mov	r0, r4
 8006642:	f000 ff07 	bl	8007454 <_Bfree>
 8006646:	69e3      	ldr	r3, [r4, #28]
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	1e3b      	subs	r3, r7, #0
 800664e:	bfbb      	ittet	lt
 8006650:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006654:	9303      	strlt	r3, [sp, #12]
 8006656:	2300      	movge	r3, #0
 8006658:	2201      	movlt	r2, #1
 800665a:	bfac      	ite	ge
 800665c:	f8c8 3000 	strge.w	r3, [r8]
 8006660:	f8c8 2000 	strlt.w	r2, [r8]
 8006664:	4b9e      	ldr	r3, [pc, #632]	; (80068e0 <_dtoa_r+0x2f0>)
 8006666:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800666a:	ea33 0308 	bics.w	r3, r3, r8
 800666e:	d11b      	bne.n	80066a8 <_dtoa_r+0xb8>
 8006670:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006672:	f242 730f 	movw	r3, #9999	; 0x270f
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800667c:	4333      	orrs	r3, r6
 800667e:	f000 8593 	beq.w	80071a8 <_dtoa_r+0xbb8>
 8006682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006684:	b963      	cbnz	r3, 80066a0 <_dtoa_r+0xb0>
 8006686:	4b97      	ldr	r3, [pc, #604]	; (80068e4 <_dtoa_r+0x2f4>)
 8006688:	e027      	b.n	80066da <_dtoa_r+0xea>
 800668a:	4b97      	ldr	r3, [pc, #604]	; (80068e8 <_dtoa_r+0x2f8>)
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	3308      	adds	r3, #8
 8006690:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006692:	6013      	str	r3, [r2, #0]
 8006694:	9800      	ldr	r0, [sp, #0]
 8006696:	b013      	add	sp, #76	; 0x4c
 8006698:	ecbd 8b04 	vpop	{d8-d9}
 800669c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a0:	4b90      	ldr	r3, [pc, #576]	; (80068e4 <_dtoa_r+0x2f4>)
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	3303      	adds	r3, #3
 80066a6:	e7f3      	b.n	8006690 <_dtoa_r+0xa0>
 80066a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066ac:	2200      	movs	r2, #0
 80066ae:	ec51 0b17 	vmov	r0, r1, d7
 80066b2:	eeb0 8a47 	vmov.f32	s16, s14
 80066b6:	eef0 8a67 	vmov.f32	s17, s15
 80066ba:	2300      	movs	r3, #0
 80066bc:	f7fa fa14 	bl	8000ae8 <__aeabi_dcmpeq>
 80066c0:	4681      	mov	r9, r0
 80066c2:	b160      	cbz	r0, 80066de <_dtoa_r+0xee>
 80066c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066c6:	2301      	movs	r3, #1
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 8568 	beq.w	80071a2 <_dtoa_r+0xbb2>
 80066d2:	4b86      	ldr	r3, [pc, #536]	; (80068ec <_dtoa_r+0x2fc>)
 80066d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	3b01      	subs	r3, #1
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	e7da      	b.n	8006694 <_dtoa_r+0xa4>
 80066de:	aa10      	add	r2, sp, #64	; 0x40
 80066e0:	a911      	add	r1, sp, #68	; 0x44
 80066e2:	4620      	mov	r0, r4
 80066e4:	eeb0 0a48 	vmov.f32	s0, s16
 80066e8:	eef0 0a68 	vmov.f32	s1, s17
 80066ec:	f001 fa4e 	bl	8007b8c <__d2b>
 80066f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80066f4:	4682      	mov	sl, r0
 80066f6:	2d00      	cmp	r5, #0
 80066f8:	d07f      	beq.n	80067fa <_dtoa_r+0x20a>
 80066fa:	ee18 3a90 	vmov	r3, s17
 80066fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006702:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006706:	ec51 0b18 	vmov	r0, r1, d8
 800670a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800670e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006712:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006716:	4619      	mov	r1, r3
 8006718:	2200      	movs	r2, #0
 800671a:	4b75      	ldr	r3, [pc, #468]	; (80068f0 <_dtoa_r+0x300>)
 800671c:	f7f9 fdc4 	bl	80002a8 <__aeabi_dsub>
 8006720:	a367      	add	r3, pc, #412	; (adr r3, 80068c0 <_dtoa_r+0x2d0>)
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	f7f9 ff77 	bl	8000618 <__aeabi_dmul>
 800672a:	a367      	add	r3, pc, #412	; (adr r3, 80068c8 <_dtoa_r+0x2d8>)
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	f7f9 fdbc 	bl	80002ac <__adddf3>
 8006734:	4606      	mov	r6, r0
 8006736:	4628      	mov	r0, r5
 8006738:	460f      	mov	r7, r1
 800673a:	f7f9 ff03 	bl	8000544 <__aeabi_i2d>
 800673e:	a364      	add	r3, pc, #400	; (adr r3, 80068d0 <_dtoa_r+0x2e0>)
 8006740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006744:	f7f9 ff68 	bl	8000618 <__aeabi_dmul>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4630      	mov	r0, r6
 800674e:	4639      	mov	r1, r7
 8006750:	f7f9 fdac 	bl	80002ac <__adddf3>
 8006754:	4606      	mov	r6, r0
 8006756:	460f      	mov	r7, r1
 8006758:	f7fa fa0e 	bl	8000b78 <__aeabi_d2iz>
 800675c:	2200      	movs	r2, #0
 800675e:	4683      	mov	fp, r0
 8006760:	2300      	movs	r3, #0
 8006762:	4630      	mov	r0, r6
 8006764:	4639      	mov	r1, r7
 8006766:	f7fa f9c9 	bl	8000afc <__aeabi_dcmplt>
 800676a:	b148      	cbz	r0, 8006780 <_dtoa_r+0x190>
 800676c:	4658      	mov	r0, fp
 800676e:	f7f9 fee9 	bl	8000544 <__aeabi_i2d>
 8006772:	4632      	mov	r2, r6
 8006774:	463b      	mov	r3, r7
 8006776:	f7fa f9b7 	bl	8000ae8 <__aeabi_dcmpeq>
 800677a:	b908      	cbnz	r0, 8006780 <_dtoa_r+0x190>
 800677c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006780:	f1bb 0f16 	cmp.w	fp, #22
 8006784:	d857      	bhi.n	8006836 <_dtoa_r+0x246>
 8006786:	4b5b      	ldr	r3, [pc, #364]	; (80068f4 <_dtoa_r+0x304>)
 8006788:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006790:	ec51 0b18 	vmov	r0, r1, d8
 8006794:	f7fa f9b2 	bl	8000afc <__aeabi_dcmplt>
 8006798:	2800      	cmp	r0, #0
 800679a:	d04e      	beq.n	800683a <_dtoa_r+0x24a>
 800679c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80067a0:	2300      	movs	r3, #0
 80067a2:	930c      	str	r3, [sp, #48]	; 0x30
 80067a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067a6:	1b5b      	subs	r3, r3, r5
 80067a8:	1e5a      	subs	r2, r3, #1
 80067aa:	bf45      	ittet	mi
 80067ac:	f1c3 0301 	rsbmi	r3, r3, #1
 80067b0:	9305      	strmi	r3, [sp, #20]
 80067b2:	2300      	movpl	r3, #0
 80067b4:	2300      	movmi	r3, #0
 80067b6:	9206      	str	r2, [sp, #24]
 80067b8:	bf54      	ite	pl
 80067ba:	9305      	strpl	r3, [sp, #20]
 80067bc:	9306      	strmi	r3, [sp, #24]
 80067be:	f1bb 0f00 	cmp.w	fp, #0
 80067c2:	db3c      	blt.n	800683e <_dtoa_r+0x24e>
 80067c4:	9b06      	ldr	r3, [sp, #24]
 80067c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80067ca:	445b      	add	r3, fp
 80067cc:	9306      	str	r3, [sp, #24]
 80067ce:	2300      	movs	r3, #0
 80067d0:	9308      	str	r3, [sp, #32]
 80067d2:	9b07      	ldr	r3, [sp, #28]
 80067d4:	2b09      	cmp	r3, #9
 80067d6:	d868      	bhi.n	80068aa <_dtoa_r+0x2ba>
 80067d8:	2b05      	cmp	r3, #5
 80067da:	bfc4      	itt	gt
 80067dc:	3b04      	subgt	r3, #4
 80067de:	9307      	strgt	r3, [sp, #28]
 80067e0:	9b07      	ldr	r3, [sp, #28]
 80067e2:	f1a3 0302 	sub.w	r3, r3, #2
 80067e6:	bfcc      	ite	gt
 80067e8:	2500      	movgt	r5, #0
 80067ea:	2501      	movle	r5, #1
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	f200 8085 	bhi.w	80068fc <_dtoa_r+0x30c>
 80067f2:	e8df f003 	tbb	[pc, r3]
 80067f6:	3b2e      	.short	0x3b2e
 80067f8:	5839      	.short	0x5839
 80067fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80067fe:	441d      	add	r5, r3
 8006800:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006804:	2b20      	cmp	r3, #32
 8006806:	bfc1      	itttt	gt
 8006808:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800680c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006810:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006814:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006818:	bfd6      	itet	le
 800681a:	f1c3 0320 	rsble	r3, r3, #32
 800681e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006822:	fa06 f003 	lslle.w	r0, r6, r3
 8006826:	f7f9 fe7d 	bl	8000524 <__aeabi_ui2d>
 800682a:	2201      	movs	r2, #1
 800682c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006830:	3d01      	subs	r5, #1
 8006832:	920e      	str	r2, [sp, #56]	; 0x38
 8006834:	e76f      	b.n	8006716 <_dtoa_r+0x126>
 8006836:	2301      	movs	r3, #1
 8006838:	e7b3      	b.n	80067a2 <_dtoa_r+0x1b2>
 800683a:	900c      	str	r0, [sp, #48]	; 0x30
 800683c:	e7b2      	b.n	80067a4 <_dtoa_r+0x1b4>
 800683e:	9b05      	ldr	r3, [sp, #20]
 8006840:	eba3 030b 	sub.w	r3, r3, fp
 8006844:	9305      	str	r3, [sp, #20]
 8006846:	f1cb 0300 	rsb	r3, fp, #0
 800684a:	9308      	str	r3, [sp, #32]
 800684c:	2300      	movs	r3, #0
 800684e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006850:	e7bf      	b.n	80067d2 <_dtoa_r+0x1e2>
 8006852:	2300      	movs	r3, #0
 8006854:	9309      	str	r3, [sp, #36]	; 0x24
 8006856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006858:	2b00      	cmp	r3, #0
 800685a:	dc52      	bgt.n	8006902 <_dtoa_r+0x312>
 800685c:	2301      	movs	r3, #1
 800685e:	9301      	str	r3, [sp, #4]
 8006860:	9304      	str	r3, [sp, #16]
 8006862:	461a      	mov	r2, r3
 8006864:	920a      	str	r2, [sp, #40]	; 0x28
 8006866:	e00b      	b.n	8006880 <_dtoa_r+0x290>
 8006868:	2301      	movs	r3, #1
 800686a:	e7f3      	b.n	8006854 <_dtoa_r+0x264>
 800686c:	2300      	movs	r3, #0
 800686e:	9309      	str	r3, [sp, #36]	; 0x24
 8006870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006872:	445b      	add	r3, fp
 8006874:	9301      	str	r3, [sp, #4]
 8006876:	3301      	adds	r3, #1
 8006878:	2b01      	cmp	r3, #1
 800687a:	9304      	str	r3, [sp, #16]
 800687c:	bfb8      	it	lt
 800687e:	2301      	movlt	r3, #1
 8006880:	69e0      	ldr	r0, [r4, #28]
 8006882:	2100      	movs	r1, #0
 8006884:	2204      	movs	r2, #4
 8006886:	f102 0614 	add.w	r6, r2, #20
 800688a:	429e      	cmp	r6, r3
 800688c:	d93d      	bls.n	800690a <_dtoa_r+0x31a>
 800688e:	6041      	str	r1, [r0, #4]
 8006890:	4620      	mov	r0, r4
 8006892:	f000 fd9f 	bl	80073d4 <_Balloc>
 8006896:	9000      	str	r0, [sp, #0]
 8006898:	2800      	cmp	r0, #0
 800689a:	d139      	bne.n	8006910 <_dtoa_r+0x320>
 800689c:	4b16      	ldr	r3, [pc, #88]	; (80068f8 <_dtoa_r+0x308>)
 800689e:	4602      	mov	r2, r0
 80068a0:	f240 11af 	movw	r1, #431	; 0x1af
 80068a4:	e6bd      	b.n	8006622 <_dtoa_r+0x32>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e7e1      	b.n	800686e <_dtoa_r+0x27e>
 80068aa:	2501      	movs	r5, #1
 80068ac:	2300      	movs	r3, #0
 80068ae:	9307      	str	r3, [sp, #28]
 80068b0:	9509      	str	r5, [sp, #36]	; 0x24
 80068b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068b6:	9301      	str	r3, [sp, #4]
 80068b8:	9304      	str	r3, [sp, #16]
 80068ba:	2200      	movs	r2, #0
 80068bc:	2312      	movs	r3, #18
 80068be:	e7d1      	b.n	8006864 <_dtoa_r+0x274>
 80068c0:	636f4361 	.word	0x636f4361
 80068c4:	3fd287a7 	.word	0x3fd287a7
 80068c8:	8b60c8b3 	.word	0x8b60c8b3
 80068cc:	3fc68a28 	.word	0x3fc68a28
 80068d0:	509f79fb 	.word	0x509f79fb
 80068d4:	3fd34413 	.word	0x3fd34413
 80068d8:	08009e2e 	.word	0x08009e2e
 80068dc:	08009e45 	.word	0x08009e45
 80068e0:	7ff00000 	.word	0x7ff00000
 80068e4:	08009e2a 	.word	0x08009e2a
 80068e8:	08009e21 	.word	0x08009e21
 80068ec:	08009df9 	.word	0x08009df9
 80068f0:	3ff80000 	.word	0x3ff80000
 80068f4:	08009f30 	.word	0x08009f30
 80068f8:	08009e9d 	.word	0x08009e9d
 80068fc:	2301      	movs	r3, #1
 80068fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006900:	e7d7      	b.n	80068b2 <_dtoa_r+0x2c2>
 8006902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006904:	9301      	str	r3, [sp, #4]
 8006906:	9304      	str	r3, [sp, #16]
 8006908:	e7ba      	b.n	8006880 <_dtoa_r+0x290>
 800690a:	3101      	adds	r1, #1
 800690c:	0052      	lsls	r2, r2, #1
 800690e:	e7ba      	b.n	8006886 <_dtoa_r+0x296>
 8006910:	69e3      	ldr	r3, [r4, #28]
 8006912:	9a00      	ldr	r2, [sp, #0]
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	9b04      	ldr	r3, [sp, #16]
 8006918:	2b0e      	cmp	r3, #14
 800691a:	f200 80a8 	bhi.w	8006a6e <_dtoa_r+0x47e>
 800691e:	2d00      	cmp	r5, #0
 8006920:	f000 80a5 	beq.w	8006a6e <_dtoa_r+0x47e>
 8006924:	f1bb 0f00 	cmp.w	fp, #0
 8006928:	dd38      	ble.n	800699c <_dtoa_r+0x3ac>
 800692a:	4bc0      	ldr	r3, [pc, #768]	; (8006c2c <_dtoa_r+0x63c>)
 800692c:	f00b 020f 	and.w	r2, fp, #15
 8006930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006934:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006938:	e9d3 6700 	ldrd	r6, r7, [r3]
 800693c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006940:	d019      	beq.n	8006976 <_dtoa_r+0x386>
 8006942:	4bbb      	ldr	r3, [pc, #748]	; (8006c30 <_dtoa_r+0x640>)
 8006944:	ec51 0b18 	vmov	r0, r1, d8
 8006948:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800694c:	f7f9 ff8e 	bl	800086c <__aeabi_ddiv>
 8006950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006954:	f008 080f 	and.w	r8, r8, #15
 8006958:	2503      	movs	r5, #3
 800695a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006c30 <_dtoa_r+0x640>
 800695e:	f1b8 0f00 	cmp.w	r8, #0
 8006962:	d10a      	bne.n	800697a <_dtoa_r+0x38a>
 8006964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006968:	4632      	mov	r2, r6
 800696a:	463b      	mov	r3, r7
 800696c:	f7f9 ff7e 	bl	800086c <__aeabi_ddiv>
 8006970:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006974:	e02b      	b.n	80069ce <_dtoa_r+0x3de>
 8006976:	2502      	movs	r5, #2
 8006978:	e7ef      	b.n	800695a <_dtoa_r+0x36a>
 800697a:	f018 0f01 	tst.w	r8, #1
 800697e:	d008      	beq.n	8006992 <_dtoa_r+0x3a2>
 8006980:	4630      	mov	r0, r6
 8006982:	4639      	mov	r1, r7
 8006984:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006988:	f7f9 fe46 	bl	8000618 <__aeabi_dmul>
 800698c:	3501      	adds	r5, #1
 800698e:	4606      	mov	r6, r0
 8006990:	460f      	mov	r7, r1
 8006992:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006996:	f109 0908 	add.w	r9, r9, #8
 800699a:	e7e0      	b.n	800695e <_dtoa_r+0x36e>
 800699c:	f000 809f 	beq.w	8006ade <_dtoa_r+0x4ee>
 80069a0:	f1cb 0600 	rsb	r6, fp, #0
 80069a4:	4ba1      	ldr	r3, [pc, #644]	; (8006c2c <_dtoa_r+0x63c>)
 80069a6:	4fa2      	ldr	r7, [pc, #648]	; (8006c30 <_dtoa_r+0x640>)
 80069a8:	f006 020f 	and.w	r2, r6, #15
 80069ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	ec51 0b18 	vmov	r0, r1, d8
 80069b8:	f7f9 fe2e 	bl	8000618 <__aeabi_dmul>
 80069bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069c0:	1136      	asrs	r6, r6, #4
 80069c2:	2300      	movs	r3, #0
 80069c4:	2502      	movs	r5, #2
 80069c6:	2e00      	cmp	r6, #0
 80069c8:	d17e      	bne.n	8006ac8 <_dtoa_r+0x4d8>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1d0      	bne.n	8006970 <_dtoa_r+0x380>
 80069ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 8084 	beq.w	8006ae2 <_dtoa_r+0x4f2>
 80069da:	4b96      	ldr	r3, [pc, #600]	; (8006c34 <_dtoa_r+0x644>)
 80069dc:	2200      	movs	r2, #0
 80069de:	4640      	mov	r0, r8
 80069e0:	4649      	mov	r1, r9
 80069e2:	f7fa f88b 	bl	8000afc <__aeabi_dcmplt>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d07b      	beq.n	8006ae2 <_dtoa_r+0x4f2>
 80069ea:	9b04      	ldr	r3, [sp, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d078      	beq.n	8006ae2 <_dtoa_r+0x4f2>
 80069f0:	9b01      	ldr	r3, [sp, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	dd39      	ble.n	8006a6a <_dtoa_r+0x47a>
 80069f6:	4b90      	ldr	r3, [pc, #576]	; (8006c38 <_dtoa_r+0x648>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	4640      	mov	r0, r8
 80069fc:	4649      	mov	r1, r9
 80069fe:	f7f9 fe0b 	bl	8000618 <__aeabi_dmul>
 8006a02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a06:	9e01      	ldr	r6, [sp, #4]
 8006a08:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006a0c:	3501      	adds	r5, #1
 8006a0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a12:	4628      	mov	r0, r5
 8006a14:	f7f9 fd96 	bl	8000544 <__aeabi_i2d>
 8006a18:	4642      	mov	r2, r8
 8006a1a:	464b      	mov	r3, r9
 8006a1c:	f7f9 fdfc 	bl	8000618 <__aeabi_dmul>
 8006a20:	4b86      	ldr	r3, [pc, #536]	; (8006c3c <_dtoa_r+0x64c>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	f7f9 fc42 	bl	80002ac <__adddf3>
 8006a28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a30:	9303      	str	r3, [sp, #12]
 8006a32:	2e00      	cmp	r6, #0
 8006a34:	d158      	bne.n	8006ae8 <_dtoa_r+0x4f8>
 8006a36:	4b82      	ldr	r3, [pc, #520]	; (8006c40 <_dtoa_r+0x650>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	f7f9 fc33 	bl	80002a8 <__aeabi_dsub>
 8006a42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a46:	4680      	mov	r8, r0
 8006a48:	4689      	mov	r9, r1
 8006a4a:	f7fa f875 	bl	8000b38 <__aeabi_dcmpgt>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	f040 8296 	bne.w	8006f80 <_dtoa_r+0x990>
 8006a54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006a58:	4640      	mov	r0, r8
 8006a5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a5e:	4649      	mov	r1, r9
 8006a60:	f7fa f84c 	bl	8000afc <__aeabi_dcmplt>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	f040 8289 	bne.w	8006f7c <_dtoa_r+0x98c>
 8006a6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006a6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f2c0 814e 	blt.w	8006d12 <_dtoa_r+0x722>
 8006a76:	f1bb 0f0e 	cmp.w	fp, #14
 8006a7a:	f300 814a 	bgt.w	8006d12 <_dtoa_r+0x722>
 8006a7e:	4b6b      	ldr	r3, [pc, #428]	; (8006c2c <_dtoa_r+0x63c>)
 8006a80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f280 80dc 	bge.w	8006c48 <_dtoa_r+0x658>
 8006a90:	9b04      	ldr	r3, [sp, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f300 80d8 	bgt.w	8006c48 <_dtoa_r+0x658>
 8006a98:	f040 826f 	bne.w	8006f7a <_dtoa_r+0x98a>
 8006a9c:	4b68      	ldr	r3, [pc, #416]	; (8006c40 <_dtoa_r+0x650>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	4640      	mov	r0, r8
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	f7f9 fdb8 	bl	8000618 <__aeabi_dmul>
 8006aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aac:	f7fa f83a 	bl	8000b24 <__aeabi_dcmpge>
 8006ab0:	9e04      	ldr	r6, [sp, #16]
 8006ab2:	4637      	mov	r7, r6
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	f040 8245 	bne.w	8006f44 <_dtoa_r+0x954>
 8006aba:	9d00      	ldr	r5, [sp, #0]
 8006abc:	2331      	movs	r3, #49	; 0x31
 8006abe:	f805 3b01 	strb.w	r3, [r5], #1
 8006ac2:	f10b 0b01 	add.w	fp, fp, #1
 8006ac6:	e241      	b.n	8006f4c <_dtoa_r+0x95c>
 8006ac8:	07f2      	lsls	r2, r6, #31
 8006aca:	d505      	bpl.n	8006ad8 <_dtoa_r+0x4e8>
 8006acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ad0:	f7f9 fda2 	bl	8000618 <__aeabi_dmul>
 8006ad4:	3501      	adds	r5, #1
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	1076      	asrs	r6, r6, #1
 8006ada:	3708      	adds	r7, #8
 8006adc:	e773      	b.n	80069c6 <_dtoa_r+0x3d6>
 8006ade:	2502      	movs	r5, #2
 8006ae0:	e775      	b.n	80069ce <_dtoa_r+0x3de>
 8006ae2:	9e04      	ldr	r6, [sp, #16]
 8006ae4:	465f      	mov	r7, fp
 8006ae6:	e792      	b.n	8006a0e <_dtoa_r+0x41e>
 8006ae8:	9900      	ldr	r1, [sp, #0]
 8006aea:	4b50      	ldr	r3, [pc, #320]	; (8006c2c <_dtoa_r+0x63c>)
 8006aec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006af0:	4431      	add	r1, r6
 8006af2:	9102      	str	r1, [sp, #8]
 8006af4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006af6:	eeb0 9a47 	vmov.f32	s18, s14
 8006afa:	eef0 9a67 	vmov.f32	s19, s15
 8006afe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b06:	2900      	cmp	r1, #0
 8006b08:	d044      	beq.n	8006b94 <_dtoa_r+0x5a4>
 8006b0a:	494e      	ldr	r1, [pc, #312]	; (8006c44 <_dtoa_r+0x654>)
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	f7f9 fead 	bl	800086c <__aeabi_ddiv>
 8006b12:	ec53 2b19 	vmov	r2, r3, d9
 8006b16:	f7f9 fbc7 	bl	80002a8 <__aeabi_dsub>
 8006b1a:	9d00      	ldr	r5, [sp, #0]
 8006b1c:	ec41 0b19 	vmov	d9, r0, r1
 8006b20:	4649      	mov	r1, r9
 8006b22:	4640      	mov	r0, r8
 8006b24:	f7fa f828 	bl	8000b78 <__aeabi_d2iz>
 8006b28:	4606      	mov	r6, r0
 8006b2a:	f7f9 fd0b 	bl	8000544 <__aeabi_i2d>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	4640      	mov	r0, r8
 8006b34:	4649      	mov	r1, r9
 8006b36:	f7f9 fbb7 	bl	80002a8 <__aeabi_dsub>
 8006b3a:	3630      	adds	r6, #48	; 0x30
 8006b3c:	f805 6b01 	strb.w	r6, [r5], #1
 8006b40:	ec53 2b19 	vmov	r2, r3, d9
 8006b44:	4680      	mov	r8, r0
 8006b46:	4689      	mov	r9, r1
 8006b48:	f7f9 ffd8 	bl	8000afc <__aeabi_dcmplt>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d164      	bne.n	8006c1a <_dtoa_r+0x62a>
 8006b50:	4642      	mov	r2, r8
 8006b52:	464b      	mov	r3, r9
 8006b54:	4937      	ldr	r1, [pc, #220]	; (8006c34 <_dtoa_r+0x644>)
 8006b56:	2000      	movs	r0, #0
 8006b58:	f7f9 fba6 	bl	80002a8 <__aeabi_dsub>
 8006b5c:	ec53 2b19 	vmov	r2, r3, d9
 8006b60:	f7f9 ffcc 	bl	8000afc <__aeabi_dcmplt>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	f040 80b6 	bne.w	8006cd6 <_dtoa_r+0x6e6>
 8006b6a:	9b02      	ldr	r3, [sp, #8]
 8006b6c:	429d      	cmp	r5, r3
 8006b6e:	f43f af7c 	beq.w	8006a6a <_dtoa_r+0x47a>
 8006b72:	4b31      	ldr	r3, [pc, #196]	; (8006c38 <_dtoa_r+0x648>)
 8006b74:	ec51 0b19 	vmov	r0, r1, d9
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f7f9 fd4d 	bl	8000618 <__aeabi_dmul>
 8006b7e:	4b2e      	ldr	r3, [pc, #184]	; (8006c38 <_dtoa_r+0x648>)
 8006b80:	ec41 0b19 	vmov	d9, r0, r1
 8006b84:	2200      	movs	r2, #0
 8006b86:	4640      	mov	r0, r8
 8006b88:	4649      	mov	r1, r9
 8006b8a:	f7f9 fd45 	bl	8000618 <__aeabi_dmul>
 8006b8e:	4680      	mov	r8, r0
 8006b90:	4689      	mov	r9, r1
 8006b92:	e7c5      	b.n	8006b20 <_dtoa_r+0x530>
 8006b94:	ec51 0b17 	vmov	r0, r1, d7
 8006b98:	f7f9 fd3e 	bl	8000618 <__aeabi_dmul>
 8006b9c:	9b02      	ldr	r3, [sp, #8]
 8006b9e:	9d00      	ldr	r5, [sp, #0]
 8006ba0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ba2:	ec41 0b19 	vmov	d9, r0, r1
 8006ba6:	4649      	mov	r1, r9
 8006ba8:	4640      	mov	r0, r8
 8006baa:	f7f9 ffe5 	bl	8000b78 <__aeabi_d2iz>
 8006bae:	4606      	mov	r6, r0
 8006bb0:	f7f9 fcc8 	bl	8000544 <__aeabi_i2d>
 8006bb4:	3630      	adds	r6, #48	; 0x30
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4640      	mov	r0, r8
 8006bbc:	4649      	mov	r1, r9
 8006bbe:	f7f9 fb73 	bl	80002a8 <__aeabi_dsub>
 8006bc2:	f805 6b01 	strb.w	r6, [r5], #1
 8006bc6:	9b02      	ldr	r3, [sp, #8]
 8006bc8:	429d      	cmp	r5, r3
 8006bca:	4680      	mov	r8, r0
 8006bcc:	4689      	mov	r9, r1
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	d124      	bne.n	8006c1e <_dtoa_r+0x62e>
 8006bd4:	4b1b      	ldr	r3, [pc, #108]	; (8006c44 <_dtoa_r+0x654>)
 8006bd6:	ec51 0b19 	vmov	r0, r1, d9
 8006bda:	f7f9 fb67 	bl	80002ac <__adddf3>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	4640      	mov	r0, r8
 8006be4:	4649      	mov	r1, r9
 8006be6:	f7f9 ffa7 	bl	8000b38 <__aeabi_dcmpgt>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d173      	bne.n	8006cd6 <_dtoa_r+0x6e6>
 8006bee:	ec53 2b19 	vmov	r2, r3, d9
 8006bf2:	4914      	ldr	r1, [pc, #80]	; (8006c44 <_dtoa_r+0x654>)
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	f7f9 fb57 	bl	80002a8 <__aeabi_dsub>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4640      	mov	r0, r8
 8006c00:	4649      	mov	r1, r9
 8006c02:	f7f9 ff7b 	bl	8000afc <__aeabi_dcmplt>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	f43f af2f 	beq.w	8006a6a <_dtoa_r+0x47a>
 8006c0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c0e:	1e6b      	subs	r3, r5, #1
 8006c10:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c16:	2b30      	cmp	r3, #48	; 0x30
 8006c18:	d0f8      	beq.n	8006c0c <_dtoa_r+0x61c>
 8006c1a:	46bb      	mov	fp, r7
 8006c1c:	e04a      	b.n	8006cb4 <_dtoa_r+0x6c4>
 8006c1e:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <_dtoa_r+0x648>)
 8006c20:	f7f9 fcfa 	bl	8000618 <__aeabi_dmul>
 8006c24:	4680      	mov	r8, r0
 8006c26:	4689      	mov	r9, r1
 8006c28:	e7bd      	b.n	8006ba6 <_dtoa_r+0x5b6>
 8006c2a:	bf00      	nop
 8006c2c:	08009f30 	.word	0x08009f30
 8006c30:	08009f08 	.word	0x08009f08
 8006c34:	3ff00000 	.word	0x3ff00000
 8006c38:	40240000 	.word	0x40240000
 8006c3c:	401c0000 	.word	0x401c0000
 8006c40:	40140000 	.word	0x40140000
 8006c44:	3fe00000 	.word	0x3fe00000
 8006c48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c4c:	9d00      	ldr	r5, [sp, #0]
 8006c4e:	4642      	mov	r2, r8
 8006c50:	464b      	mov	r3, r9
 8006c52:	4630      	mov	r0, r6
 8006c54:	4639      	mov	r1, r7
 8006c56:	f7f9 fe09 	bl	800086c <__aeabi_ddiv>
 8006c5a:	f7f9 ff8d 	bl	8000b78 <__aeabi_d2iz>
 8006c5e:	9001      	str	r0, [sp, #4]
 8006c60:	f7f9 fc70 	bl	8000544 <__aeabi_i2d>
 8006c64:	4642      	mov	r2, r8
 8006c66:	464b      	mov	r3, r9
 8006c68:	f7f9 fcd6 	bl	8000618 <__aeabi_dmul>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4630      	mov	r0, r6
 8006c72:	4639      	mov	r1, r7
 8006c74:	f7f9 fb18 	bl	80002a8 <__aeabi_dsub>
 8006c78:	9e01      	ldr	r6, [sp, #4]
 8006c7a:	9f04      	ldr	r7, [sp, #16]
 8006c7c:	3630      	adds	r6, #48	; 0x30
 8006c7e:	f805 6b01 	strb.w	r6, [r5], #1
 8006c82:	9e00      	ldr	r6, [sp, #0]
 8006c84:	1bae      	subs	r6, r5, r6
 8006c86:	42b7      	cmp	r7, r6
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	d134      	bne.n	8006cf8 <_dtoa_r+0x708>
 8006c8e:	f7f9 fb0d 	bl	80002ac <__adddf3>
 8006c92:	4642      	mov	r2, r8
 8006c94:	464b      	mov	r3, r9
 8006c96:	4606      	mov	r6, r0
 8006c98:	460f      	mov	r7, r1
 8006c9a:	f7f9 ff4d 	bl	8000b38 <__aeabi_dcmpgt>
 8006c9e:	b9c8      	cbnz	r0, 8006cd4 <_dtoa_r+0x6e4>
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	464b      	mov	r3, r9
 8006ca4:	4630      	mov	r0, r6
 8006ca6:	4639      	mov	r1, r7
 8006ca8:	f7f9 ff1e 	bl	8000ae8 <__aeabi_dcmpeq>
 8006cac:	b110      	cbz	r0, 8006cb4 <_dtoa_r+0x6c4>
 8006cae:	9b01      	ldr	r3, [sp, #4]
 8006cb0:	07db      	lsls	r3, r3, #31
 8006cb2:	d40f      	bmi.n	8006cd4 <_dtoa_r+0x6e4>
 8006cb4:	4651      	mov	r1, sl
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f000 fbcc 	bl	8007454 <_Bfree>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006cc0:	702b      	strb	r3, [r5, #0]
 8006cc2:	f10b 0301 	add.w	r3, fp, #1
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f43f ace2 	beq.w	8006694 <_dtoa_r+0xa4>
 8006cd0:	601d      	str	r5, [r3, #0]
 8006cd2:	e4df      	b.n	8006694 <_dtoa_r+0xa4>
 8006cd4:	465f      	mov	r7, fp
 8006cd6:	462b      	mov	r3, r5
 8006cd8:	461d      	mov	r5, r3
 8006cda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cde:	2a39      	cmp	r2, #57	; 0x39
 8006ce0:	d106      	bne.n	8006cf0 <_dtoa_r+0x700>
 8006ce2:	9a00      	ldr	r2, [sp, #0]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d1f7      	bne.n	8006cd8 <_dtoa_r+0x6e8>
 8006ce8:	9900      	ldr	r1, [sp, #0]
 8006cea:	2230      	movs	r2, #48	; 0x30
 8006cec:	3701      	adds	r7, #1
 8006cee:	700a      	strb	r2, [r1, #0]
 8006cf0:	781a      	ldrb	r2, [r3, #0]
 8006cf2:	3201      	adds	r2, #1
 8006cf4:	701a      	strb	r2, [r3, #0]
 8006cf6:	e790      	b.n	8006c1a <_dtoa_r+0x62a>
 8006cf8:	4ba3      	ldr	r3, [pc, #652]	; (8006f88 <_dtoa_r+0x998>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f7f9 fc8c 	bl	8000618 <__aeabi_dmul>
 8006d00:	2200      	movs	r2, #0
 8006d02:	2300      	movs	r3, #0
 8006d04:	4606      	mov	r6, r0
 8006d06:	460f      	mov	r7, r1
 8006d08:	f7f9 feee 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d09e      	beq.n	8006c4e <_dtoa_r+0x65e>
 8006d10:	e7d0      	b.n	8006cb4 <_dtoa_r+0x6c4>
 8006d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d14:	2a00      	cmp	r2, #0
 8006d16:	f000 80ca 	beq.w	8006eae <_dtoa_r+0x8be>
 8006d1a:	9a07      	ldr	r2, [sp, #28]
 8006d1c:	2a01      	cmp	r2, #1
 8006d1e:	f300 80ad 	bgt.w	8006e7c <_dtoa_r+0x88c>
 8006d22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d24:	2a00      	cmp	r2, #0
 8006d26:	f000 80a5 	beq.w	8006e74 <_dtoa_r+0x884>
 8006d2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d2e:	9e08      	ldr	r6, [sp, #32]
 8006d30:	9d05      	ldr	r5, [sp, #20]
 8006d32:	9a05      	ldr	r2, [sp, #20]
 8006d34:	441a      	add	r2, r3
 8006d36:	9205      	str	r2, [sp, #20]
 8006d38:	9a06      	ldr	r2, [sp, #24]
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	441a      	add	r2, r3
 8006d3e:	4620      	mov	r0, r4
 8006d40:	9206      	str	r2, [sp, #24]
 8006d42:	f000 fc87 	bl	8007654 <__i2b>
 8006d46:	4607      	mov	r7, r0
 8006d48:	b165      	cbz	r5, 8006d64 <_dtoa_r+0x774>
 8006d4a:	9b06      	ldr	r3, [sp, #24]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	dd09      	ble.n	8006d64 <_dtoa_r+0x774>
 8006d50:	42ab      	cmp	r3, r5
 8006d52:	9a05      	ldr	r2, [sp, #20]
 8006d54:	bfa8      	it	ge
 8006d56:	462b      	movge	r3, r5
 8006d58:	1ad2      	subs	r2, r2, r3
 8006d5a:	9205      	str	r2, [sp, #20]
 8006d5c:	9a06      	ldr	r2, [sp, #24]
 8006d5e:	1aed      	subs	r5, r5, r3
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	9306      	str	r3, [sp, #24]
 8006d64:	9b08      	ldr	r3, [sp, #32]
 8006d66:	b1f3      	cbz	r3, 8006da6 <_dtoa_r+0x7b6>
 8006d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 80a3 	beq.w	8006eb6 <_dtoa_r+0x8c6>
 8006d70:	2e00      	cmp	r6, #0
 8006d72:	dd10      	ble.n	8006d96 <_dtoa_r+0x7a6>
 8006d74:	4639      	mov	r1, r7
 8006d76:	4632      	mov	r2, r6
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f000 fd2b 	bl	80077d4 <__pow5mult>
 8006d7e:	4652      	mov	r2, sl
 8006d80:	4601      	mov	r1, r0
 8006d82:	4607      	mov	r7, r0
 8006d84:	4620      	mov	r0, r4
 8006d86:	f000 fc7b 	bl	8007680 <__multiply>
 8006d8a:	4651      	mov	r1, sl
 8006d8c:	4680      	mov	r8, r0
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f000 fb60 	bl	8007454 <_Bfree>
 8006d94:	46c2      	mov	sl, r8
 8006d96:	9b08      	ldr	r3, [sp, #32]
 8006d98:	1b9a      	subs	r2, r3, r6
 8006d9a:	d004      	beq.n	8006da6 <_dtoa_r+0x7b6>
 8006d9c:	4651      	mov	r1, sl
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f000 fd18 	bl	80077d4 <__pow5mult>
 8006da4:	4682      	mov	sl, r0
 8006da6:	2101      	movs	r1, #1
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fc53 	bl	8007654 <__i2b>
 8006dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	4606      	mov	r6, r0
 8006db4:	f340 8081 	ble.w	8006eba <_dtoa_r+0x8ca>
 8006db8:	461a      	mov	r2, r3
 8006dba:	4601      	mov	r1, r0
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f000 fd09 	bl	80077d4 <__pow5mult>
 8006dc2:	9b07      	ldr	r3, [sp, #28]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	dd7a      	ble.n	8006ec0 <_dtoa_r+0x8d0>
 8006dca:	f04f 0800 	mov.w	r8, #0
 8006dce:	6933      	ldr	r3, [r6, #16]
 8006dd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006dd4:	6918      	ldr	r0, [r3, #16]
 8006dd6:	f000 fbef 	bl	80075b8 <__hi0bits>
 8006dda:	f1c0 0020 	rsb	r0, r0, #32
 8006dde:	9b06      	ldr	r3, [sp, #24]
 8006de0:	4418      	add	r0, r3
 8006de2:	f010 001f 	ands.w	r0, r0, #31
 8006de6:	f000 8094 	beq.w	8006f12 <_dtoa_r+0x922>
 8006dea:	f1c0 0320 	rsb	r3, r0, #32
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	f340 8085 	ble.w	8006efe <_dtoa_r+0x90e>
 8006df4:	9b05      	ldr	r3, [sp, #20]
 8006df6:	f1c0 001c 	rsb	r0, r0, #28
 8006dfa:	4403      	add	r3, r0
 8006dfc:	9305      	str	r3, [sp, #20]
 8006dfe:	9b06      	ldr	r3, [sp, #24]
 8006e00:	4403      	add	r3, r0
 8006e02:	4405      	add	r5, r0
 8006e04:	9306      	str	r3, [sp, #24]
 8006e06:	9b05      	ldr	r3, [sp, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	dd05      	ble.n	8006e18 <_dtoa_r+0x828>
 8006e0c:	4651      	mov	r1, sl
 8006e0e:	461a      	mov	r2, r3
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 fd39 	bl	8007888 <__lshift>
 8006e16:	4682      	mov	sl, r0
 8006e18:	9b06      	ldr	r3, [sp, #24]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	dd05      	ble.n	8006e2a <_dtoa_r+0x83a>
 8006e1e:	4631      	mov	r1, r6
 8006e20:	461a      	mov	r2, r3
 8006e22:	4620      	mov	r0, r4
 8006e24:	f000 fd30 	bl	8007888 <__lshift>
 8006e28:	4606      	mov	r6, r0
 8006e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d072      	beq.n	8006f16 <_dtoa_r+0x926>
 8006e30:	4631      	mov	r1, r6
 8006e32:	4650      	mov	r0, sl
 8006e34:	f000 fd94 	bl	8007960 <__mcmp>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	da6c      	bge.n	8006f16 <_dtoa_r+0x926>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	4651      	mov	r1, sl
 8006e40:	220a      	movs	r2, #10
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 fb28 	bl	8007498 <__multadd>
 8006e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006e4e:	4682      	mov	sl, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 81b0 	beq.w	80071b6 <_dtoa_r+0xbc6>
 8006e56:	2300      	movs	r3, #0
 8006e58:	4639      	mov	r1, r7
 8006e5a:	220a      	movs	r2, #10
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f000 fb1b 	bl	8007498 <__multadd>
 8006e62:	9b01      	ldr	r3, [sp, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	4607      	mov	r7, r0
 8006e68:	f300 8096 	bgt.w	8006f98 <_dtoa_r+0x9a8>
 8006e6c:	9b07      	ldr	r3, [sp, #28]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	dc59      	bgt.n	8006f26 <_dtoa_r+0x936>
 8006e72:	e091      	b.n	8006f98 <_dtoa_r+0x9a8>
 8006e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e7a:	e758      	b.n	8006d2e <_dtoa_r+0x73e>
 8006e7c:	9b04      	ldr	r3, [sp, #16]
 8006e7e:	1e5e      	subs	r6, r3, #1
 8006e80:	9b08      	ldr	r3, [sp, #32]
 8006e82:	42b3      	cmp	r3, r6
 8006e84:	bfbf      	itttt	lt
 8006e86:	9b08      	ldrlt	r3, [sp, #32]
 8006e88:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006e8a:	9608      	strlt	r6, [sp, #32]
 8006e8c:	1af3      	sublt	r3, r6, r3
 8006e8e:	bfb4      	ite	lt
 8006e90:	18d2      	addlt	r2, r2, r3
 8006e92:	1b9e      	subge	r6, r3, r6
 8006e94:	9b04      	ldr	r3, [sp, #16]
 8006e96:	bfbc      	itt	lt
 8006e98:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006e9a:	2600      	movlt	r6, #0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	bfb7      	itett	lt
 8006ea0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006ea4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006ea8:	1a9d      	sublt	r5, r3, r2
 8006eaa:	2300      	movlt	r3, #0
 8006eac:	e741      	b.n	8006d32 <_dtoa_r+0x742>
 8006eae:	9e08      	ldr	r6, [sp, #32]
 8006eb0:	9d05      	ldr	r5, [sp, #20]
 8006eb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006eb4:	e748      	b.n	8006d48 <_dtoa_r+0x758>
 8006eb6:	9a08      	ldr	r2, [sp, #32]
 8006eb8:	e770      	b.n	8006d9c <_dtoa_r+0x7ac>
 8006eba:	9b07      	ldr	r3, [sp, #28]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	dc19      	bgt.n	8006ef4 <_dtoa_r+0x904>
 8006ec0:	9b02      	ldr	r3, [sp, #8]
 8006ec2:	b9bb      	cbnz	r3, 8006ef4 <_dtoa_r+0x904>
 8006ec4:	9b03      	ldr	r3, [sp, #12]
 8006ec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006eca:	b99b      	cbnz	r3, 8006ef4 <_dtoa_r+0x904>
 8006ecc:	9b03      	ldr	r3, [sp, #12]
 8006ece:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ed2:	0d1b      	lsrs	r3, r3, #20
 8006ed4:	051b      	lsls	r3, r3, #20
 8006ed6:	b183      	cbz	r3, 8006efa <_dtoa_r+0x90a>
 8006ed8:	9b05      	ldr	r3, [sp, #20]
 8006eda:	3301      	adds	r3, #1
 8006edc:	9305      	str	r3, [sp, #20]
 8006ede:	9b06      	ldr	r3, [sp, #24]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	9306      	str	r3, [sp, #24]
 8006ee4:	f04f 0801 	mov.w	r8, #1
 8006ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f47f af6f 	bne.w	8006dce <_dtoa_r+0x7de>
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	e774      	b.n	8006dde <_dtoa_r+0x7ee>
 8006ef4:	f04f 0800 	mov.w	r8, #0
 8006ef8:	e7f6      	b.n	8006ee8 <_dtoa_r+0x8f8>
 8006efa:	4698      	mov	r8, r3
 8006efc:	e7f4      	b.n	8006ee8 <_dtoa_r+0x8f8>
 8006efe:	d082      	beq.n	8006e06 <_dtoa_r+0x816>
 8006f00:	9a05      	ldr	r2, [sp, #20]
 8006f02:	331c      	adds	r3, #28
 8006f04:	441a      	add	r2, r3
 8006f06:	9205      	str	r2, [sp, #20]
 8006f08:	9a06      	ldr	r2, [sp, #24]
 8006f0a:	441a      	add	r2, r3
 8006f0c:	441d      	add	r5, r3
 8006f0e:	9206      	str	r2, [sp, #24]
 8006f10:	e779      	b.n	8006e06 <_dtoa_r+0x816>
 8006f12:	4603      	mov	r3, r0
 8006f14:	e7f4      	b.n	8006f00 <_dtoa_r+0x910>
 8006f16:	9b04      	ldr	r3, [sp, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	dc37      	bgt.n	8006f8c <_dtoa_r+0x99c>
 8006f1c:	9b07      	ldr	r3, [sp, #28]
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	dd34      	ble.n	8006f8c <_dtoa_r+0x99c>
 8006f22:	9b04      	ldr	r3, [sp, #16]
 8006f24:	9301      	str	r3, [sp, #4]
 8006f26:	9b01      	ldr	r3, [sp, #4]
 8006f28:	b963      	cbnz	r3, 8006f44 <_dtoa_r+0x954>
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	2205      	movs	r2, #5
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f000 fab2 	bl	8007498 <__multadd>
 8006f34:	4601      	mov	r1, r0
 8006f36:	4606      	mov	r6, r0
 8006f38:	4650      	mov	r0, sl
 8006f3a:	f000 fd11 	bl	8007960 <__mcmp>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	f73f adbb 	bgt.w	8006aba <_dtoa_r+0x4ca>
 8006f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f46:	9d00      	ldr	r5, [sp, #0]
 8006f48:	ea6f 0b03 	mvn.w	fp, r3
 8006f4c:	f04f 0800 	mov.w	r8, #0
 8006f50:	4631      	mov	r1, r6
 8006f52:	4620      	mov	r0, r4
 8006f54:	f000 fa7e 	bl	8007454 <_Bfree>
 8006f58:	2f00      	cmp	r7, #0
 8006f5a:	f43f aeab 	beq.w	8006cb4 <_dtoa_r+0x6c4>
 8006f5e:	f1b8 0f00 	cmp.w	r8, #0
 8006f62:	d005      	beq.n	8006f70 <_dtoa_r+0x980>
 8006f64:	45b8      	cmp	r8, r7
 8006f66:	d003      	beq.n	8006f70 <_dtoa_r+0x980>
 8006f68:	4641      	mov	r1, r8
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f000 fa72 	bl	8007454 <_Bfree>
 8006f70:	4639      	mov	r1, r7
 8006f72:	4620      	mov	r0, r4
 8006f74:	f000 fa6e 	bl	8007454 <_Bfree>
 8006f78:	e69c      	b.n	8006cb4 <_dtoa_r+0x6c4>
 8006f7a:	2600      	movs	r6, #0
 8006f7c:	4637      	mov	r7, r6
 8006f7e:	e7e1      	b.n	8006f44 <_dtoa_r+0x954>
 8006f80:	46bb      	mov	fp, r7
 8006f82:	4637      	mov	r7, r6
 8006f84:	e599      	b.n	8006aba <_dtoa_r+0x4ca>
 8006f86:	bf00      	nop
 8006f88:	40240000 	.word	0x40240000
 8006f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 80c8 	beq.w	8007124 <_dtoa_r+0xb34>
 8006f94:	9b04      	ldr	r3, [sp, #16]
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	2d00      	cmp	r5, #0
 8006f9a:	dd05      	ble.n	8006fa8 <_dtoa_r+0x9b8>
 8006f9c:	4639      	mov	r1, r7
 8006f9e:	462a      	mov	r2, r5
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f000 fc71 	bl	8007888 <__lshift>
 8006fa6:	4607      	mov	r7, r0
 8006fa8:	f1b8 0f00 	cmp.w	r8, #0
 8006fac:	d05b      	beq.n	8007066 <_dtoa_r+0xa76>
 8006fae:	6879      	ldr	r1, [r7, #4]
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f000 fa0f 	bl	80073d4 <_Balloc>
 8006fb6:	4605      	mov	r5, r0
 8006fb8:	b928      	cbnz	r0, 8006fc6 <_dtoa_r+0x9d6>
 8006fba:	4b83      	ldr	r3, [pc, #524]	; (80071c8 <_dtoa_r+0xbd8>)
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006fc2:	f7ff bb2e 	b.w	8006622 <_dtoa_r+0x32>
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	3202      	adds	r2, #2
 8006fca:	0092      	lsls	r2, r2, #2
 8006fcc:	f107 010c 	add.w	r1, r7, #12
 8006fd0:	300c      	adds	r0, #12
 8006fd2:	f001 ff85 	bl	8008ee0 <memcpy>
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	4629      	mov	r1, r5
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f000 fc54 	bl	8007888 <__lshift>
 8006fe0:	9b00      	ldr	r3, [sp, #0]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	9304      	str	r3, [sp, #16]
 8006fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fea:	4413      	add	r3, r2
 8006fec:	9308      	str	r3, [sp, #32]
 8006fee:	9b02      	ldr	r3, [sp, #8]
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	46b8      	mov	r8, r7
 8006ff6:	9306      	str	r3, [sp, #24]
 8006ff8:	4607      	mov	r7, r0
 8006ffa:	9b04      	ldr	r3, [sp, #16]
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	3b01      	subs	r3, #1
 8007000:	4650      	mov	r0, sl
 8007002:	9301      	str	r3, [sp, #4]
 8007004:	f7ff fa6c 	bl	80064e0 <quorem>
 8007008:	4641      	mov	r1, r8
 800700a:	9002      	str	r0, [sp, #8]
 800700c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007010:	4650      	mov	r0, sl
 8007012:	f000 fca5 	bl	8007960 <__mcmp>
 8007016:	463a      	mov	r2, r7
 8007018:	9005      	str	r0, [sp, #20]
 800701a:	4631      	mov	r1, r6
 800701c:	4620      	mov	r0, r4
 800701e:	f000 fcbb 	bl	8007998 <__mdiff>
 8007022:	68c2      	ldr	r2, [r0, #12]
 8007024:	4605      	mov	r5, r0
 8007026:	bb02      	cbnz	r2, 800706a <_dtoa_r+0xa7a>
 8007028:	4601      	mov	r1, r0
 800702a:	4650      	mov	r0, sl
 800702c:	f000 fc98 	bl	8007960 <__mcmp>
 8007030:	4602      	mov	r2, r0
 8007032:	4629      	mov	r1, r5
 8007034:	4620      	mov	r0, r4
 8007036:	9209      	str	r2, [sp, #36]	; 0x24
 8007038:	f000 fa0c 	bl	8007454 <_Bfree>
 800703c:	9b07      	ldr	r3, [sp, #28]
 800703e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007040:	9d04      	ldr	r5, [sp, #16]
 8007042:	ea43 0102 	orr.w	r1, r3, r2
 8007046:	9b06      	ldr	r3, [sp, #24]
 8007048:	4319      	orrs	r1, r3
 800704a:	d110      	bne.n	800706e <_dtoa_r+0xa7e>
 800704c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007050:	d029      	beq.n	80070a6 <_dtoa_r+0xab6>
 8007052:	9b05      	ldr	r3, [sp, #20]
 8007054:	2b00      	cmp	r3, #0
 8007056:	dd02      	ble.n	800705e <_dtoa_r+0xa6e>
 8007058:	9b02      	ldr	r3, [sp, #8]
 800705a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800705e:	9b01      	ldr	r3, [sp, #4]
 8007060:	f883 9000 	strb.w	r9, [r3]
 8007064:	e774      	b.n	8006f50 <_dtoa_r+0x960>
 8007066:	4638      	mov	r0, r7
 8007068:	e7ba      	b.n	8006fe0 <_dtoa_r+0x9f0>
 800706a:	2201      	movs	r2, #1
 800706c:	e7e1      	b.n	8007032 <_dtoa_r+0xa42>
 800706e:	9b05      	ldr	r3, [sp, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	db04      	blt.n	800707e <_dtoa_r+0xa8e>
 8007074:	9907      	ldr	r1, [sp, #28]
 8007076:	430b      	orrs	r3, r1
 8007078:	9906      	ldr	r1, [sp, #24]
 800707a:	430b      	orrs	r3, r1
 800707c:	d120      	bne.n	80070c0 <_dtoa_r+0xad0>
 800707e:	2a00      	cmp	r2, #0
 8007080:	dded      	ble.n	800705e <_dtoa_r+0xa6e>
 8007082:	4651      	mov	r1, sl
 8007084:	2201      	movs	r2, #1
 8007086:	4620      	mov	r0, r4
 8007088:	f000 fbfe 	bl	8007888 <__lshift>
 800708c:	4631      	mov	r1, r6
 800708e:	4682      	mov	sl, r0
 8007090:	f000 fc66 	bl	8007960 <__mcmp>
 8007094:	2800      	cmp	r0, #0
 8007096:	dc03      	bgt.n	80070a0 <_dtoa_r+0xab0>
 8007098:	d1e1      	bne.n	800705e <_dtoa_r+0xa6e>
 800709a:	f019 0f01 	tst.w	r9, #1
 800709e:	d0de      	beq.n	800705e <_dtoa_r+0xa6e>
 80070a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070a4:	d1d8      	bne.n	8007058 <_dtoa_r+0xa68>
 80070a6:	9a01      	ldr	r2, [sp, #4]
 80070a8:	2339      	movs	r3, #57	; 0x39
 80070aa:	7013      	strb	r3, [r2, #0]
 80070ac:	462b      	mov	r3, r5
 80070ae:	461d      	mov	r5, r3
 80070b0:	3b01      	subs	r3, #1
 80070b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070b6:	2a39      	cmp	r2, #57	; 0x39
 80070b8:	d06c      	beq.n	8007194 <_dtoa_r+0xba4>
 80070ba:	3201      	adds	r2, #1
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	e747      	b.n	8006f50 <_dtoa_r+0x960>
 80070c0:	2a00      	cmp	r2, #0
 80070c2:	dd07      	ble.n	80070d4 <_dtoa_r+0xae4>
 80070c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070c8:	d0ed      	beq.n	80070a6 <_dtoa_r+0xab6>
 80070ca:	9a01      	ldr	r2, [sp, #4]
 80070cc:	f109 0301 	add.w	r3, r9, #1
 80070d0:	7013      	strb	r3, [r2, #0]
 80070d2:	e73d      	b.n	8006f50 <_dtoa_r+0x960>
 80070d4:	9b04      	ldr	r3, [sp, #16]
 80070d6:	9a08      	ldr	r2, [sp, #32]
 80070d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80070dc:	4293      	cmp	r3, r2
 80070de:	d043      	beq.n	8007168 <_dtoa_r+0xb78>
 80070e0:	4651      	mov	r1, sl
 80070e2:	2300      	movs	r3, #0
 80070e4:	220a      	movs	r2, #10
 80070e6:	4620      	mov	r0, r4
 80070e8:	f000 f9d6 	bl	8007498 <__multadd>
 80070ec:	45b8      	cmp	r8, r7
 80070ee:	4682      	mov	sl, r0
 80070f0:	f04f 0300 	mov.w	r3, #0
 80070f4:	f04f 020a 	mov.w	r2, #10
 80070f8:	4641      	mov	r1, r8
 80070fa:	4620      	mov	r0, r4
 80070fc:	d107      	bne.n	800710e <_dtoa_r+0xb1e>
 80070fe:	f000 f9cb 	bl	8007498 <__multadd>
 8007102:	4680      	mov	r8, r0
 8007104:	4607      	mov	r7, r0
 8007106:	9b04      	ldr	r3, [sp, #16]
 8007108:	3301      	adds	r3, #1
 800710a:	9304      	str	r3, [sp, #16]
 800710c:	e775      	b.n	8006ffa <_dtoa_r+0xa0a>
 800710e:	f000 f9c3 	bl	8007498 <__multadd>
 8007112:	4639      	mov	r1, r7
 8007114:	4680      	mov	r8, r0
 8007116:	2300      	movs	r3, #0
 8007118:	220a      	movs	r2, #10
 800711a:	4620      	mov	r0, r4
 800711c:	f000 f9bc 	bl	8007498 <__multadd>
 8007120:	4607      	mov	r7, r0
 8007122:	e7f0      	b.n	8007106 <_dtoa_r+0xb16>
 8007124:	9b04      	ldr	r3, [sp, #16]
 8007126:	9301      	str	r3, [sp, #4]
 8007128:	9d00      	ldr	r5, [sp, #0]
 800712a:	4631      	mov	r1, r6
 800712c:	4650      	mov	r0, sl
 800712e:	f7ff f9d7 	bl	80064e0 <quorem>
 8007132:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007136:	9b00      	ldr	r3, [sp, #0]
 8007138:	f805 9b01 	strb.w	r9, [r5], #1
 800713c:	1aea      	subs	r2, r5, r3
 800713e:	9b01      	ldr	r3, [sp, #4]
 8007140:	4293      	cmp	r3, r2
 8007142:	dd07      	ble.n	8007154 <_dtoa_r+0xb64>
 8007144:	4651      	mov	r1, sl
 8007146:	2300      	movs	r3, #0
 8007148:	220a      	movs	r2, #10
 800714a:	4620      	mov	r0, r4
 800714c:	f000 f9a4 	bl	8007498 <__multadd>
 8007150:	4682      	mov	sl, r0
 8007152:	e7ea      	b.n	800712a <_dtoa_r+0xb3a>
 8007154:	9b01      	ldr	r3, [sp, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	bfc8      	it	gt
 800715a:	461d      	movgt	r5, r3
 800715c:	9b00      	ldr	r3, [sp, #0]
 800715e:	bfd8      	it	le
 8007160:	2501      	movle	r5, #1
 8007162:	441d      	add	r5, r3
 8007164:	f04f 0800 	mov.w	r8, #0
 8007168:	4651      	mov	r1, sl
 800716a:	2201      	movs	r2, #1
 800716c:	4620      	mov	r0, r4
 800716e:	f000 fb8b 	bl	8007888 <__lshift>
 8007172:	4631      	mov	r1, r6
 8007174:	4682      	mov	sl, r0
 8007176:	f000 fbf3 	bl	8007960 <__mcmp>
 800717a:	2800      	cmp	r0, #0
 800717c:	dc96      	bgt.n	80070ac <_dtoa_r+0xabc>
 800717e:	d102      	bne.n	8007186 <_dtoa_r+0xb96>
 8007180:	f019 0f01 	tst.w	r9, #1
 8007184:	d192      	bne.n	80070ac <_dtoa_r+0xabc>
 8007186:	462b      	mov	r3, r5
 8007188:	461d      	mov	r5, r3
 800718a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800718e:	2a30      	cmp	r2, #48	; 0x30
 8007190:	d0fa      	beq.n	8007188 <_dtoa_r+0xb98>
 8007192:	e6dd      	b.n	8006f50 <_dtoa_r+0x960>
 8007194:	9a00      	ldr	r2, [sp, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d189      	bne.n	80070ae <_dtoa_r+0xabe>
 800719a:	f10b 0b01 	add.w	fp, fp, #1
 800719e:	2331      	movs	r3, #49	; 0x31
 80071a0:	e796      	b.n	80070d0 <_dtoa_r+0xae0>
 80071a2:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <_dtoa_r+0xbdc>)
 80071a4:	f7ff ba99 	b.w	80066da <_dtoa_r+0xea>
 80071a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f47f aa6d 	bne.w	800668a <_dtoa_r+0x9a>
 80071b0:	4b07      	ldr	r3, [pc, #28]	; (80071d0 <_dtoa_r+0xbe0>)
 80071b2:	f7ff ba92 	b.w	80066da <_dtoa_r+0xea>
 80071b6:	9b01      	ldr	r3, [sp, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	dcb5      	bgt.n	8007128 <_dtoa_r+0xb38>
 80071bc:	9b07      	ldr	r3, [sp, #28]
 80071be:	2b02      	cmp	r3, #2
 80071c0:	f73f aeb1 	bgt.w	8006f26 <_dtoa_r+0x936>
 80071c4:	e7b0      	b.n	8007128 <_dtoa_r+0xb38>
 80071c6:	bf00      	nop
 80071c8:	08009e9d 	.word	0x08009e9d
 80071cc:	08009df8 	.word	0x08009df8
 80071d0:	08009e21 	.word	0x08009e21

080071d4 <_free_r>:
 80071d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071d6:	2900      	cmp	r1, #0
 80071d8:	d044      	beq.n	8007264 <_free_r+0x90>
 80071da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071de:	9001      	str	r0, [sp, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f1a1 0404 	sub.w	r4, r1, #4
 80071e6:	bfb8      	it	lt
 80071e8:	18e4      	addlt	r4, r4, r3
 80071ea:	f000 f8e7 	bl	80073bc <__malloc_lock>
 80071ee:	4a1e      	ldr	r2, [pc, #120]	; (8007268 <_free_r+0x94>)
 80071f0:	9801      	ldr	r0, [sp, #4]
 80071f2:	6813      	ldr	r3, [r2, #0]
 80071f4:	b933      	cbnz	r3, 8007204 <_free_r+0x30>
 80071f6:	6063      	str	r3, [r4, #4]
 80071f8:	6014      	str	r4, [r2, #0]
 80071fa:	b003      	add	sp, #12
 80071fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007200:	f000 b8e2 	b.w	80073c8 <__malloc_unlock>
 8007204:	42a3      	cmp	r3, r4
 8007206:	d908      	bls.n	800721a <_free_r+0x46>
 8007208:	6825      	ldr	r5, [r4, #0]
 800720a:	1961      	adds	r1, r4, r5
 800720c:	428b      	cmp	r3, r1
 800720e:	bf01      	itttt	eq
 8007210:	6819      	ldreq	r1, [r3, #0]
 8007212:	685b      	ldreq	r3, [r3, #4]
 8007214:	1949      	addeq	r1, r1, r5
 8007216:	6021      	streq	r1, [r4, #0]
 8007218:	e7ed      	b.n	80071f6 <_free_r+0x22>
 800721a:	461a      	mov	r2, r3
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	b10b      	cbz	r3, 8007224 <_free_r+0x50>
 8007220:	42a3      	cmp	r3, r4
 8007222:	d9fa      	bls.n	800721a <_free_r+0x46>
 8007224:	6811      	ldr	r1, [r2, #0]
 8007226:	1855      	adds	r5, r2, r1
 8007228:	42a5      	cmp	r5, r4
 800722a:	d10b      	bne.n	8007244 <_free_r+0x70>
 800722c:	6824      	ldr	r4, [r4, #0]
 800722e:	4421      	add	r1, r4
 8007230:	1854      	adds	r4, r2, r1
 8007232:	42a3      	cmp	r3, r4
 8007234:	6011      	str	r1, [r2, #0]
 8007236:	d1e0      	bne.n	80071fa <_free_r+0x26>
 8007238:	681c      	ldr	r4, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	6053      	str	r3, [r2, #4]
 800723e:	440c      	add	r4, r1
 8007240:	6014      	str	r4, [r2, #0]
 8007242:	e7da      	b.n	80071fa <_free_r+0x26>
 8007244:	d902      	bls.n	800724c <_free_r+0x78>
 8007246:	230c      	movs	r3, #12
 8007248:	6003      	str	r3, [r0, #0]
 800724a:	e7d6      	b.n	80071fa <_free_r+0x26>
 800724c:	6825      	ldr	r5, [r4, #0]
 800724e:	1961      	adds	r1, r4, r5
 8007250:	428b      	cmp	r3, r1
 8007252:	bf04      	itt	eq
 8007254:	6819      	ldreq	r1, [r3, #0]
 8007256:	685b      	ldreq	r3, [r3, #4]
 8007258:	6063      	str	r3, [r4, #4]
 800725a:	bf04      	itt	eq
 800725c:	1949      	addeq	r1, r1, r5
 800725e:	6021      	streq	r1, [r4, #0]
 8007260:	6054      	str	r4, [r2, #4]
 8007262:	e7ca      	b.n	80071fa <_free_r+0x26>
 8007264:	b003      	add	sp, #12
 8007266:	bd30      	pop	{r4, r5, pc}
 8007268:	20000c1c 	.word	0x20000c1c

0800726c <malloc>:
 800726c:	4b02      	ldr	r3, [pc, #8]	; (8007278 <malloc+0xc>)
 800726e:	4601      	mov	r1, r0
 8007270:	6818      	ldr	r0, [r3, #0]
 8007272:	f000 b823 	b.w	80072bc <_malloc_r>
 8007276:	bf00      	nop
 8007278:	2000009c 	.word	0x2000009c

0800727c <sbrk_aligned>:
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	4e0e      	ldr	r6, [pc, #56]	; (80072b8 <sbrk_aligned+0x3c>)
 8007280:	460c      	mov	r4, r1
 8007282:	6831      	ldr	r1, [r6, #0]
 8007284:	4605      	mov	r5, r0
 8007286:	b911      	cbnz	r1, 800728e <sbrk_aligned+0x12>
 8007288:	f001 fe1a 	bl	8008ec0 <_sbrk_r>
 800728c:	6030      	str	r0, [r6, #0]
 800728e:	4621      	mov	r1, r4
 8007290:	4628      	mov	r0, r5
 8007292:	f001 fe15 	bl	8008ec0 <_sbrk_r>
 8007296:	1c43      	adds	r3, r0, #1
 8007298:	d00a      	beq.n	80072b0 <sbrk_aligned+0x34>
 800729a:	1cc4      	adds	r4, r0, #3
 800729c:	f024 0403 	bic.w	r4, r4, #3
 80072a0:	42a0      	cmp	r0, r4
 80072a2:	d007      	beq.n	80072b4 <sbrk_aligned+0x38>
 80072a4:	1a21      	subs	r1, r4, r0
 80072a6:	4628      	mov	r0, r5
 80072a8:	f001 fe0a 	bl	8008ec0 <_sbrk_r>
 80072ac:	3001      	adds	r0, #1
 80072ae:	d101      	bne.n	80072b4 <sbrk_aligned+0x38>
 80072b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80072b4:	4620      	mov	r0, r4
 80072b6:	bd70      	pop	{r4, r5, r6, pc}
 80072b8:	20000c20 	.word	0x20000c20

080072bc <_malloc_r>:
 80072bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072c0:	1ccd      	adds	r5, r1, #3
 80072c2:	f025 0503 	bic.w	r5, r5, #3
 80072c6:	3508      	adds	r5, #8
 80072c8:	2d0c      	cmp	r5, #12
 80072ca:	bf38      	it	cc
 80072cc:	250c      	movcc	r5, #12
 80072ce:	2d00      	cmp	r5, #0
 80072d0:	4607      	mov	r7, r0
 80072d2:	db01      	blt.n	80072d8 <_malloc_r+0x1c>
 80072d4:	42a9      	cmp	r1, r5
 80072d6:	d905      	bls.n	80072e4 <_malloc_r+0x28>
 80072d8:	230c      	movs	r3, #12
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	2600      	movs	r6, #0
 80072de:	4630      	mov	r0, r6
 80072e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073b8 <_malloc_r+0xfc>
 80072e8:	f000 f868 	bl	80073bc <__malloc_lock>
 80072ec:	f8d8 3000 	ldr.w	r3, [r8]
 80072f0:	461c      	mov	r4, r3
 80072f2:	bb5c      	cbnz	r4, 800734c <_malloc_r+0x90>
 80072f4:	4629      	mov	r1, r5
 80072f6:	4638      	mov	r0, r7
 80072f8:	f7ff ffc0 	bl	800727c <sbrk_aligned>
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	4604      	mov	r4, r0
 8007300:	d155      	bne.n	80073ae <_malloc_r+0xf2>
 8007302:	f8d8 4000 	ldr.w	r4, [r8]
 8007306:	4626      	mov	r6, r4
 8007308:	2e00      	cmp	r6, #0
 800730a:	d145      	bne.n	8007398 <_malloc_r+0xdc>
 800730c:	2c00      	cmp	r4, #0
 800730e:	d048      	beq.n	80073a2 <_malloc_r+0xe6>
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	4631      	mov	r1, r6
 8007314:	4638      	mov	r0, r7
 8007316:	eb04 0903 	add.w	r9, r4, r3
 800731a:	f001 fdd1 	bl	8008ec0 <_sbrk_r>
 800731e:	4581      	cmp	r9, r0
 8007320:	d13f      	bne.n	80073a2 <_malloc_r+0xe6>
 8007322:	6821      	ldr	r1, [r4, #0]
 8007324:	1a6d      	subs	r5, r5, r1
 8007326:	4629      	mov	r1, r5
 8007328:	4638      	mov	r0, r7
 800732a:	f7ff ffa7 	bl	800727c <sbrk_aligned>
 800732e:	3001      	adds	r0, #1
 8007330:	d037      	beq.n	80073a2 <_malloc_r+0xe6>
 8007332:	6823      	ldr	r3, [r4, #0]
 8007334:	442b      	add	r3, r5
 8007336:	6023      	str	r3, [r4, #0]
 8007338:	f8d8 3000 	ldr.w	r3, [r8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d038      	beq.n	80073b2 <_malloc_r+0xf6>
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	42a2      	cmp	r2, r4
 8007344:	d12b      	bne.n	800739e <_malloc_r+0xe2>
 8007346:	2200      	movs	r2, #0
 8007348:	605a      	str	r2, [r3, #4]
 800734a:	e00f      	b.n	800736c <_malloc_r+0xb0>
 800734c:	6822      	ldr	r2, [r4, #0]
 800734e:	1b52      	subs	r2, r2, r5
 8007350:	d41f      	bmi.n	8007392 <_malloc_r+0xd6>
 8007352:	2a0b      	cmp	r2, #11
 8007354:	d917      	bls.n	8007386 <_malloc_r+0xca>
 8007356:	1961      	adds	r1, r4, r5
 8007358:	42a3      	cmp	r3, r4
 800735a:	6025      	str	r5, [r4, #0]
 800735c:	bf18      	it	ne
 800735e:	6059      	strne	r1, [r3, #4]
 8007360:	6863      	ldr	r3, [r4, #4]
 8007362:	bf08      	it	eq
 8007364:	f8c8 1000 	streq.w	r1, [r8]
 8007368:	5162      	str	r2, [r4, r5]
 800736a:	604b      	str	r3, [r1, #4]
 800736c:	4638      	mov	r0, r7
 800736e:	f104 060b 	add.w	r6, r4, #11
 8007372:	f000 f829 	bl	80073c8 <__malloc_unlock>
 8007376:	f026 0607 	bic.w	r6, r6, #7
 800737a:	1d23      	adds	r3, r4, #4
 800737c:	1af2      	subs	r2, r6, r3
 800737e:	d0ae      	beq.n	80072de <_malloc_r+0x22>
 8007380:	1b9b      	subs	r3, r3, r6
 8007382:	50a3      	str	r3, [r4, r2]
 8007384:	e7ab      	b.n	80072de <_malloc_r+0x22>
 8007386:	42a3      	cmp	r3, r4
 8007388:	6862      	ldr	r2, [r4, #4]
 800738a:	d1dd      	bne.n	8007348 <_malloc_r+0x8c>
 800738c:	f8c8 2000 	str.w	r2, [r8]
 8007390:	e7ec      	b.n	800736c <_malloc_r+0xb0>
 8007392:	4623      	mov	r3, r4
 8007394:	6864      	ldr	r4, [r4, #4]
 8007396:	e7ac      	b.n	80072f2 <_malloc_r+0x36>
 8007398:	4634      	mov	r4, r6
 800739a:	6876      	ldr	r6, [r6, #4]
 800739c:	e7b4      	b.n	8007308 <_malloc_r+0x4c>
 800739e:	4613      	mov	r3, r2
 80073a0:	e7cc      	b.n	800733c <_malloc_r+0x80>
 80073a2:	230c      	movs	r3, #12
 80073a4:	603b      	str	r3, [r7, #0]
 80073a6:	4638      	mov	r0, r7
 80073a8:	f000 f80e 	bl	80073c8 <__malloc_unlock>
 80073ac:	e797      	b.n	80072de <_malloc_r+0x22>
 80073ae:	6025      	str	r5, [r4, #0]
 80073b0:	e7dc      	b.n	800736c <_malloc_r+0xb0>
 80073b2:	605b      	str	r3, [r3, #4]
 80073b4:	deff      	udf	#255	; 0xff
 80073b6:	bf00      	nop
 80073b8:	20000c1c 	.word	0x20000c1c

080073bc <__malloc_lock>:
 80073bc:	4801      	ldr	r0, [pc, #4]	; (80073c4 <__malloc_lock+0x8>)
 80073be:	f7ff b886 	b.w	80064ce <__retarget_lock_acquire_recursive>
 80073c2:	bf00      	nop
 80073c4:	20000c18 	.word	0x20000c18

080073c8 <__malloc_unlock>:
 80073c8:	4801      	ldr	r0, [pc, #4]	; (80073d0 <__malloc_unlock+0x8>)
 80073ca:	f7ff b881 	b.w	80064d0 <__retarget_lock_release_recursive>
 80073ce:	bf00      	nop
 80073d0:	20000c18 	.word	0x20000c18

080073d4 <_Balloc>:
 80073d4:	b570      	push	{r4, r5, r6, lr}
 80073d6:	69c6      	ldr	r6, [r0, #28]
 80073d8:	4604      	mov	r4, r0
 80073da:	460d      	mov	r5, r1
 80073dc:	b976      	cbnz	r6, 80073fc <_Balloc+0x28>
 80073de:	2010      	movs	r0, #16
 80073e0:	f7ff ff44 	bl	800726c <malloc>
 80073e4:	4602      	mov	r2, r0
 80073e6:	61e0      	str	r0, [r4, #28]
 80073e8:	b920      	cbnz	r0, 80073f4 <_Balloc+0x20>
 80073ea:	4b18      	ldr	r3, [pc, #96]	; (800744c <_Balloc+0x78>)
 80073ec:	4818      	ldr	r0, [pc, #96]	; (8007450 <_Balloc+0x7c>)
 80073ee:	216b      	movs	r1, #107	; 0x6b
 80073f0:	f001 fd8e 	bl	8008f10 <__assert_func>
 80073f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073f8:	6006      	str	r6, [r0, #0]
 80073fa:	60c6      	str	r6, [r0, #12]
 80073fc:	69e6      	ldr	r6, [r4, #28]
 80073fe:	68f3      	ldr	r3, [r6, #12]
 8007400:	b183      	cbz	r3, 8007424 <_Balloc+0x50>
 8007402:	69e3      	ldr	r3, [r4, #28]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800740a:	b9b8      	cbnz	r0, 800743c <_Balloc+0x68>
 800740c:	2101      	movs	r1, #1
 800740e:	fa01 f605 	lsl.w	r6, r1, r5
 8007412:	1d72      	adds	r2, r6, #5
 8007414:	0092      	lsls	r2, r2, #2
 8007416:	4620      	mov	r0, r4
 8007418:	f001 fd98 	bl	8008f4c <_calloc_r>
 800741c:	b160      	cbz	r0, 8007438 <_Balloc+0x64>
 800741e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007422:	e00e      	b.n	8007442 <_Balloc+0x6e>
 8007424:	2221      	movs	r2, #33	; 0x21
 8007426:	2104      	movs	r1, #4
 8007428:	4620      	mov	r0, r4
 800742a:	f001 fd8f 	bl	8008f4c <_calloc_r>
 800742e:	69e3      	ldr	r3, [r4, #28]
 8007430:	60f0      	str	r0, [r6, #12]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e4      	bne.n	8007402 <_Balloc+0x2e>
 8007438:	2000      	movs	r0, #0
 800743a:	bd70      	pop	{r4, r5, r6, pc}
 800743c:	6802      	ldr	r2, [r0, #0]
 800743e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007442:	2300      	movs	r3, #0
 8007444:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007448:	e7f7      	b.n	800743a <_Balloc+0x66>
 800744a:	bf00      	nop
 800744c:	08009e2e 	.word	0x08009e2e
 8007450:	08009eae 	.word	0x08009eae

08007454 <_Bfree>:
 8007454:	b570      	push	{r4, r5, r6, lr}
 8007456:	69c6      	ldr	r6, [r0, #28]
 8007458:	4605      	mov	r5, r0
 800745a:	460c      	mov	r4, r1
 800745c:	b976      	cbnz	r6, 800747c <_Bfree+0x28>
 800745e:	2010      	movs	r0, #16
 8007460:	f7ff ff04 	bl	800726c <malloc>
 8007464:	4602      	mov	r2, r0
 8007466:	61e8      	str	r0, [r5, #28]
 8007468:	b920      	cbnz	r0, 8007474 <_Bfree+0x20>
 800746a:	4b09      	ldr	r3, [pc, #36]	; (8007490 <_Bfree+0x3c>)
 800746c:	4809      	ldr	r0, [pc, #36]	; (8007494 <_Bfree+0x40>)
 800746e:	218f      	movs	r1, #143	; 0x8f
 8007470:	f001 fd4e 	bl	8008f10 <__assert_func>
 8007474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007478:	6006      	str	r6, [r0, #0]
 800747a:	60c6      	str	r6, [r0, #12]
 800747c:	b13c      	cbz	r4, 800748e <_Bfree+0x3a>
 800747e:	69eb      	ldr	r3, [r5, #28]
 8007480:	6862      	ldr	r2, [r4, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007488:	6021      	str	r1, [r4, #0]
 800748a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800748e:	bd70      	pop	{r4, r5, r6, pc}
 8007490:	08009e2e 	.word	0x08009e2e
 8007494:	08009eae 	.word	0x08009eae

08007498 <__multadd>:
 8007498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800749c:	690d      	ldr	r5, [r1, #16]
 800749e:	4607      	mov	r7, r0
 80074a0:	460c      	mov	r4, r1
 80074a2:	461e      	mov	r6, r3
 80074a4:	f101 0c14 	add.w	ip, r1, #20
 80074a8:	2000      	movs	r0, #0
 80074aa:	f8dc 3000 	ldr.w	r3, [ip]
 80074ae:	b299      	uxth	r1, r3
 80074b0:	fb02 6101 	mla	r1, r2, r1, r6
 80074b4:	0c1e      	lsrs	r6, r3, #16
 80074b6:	0c0b      	lsrs	r3, r1, #16
 80074b8:	fb02 3306 	mla	r3, r2, r6, r3
 80074bc:	b289      	uxth	r1, r1
 80074be:	3001      	adds	r0, #1
 80074c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80074c4:	4285      	cmp	r5, r0
 80074c6:	f84c 1b04 	str.w	r1, [ip], #4
 80074ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80074ce:	dcec      	bgt.n	80074aa <__multadd+0x12>
 80074d0:	b30e      	cbz	r6, 8007516 <__multadd+0x7e>
 80074d2:	68a3      	ldr	r3, [r4, #8]
 80074d4:	42ab      	cmp	r3, r5
 80074d6:	dc19      	bgt.n	800750c <__multadd+0x74>
 80074d8:	6861      	ldr	r1, [r4, #4]
 80074da:	4638      	mov	r0, r7
 80074dc:	3101      	adds	r1, #1
 80074de:	f7ff ff79 	bl	80073d4 <_Balloc>
 80074e2:	4680      	mov	r8, r0
 80074e4:	b928      	cbnz	r0, 80074f2 <__multadd+0x5a>
 80074e6:	4602      	mov	r2, r0
 80074e8:	4b0c      	ldr	r3, [pc, #48]	; (800751c <__multadd+0x84>)
 80074ea:	480d      	ldr	r0, [pc, #52]	; (8007520 <__multadd+0x88>)
 80074ec:	21ba      	movs	r1, #186	; 0xba
 80074ee:	f001 fd0f 	bl	8008f10 <__assert_func>
 80074f2:	6922      	ldr	r2, [r4, #16]
 80074f4:	3202      	adds	r2, #2
 80074f6:	f104 010c 	add.w	r1, r4, #12
 80074fa:	0092      	lsls	r2, r2, #2
 80074fc:	300c      	adds	r0, #12
 80074fe:	f001 fcef 	bl	8008ee0 <memcpy>
 8007502:	4621      	mov	r1, r4
 8007504:	4638      	mov	r0, r7
 8007506:	f7ff ffa5 	bl	8007454 <_Bfree>
 800750a:	4644      	mov	r4, r8
 800750c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007510:	3501      	adds	r5, #1
 8007512:	615e      	str	r6, [r3, #20]
 8007514:	6125      	str	r5, [r4, #16]
 8007516:	4620      	mov	r0, r4
 8007518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800751c:	08009e9d 	.word	0x08009e9d
 8007520:	08009eae 	.word	0x08009eae

08007524 <__s2b>:
 8007524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007528:	460c      	mov	r4, r1
 800752a:	4615      	mov	r5, r2
 800752c:	461f      	mov	r7, r3
 800752e:	2209      	movs	r2, #9
 8007530:	3308      	adds	r3, #8
 8007532:	4606      	mov	r6, r0
 8007534:	fb93 f3f2 	sdiv	r3, r3, r2
 8007538:	2100      	movs	r1, #0
 800753a:	2201      	movs	r2, #1
 800753c:	429a      	cmp	r2, r3
 800753e:	db09      	blt.n	8007554 <__s2b+0x30>
 8007540:	4630      	mov	r0, r6
 8007542:	f7ff ff47 	bl	80073d4 <_Balloc>
 8007546:	b940      	cbnz	r0, 800755a <__s2b+0x36>
 8007548:	4602      	mov	r2, r0
 800754a:	4b19      	ldr	r3, [pc, #100]	; (80075b0 <__s2b+0x8c>)
 800754c:	4819      	ldr	r0, [pc, #100]	; (80075b4 <__s2b+0x90>)
 800754e:	21d3      	movs	r1, #211	; 0xd3
 8007550:	f001 fcde 	bl	8008f10 <__assert_func>
 8007554:	0052      	lsls	r2, r2, #1
 8007556:	3101      	adds	r1, #1
 8007558:	e7f0      	b.n	800753c <__s2b+0x18>
 800755a:	9b08      	ldr	r3, [sp, #32]
 800755c:	6143      	str	r3, [r0, #20]
 800755e:	2d09      	cmp	r5, #9
 8007560:	f04f 0301 	mov.w	r3, #1
 8007564:	6103      	str	r3, [r0, #16]
 8007566:	dd16      	ble.n	8007596 <__s2b+0x72>
 8007568:	f104 0909 	add.w	r9, r4, #9
 800756c:	46c8      	mov	r8, r9
 800756e:	442c      	add	r4, r5
 8007570:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007574:	4601      	mov	r1, r0
 8007576:	3b30      	subs	r3, #48	; 0x30
 8007578:	220a      	movs	r2, #10
 800757a:	4630      	mov	r0, r6
 800757c:	f7ff ff8c 	bl	8007498 <__multadd>
 8007580:	45a0      	cmp	r8, r4
 8007582:	d1f5      	bne.n	8007570 <__s2b+0x4c>
 8007584:	f1a5 0408 	sub.w	r4, r5, #8
 8007588:	444c      	add	r4, r9
 800758a:	1b2d      	subs	r5, r5, r4
 800758c:	1963      	adds	r3, r4, r5
 800758e:	42bb      	cmp	r3, r7
 8007590:	db04      	blt.n	800759c <__s2b+0x78>
 8007592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007596:	340a      	adds	r4, #10
 8007598:	2509      	movs	r5, #9
 800759a:	e7f6      	b.n	800758a <__s2b+0x66>
 800759c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80075a0:	4601      	mov	r1, r0
 80075a2:	3b30      	subs	r3, #48	; 0x30
 80075a4:	220a      	movs	r2, #10
 80075a6:	4630      	mov	r0, r6
 80075a8:	f7ff ff76 	bl	8007498 <__multadd>
 80075ac:	e7ee      	b.n	800758c <__s2b+0x68>
 80075ae:	bf00      	nop
 80075b0:	08009e9d 	.word	0x08009e9d
 80075b4:	08009eae 	.word	0x08009eae

080075b8 <__hi0bits>:
 80075b8:	0c03      	lsrs	r3, r0, #16
 80075ba:	041b      	lsls	r3, r3, #16
 80075bc:	b9d3      	cbnz	r3, 80075f4 <__hi0bits+0x3c>
 80075be:	0400      	lsls	r0, r0, #16
 80075c0:	2310      	movs	r3, #16
 80075c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80075c6:	bf04      	itt	eq
 80075c8:	0200      	lsleq	r0, r0, #8
 80075ca:	3308      	addeq	r3, #8
 80075cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80075d0:	bf04      	itt	eq
 80075d2:	0100      	lsleq	r0, r0, #4
 80075d4:	3304      	addeq	r3, #4
 80075d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80075da:	bf04      	itt	eq
 80075dc:	0080      	lsleq	r0, r0, #2
 80075de:	3302      	addeq	r3, #2
 80075e0:	2800      	cmp	r0, #0
 80075e2:	db05      	blt.n	80075f0 <__hi0bits+0x38>
 80075e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80075e8:	f103 0301 	add.w	r3, r3, #1
 80075ec:	bf08      	it	eq
 80075ee:	2320      	moveq	r3, #32
 80075f0:	4618      	mov	r0, r3
 80075f2:	4770      	bx	lr
 80075f4:	2300      	movs	r3, #0
 80075f6:	e7e4      	b.n	80075c2 <__hi0bits+0xa>

080075f8 <__lo0bits>:
 80075f8:	6803      	ldr	r3, [r0, #0]
 80075fa:	f013 0207 	ands.w	r2, r3, #7
 80075fe:	d00c      	beq.n	800761a <__lo0bits+0x22>
 8007600:	07d9      	lsls	r1, r3, #31
 8007602:	d422      	bmi.n	800764a <__lo0bits+0x52>
 8007604:	079a      	lsls	r2, r3, #30
 8007606:	bf49      	itett	mi
 8007608:	085b      	lsrmi	r3, r3, #1
 800760a:	089b      	lsrpl	r3, r3, #2
 800760c:	6003      	strmi	r3, [r0, #0]
 800760e:	2201      	movmi	r2, #1
 8007610:	bf5c      	itt	pl
 8007612:	6003      	strpl	r3, [r0, #0]
 8007614:	2202      	movpl	r2, #2
 8007616:	4610      	mov	r0, r2
 8007618:	4770      	bx	lr
 800761a:	b299      	uxth	r1, r3
 800761c:	b909      	cbnz	r1, 8007622 <__lo0bits+0x2a>
 800761e:	0c1b      	lsrs	r3, r3, #16
 8007620:	2210      	movs	r2, #16
 8007622:	b2d9      	uxtb	r1, r3
 8007624:	b909      	cbnz	r1, 800762a <__lo0bits+0x32>
 8007626:	3208      	adds	r2, #8
 8007628:	0a1b      	lsrs	r3, r3, #8
 800762a:	0719      	lsls	r1, r3, #28
 800762c:	bf04      	itt	eq
 800762e:	091b      	lsreq	r3, r3, #4
 8007630:	3204      	addeq	r2, #4
 8007632:	0799      	lsls	r1, r3, #30
 8007634:	bf04      	itt	eq
 8007636:	089b      	lsreq	r3, r3, #2
 8007638:	3202      	addeq	r2, #2
 800763a:	07d9      	lsls	r1, r3, #31
 800763c:	d403      	bmi.n	8007646 <__lo0bits+0x4e>
 800763e:	085b      	lsrs	r3, r3, #1
 8007640:	f102 0201 	add.w	r2, r2, #1
 8007644:	d003      	beq.n	800764e <__lo0bits+0x56>
 8007646:	6003      	str	r3, [r0, #0]
 8007648:	e7e5      	b.n	8007616 <__lo0bits+0x1e>
 800764a:	2200      	movs	r2, #0
 800764c:	e7e3      	b.n	8007616 <__lo0bits+0x1e>
 800764e:	2220      	movs	r2, #32
 8007650:	e7e1      	b.n	8007616 <__lo0bits+0x1e>
	...

08007654 <__i2b>:
 8007654:	b510      	push	{r4, lr}
 8007656:	460c      	mov	r4, r1
 8007658:	2101      	movs	r1, #1
 800765a:	f7ff febb 	bl	80073d4 <_Balloc>
 800765e:	4602      	mov	r2, r0
 8007660:	b928      	cbnz	r0, 800766e <__i2b+0x1a>
 8007662:	4b05      	ldr	r3, [pc, #20]	; (8007678 <__i2b+0x24>)
 8007664:	4805      	ldr	r0, [pc, #20]	; (800767c <__i2b+0x28>)
 8007666:	f240 1145 	movw	r1, #325	; 0x145
 800766a:	f001 fc51 	bl	8008f10 <__assert_func>
 800766e:	2301      	movs	r3, #1
 8007670:	6144      	str	r4, [r0, #20]
 8007672:	6103      	str	r3, [r0, #16]
 8007674:	bd10      	pop	{r4, pc}
 8007676:	bf00      	nop
 8007678:	08009e9d 	.word	0x08009e9d
 800767c:	08009eae 	.word	0x08009eae

08007680 <__multiply>:
 8007680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007684:	4691      	mov	r9, r2
 8007686:	690a      	ldr	r2, [r1, #16]
 8007688:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800768c:	429a      	cmp	r2, r3
 800768e:	bfb8      	it	lt
 8007690:	460b      	movlt	r3, r1
 8007692:	460c      	mov	r4, r1
 8007694:	bfbc      	itt	lt
 8007696:	464c      	movlt	r4, r9
 8007698:	4699      	movlt	r9, r3
 800769a:	6927      	ldr	r7, [r4, #16]
 800769c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80076a0:	68a3      	ldr	r3, [r4, #8]
 80076a2:	6861      	ldr	r1, [r4, #4]
 80076a4:	eb07 060a 	add.w	r6, r7, sl
 80076a8:	42b3      	cmp	r3, r6
 80076aa:	b085      	sub	sp, #20
 80076ac:	bfb8      	it	lt
 80076ae:	3101      	addlt	r1, #1
 80076b0:	f7ff fe90 	bl	80073d4 <_Balloc>
 80076b4:	b930      	cbnz	r0, 80076c4 <__multiply+0x44>
 80076b6:	4602      	mov	r2, r0
 80076b8:	4b44      	ldr	r3, [pc, #272]	; (80077cc <__multiply+0x14c>)
 80076ba:	4845      	ldr	r0, [pc, #276]	; (80077d0 <__multiply+0x150>)
 80076bc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80076c0:	f001 fc26 	bl	8008f10 <__assert_func>
 80076c4:	f100 0514 	add.w	r5, r0, #20
 80076c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80076cc:	462b      	mov	r3, r5
 80076ce:	2200      	movs	r2, #0
 80076d0:	4543      	cmp	r3, r8
 80076d2:	d321      	bcc.n	8007718 <__multiply+0x98>
 80076d4:	f104 0314 	add.w	r3, r4, #20
 80076d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80076dc:	f109 0314 	add.w	r3, r9, #20
 80076e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80076e4:	9202      	str	r2, [sp, #8]
 80076e6:	1b3a      	subs	r2, r7, r4
 80076e8:	3a15      	subs	r2, #21
 80076ea:	f022 0203 	bic.w	r2, r2, #3
 80076ee:	3204      	adds	r2, #4
 80076f0:	f104 0115 	add.w	r1, r4, #21
 80076f4:	428f      	cmp	r7, r1
 80076f6:	bf38      	it	cc
 80076f8:	2204      	movcc	r2, #4
 80076fa:	9201      	str	r2, [sp, #4]
 80076fc:	9a02      	ldr	r2, [sp, #8]
 80076fe:	9303      	str	r3, [sp, #12]
 8007700:	429a      	cmp	r2, r3
 8007702:	d80c      	bhi.n	800771e <__multiply+0x9e>
 8007704:	2e00      	cmp	r6, #0
 8007706:	dd03      	ble.n	8007710 <__multiply+0x90>
 8007708:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800770c:	2b00      	cmp	r3, #0
 800770e:	d05b      	beq.n	80077c8 <__multiply+0x148>
 8007710:	6106      	str	r6, [r0, #16]
 8007712:	b005      	add	sp, #20
 8007714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007718:	f843 2b04 	str.w	r2, [r3], #4
 800771c:	e7d8      	b.n	80076d0 <__multiply+0x50>
 800771e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007722:	f1ba 0f00 	cmp.w	sl, #0
 8007726:	d024      	beq.n	8007772 <__multiply+0xf2>
 8007728:	f104 0e14 	add.w	lr, r4, #20
 800772c:	46a9      	mov	r9, r5
 800772e:	f04f 0c00 	mov.w	ip, #0
 8007732:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007736:	f8d9 1000 	ldr.w	r1, [r9]
 800773a:	fa1f fb82 	uxth.w	fp, r2
 800773e:	b289      	uxth	r1, r1
 8007740:	fb0a 110b 	mla	r1, sl, fp, r1
 8007744:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007748:	f8d9 2000 	ldr.w	r2, [r9]
 800774c:	4461      	add	r1, ip
 800774e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007752:	fb0a c20b 	mla	r2, sl, fp, ip
 8007756:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800775a:	b289      	uxth	r1, r1
 800775c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007760:	4577      	cmp	r7, lr
 8007762:	f849 1b04 	str.w	r1, [r9], #4
 8007766:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800776a:	d8e2      	bhi.n	8007732 <__multiply+0xb2>
 800776c:	9a01      	ldr	r2, [sp, #4]
 800776e:	f845 c002 	str.w	ip, [r5, r2]
 8007772:	9a03      	ldr	r2, [sp, #12]
 8007774:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007778:	3304      	adds	r3, #4
 800777a:	f1b9 0f00 	cmp.w	r9, #0
 800777e:	d021      	beq.n	80077c4 <__multiply+0x144>
 8007780:	6829      	ldr	r1, [r5, #0]
 8007782:	f104 0c14 	add.w	ip, r4, #20
 8007786:	46ae      	mov	lr, r5
 8007788:	f04f 0a00 	mov.w	sl, #0
 800778c:	f8bc b000 	ldrh.w	fp, [ip]
 8007790:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007794:	fb09 220b 	mla	r2, r9, fp, r2
 8007798:	4452      	add	r2, sl
 800779a:	b289      	uxth	r1, r1
 800779c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80077a0:	f84e 1b04 	str.w	r1, [lr], #4
 80077a4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80077a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80077ac:	f8be 1000 	ldrh.w	r1, [lr]
 80077b0:	fb09 110a 	mla	r1, r9, sl, r1
 80077b4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80077b8:	4567      	cmp	r7, ip
 80077ba:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80077be:	d8e5      	bhi.n	800778c <__multiply+0x10c>
 80077c0:	9a01      	ldr	r2, [sp, #4]
 80077c2:	50a9      	str	r1, [r5, r2]
 80077c4:	3504      	adds	r5, #4
 80077c6:	e799      	b.n	80076fc <__multiply+0x7c>
 80077c8:	3e01      	subs	r6, #1
 80077ca:	e79b      	b.n	8007704 <__multiply+0x84>
 80077cc:	08009e9d 	.word	0x08009e9d
 80077d0:	08009eae 	.word	0x08009eae

080077d4 <__pow5mult>:
 80077d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077d8:	4615      	mov	r5, r2
 80077da:	f012 0203 	ands.w	r2, r2, #3
 80077de:	4606      	mov	r6, r0
 80077e0:	460f      	mov	r7, r1
 80077e2:	d007      	beq.n	80077f4 <__pow5mult+0x20>
 80077e4:	4c25      	ldr	r4, [pc, #148]	; (800787c <__pow5mult+0xa8>)
 80077e6:	3a01      	subs	r2, #1
 80077e8:	2300      	movs	r3, #0
 80077ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077ee:	f7ff fe53 	bl	8007498 <__multadd>
 80077f2:	4607      	mov	r7, r0
 80077f4:	10ad      	asrs	r5, r5, #2
 80077f6:	d03d      	beq.n	8007874 <__pow5mult+0xa0>
 80077f8:	69f4      	ldr	r4, [r6, #28]
 80077fa:	b97c      	cbnz	r4, 800781c <__pow5mult+0x48>
 80077fc:	2010      	movs	r0, #16
 80077fe:	f7ff fd35 	bl	800726c <malloc>
 8007802:	4602      	mov	r2, r0
 8007804:	61f0      	str	r0, [r6, #28]
 8007806:	b928      	cbnz	r0, 8007814 <__pow5mult+0x40>
 8007808:	4b1d      	ldr	r3, [pc, #116]	; (8007880 <__pow5mult+0xac>)
 800780a:	481e      	ldr	r0, [pc, #120]	; (8007884 <__pow5mult+0xb0>)
 800780c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007810:	f001 fb7e 	bl	8008f10 <__assert_func>
 8007814:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007818:	6004      	str	r4, [r0, #0]
 800781a:	60c4      	str	r4, [r0, #12]
 800781c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007820:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007824:	b94c      	cbnz	r4, 800783a <__pow5mult+0x66>
 8007826:	f240 2171 	movw	r1, #625	; 0x271
 800782a:	4630      	mov	r0, r6
 800782c:	f7ff ff12 	bl	8007654 <__i2b>
 8007830:	2300      	movs	r3, #0
 8007832:	f8c8 0008 	str.w	r0, [r8, #8]
 8007836:	4604      	mov	r4, r0
 8007838:	6003      	str	r3, [r0, #0]
 800783a:	f04f 0900 	mov.w	r9, #0
 800783e:	07eb      	lsls	r3, r5, #31
 8007840:	d50a      	bpl.n	8007858 <__pow5mult+0x84>
 8007842:	4639      	mov	r1, r7
 8007844:	4622      	mov	r2, r4
 8007846:	4630      	mov	r0, r6
 8007848:	f7ff ff1a 	bl	8007680 <__multiply>
 800784c:	4639      	mov	r1, r7
 800784e:	4680      	mov	r8, r0
 8007850:	4630      	mov	r0, r6
 8007852:	f7ff fdff 	bl	8007454 <_Bfree>
 8007856:	4647      	mov	r7, r8
 8007858:	106d      	asrs	r5, r5, #1
 800785a:	d00b      	beq.n	8007874 <__pow5mult+0xa0>
 800785c:	6820      	ldr	r0, [r4, #0]
 800785e:	b938      	cbnz	r0, 8007870 <__pow5mult+0x9c>
 8007860:	4622      	mov	r2, r4
 8007862:	4621      	mov	r1, r4
 8007864:	4630      	mov	r0, r6
 8007866:	f7ff ff0b 	bl	8007680 <__multiply>
 800786a:	6020      	str	r0, [r4, #0]
 800786c:	f8c0 9000 	str.w	r9, [r0]
 8007870:	4604      	mov	r4, r0
 8007872:	e7e4      	b.n	800783e <__pow5mult+0x6a>
 8007874:	4638      	mov	r0, r7
 8007876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800787a:	bf00      	nop
 800787c:	08009ff8 	.word	0x08009ff8
 8007880:	08009e2e 	.word	0x08009e2e
 8007884:	08009eae 	.word	0x08009eae

08007888 <__lshift>:
 8007888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800788c:	460c      	mov	r4, r1
 800788e:	6849      	ldr	r1, [r1, #4]
 8007890:	6923      	ldr	r3, [r4, #16]
 8007892:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007896:	68a3      	ldr	r3, [r4, #8]
 8007898:	4607      	mov	r7, r0
 800789a:	4691      	mov	r9, r2
 800789c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078a0:	f108 0601 	add.w	r6, r8, #1
 80078a4:	42b3      	cmp	r3, r6
 80078a6:	db0b      	blt.n	80078c0 <__lshift+0x38>
 80078a8:	4638      	mov	r0, r7
 80078aa:	f7ff fd93 	bl	80073d4 <_Balloc>
 80078ae:	4605      	mov	r5, r0
 80078b0:	b948      	cbnz	r0, 80078c6 <__lshift+0x3e>
 80078b2:	4602      	mov	r2, r0
 80078b4:	4b28      	ldr	r3, [pc, #160]	; (8007958 <__lshift+0xd0>)
 80078b6:	4829      	ldr	r0, [pc, #164]	; (800795c <__lshift+0xd4>)
 80078b8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80078bc:	f001 fb28 	bl	8008f10 <__assert_func>
 80078c0:	3101      	adds	r1, #1
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	e7ee      	b.n	80078a4 <__lshift+0x1c>
 80078c6:	2300      	movs	r3, #0
 80078c8:	f100 0114 	add.w	r1, r0, #20
 80078cc:	f100 0210 	add.w	r2, r0, #16
 80078d0:	4618      	mov	r0, r3
 80078d2:	4553      	cmp	r3, sl
 80078d4:	db33      	blt.n	800793e <__lshift+0xb6>
 80078d6:	6920      	ldr	r0, [r4, #16]
 80078d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078dc:	f104 0314 	add.w	r3, r4, #20
 80078e0:	f019 091f 	ands.w	r9, r9, #31
 80078e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80078ec:	d02b      	beq.n	8007946 <__lshift+0xbe>
 80078ee:	f1c9 0e20 	rsb	lr, r9, #32
 80078f2:	468a      	mov	sl, r1
 80078f4:	2200      	movs	r2, #0
 80078f6:	6818      	ldr	r0, [r3, #0]
 80078f8:	fa00 f009 	lsl.w	r0, r0, r9
 80078fc:	4310      	orrs	r0, r2
 80078fe:	f84a 0b04 	str.w	r0, [sl], #4
 8007902:	f853 2b04 	ldr.w	r2, [r3], #4
 8007906:	459c      	cmp	ip, r3
 8007908:	fa22 f20e 	lsr.w	r2, r2, lr
 800790c:	d8f3      	bhi.n	80078f6 <__lshift+0x6e>
 800790e:	ebac 0304 	sub.w	r3, ip, r4
 8007912:	3b15      	subs	r3, #21
 8007914:	f023 0303 	bic.w	r3, r3, #3
 8007918:	3304      	adds	r3, #4
 800791a:	f104 0015 	add.w	r0, r4, #21
 800791e:	4584      	cmp	ip, r0
 8007920:	bf38      	it	cc
 8007922:	2304      	movcc	r3, #4
 8007924:	50ca      	str	r2, [r1, r3]
 8007926:	b10a      	cbz	r2, 800792c <__lshift+0xa4>
 8007928:	f108 0602 	add.w	r6, r8, #2
 800792c:	3e01      	subs	r6, #1
 800792e:	4638      	mov	r0, r7
 8007930:	612e      	str	r6, [r5, #16]
 8007932:	4621      	mov	r1, r4
 8007934:	f7ff fd8e 	bl	8007454 <_Bfree>
 8007938:	4628      	mov	r0, r5
 800793a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800793e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007942:	3301      	adds	r3, #1
 8007944:	e7c5      	b.n	80078d2 <__lshift+0x4a>
 8007946:	3904      	subs	r1, #4
 8007948:	f853 2b04 	ldr.w	r2, [r3], #4
 800794c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007950:	459c      	cmp	ip, r3
 8007952:	d8f9      	bhi.n	8007948 <__lshift+0xc0>
 8007954:	e7ea      	b.n	800792c <__lshift+0xa4>
 8007956:	bf00      	nop
 8007958:	08009e9d 	.word	0x08009e9d
 800795c:	08009eae 	.word	0x08009eae

08007960 <__mcmp>:
 8007960:	b530      	push	{r4, r5, lr}
 8007962:	6902      	ldr	r2, [r0, #16]
 8007964:	690c      	ldr	r4, [r1, #16]
 8007966:	1b12      	subs	r2, r2, r4
 8007968:	d10e      	bne.n	8007988 <__mcmp+0x28>
 800796a:	f100 0314 	add.w	r3, r0, #20
 800796e:	3114      	adds	r1, #20
 8007970:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007974:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007978:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800797c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007980:	42a5      	cmp	r5, r4
 8007982:	d003      	beq.n	800798c <__mcmp+0x2c>
 8007984:	d305      	bcc.n	8007992 <__mcmp+0x32>
 8007986:	2201      	movs	r2, #1
 8007988:	4610      	mov	r0, r2
 800798a:	bd30      	pop	{r4, r5, pc}
 800798c:	4283      	cmp	r3, r0
 800798e:	d3f3      	bcc.n	8007978 <__mcmp+0x18>
 8007990:	e7fa      	b.n	8007988 <__mcmp+0x28>
 8007992:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007996:	e7f7      	b.n	8007988 <__mcmp+0x28>

08007998 <__mdiff>:
 8007998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799c:	460c      	mov	r4, r1
 800799e:	4606      	mov	r6, r0
 80079a0:	4611      	mov	r1, r2
 80079a2:	4620      	mov	r0, r4
 80079a4:	4690      	mov	r8, r2
 80079a6:	f7ff ffdb 	bl	8007960 <__mcmp>
 80079aa:	1e05      	subs	r5, r0, #0
 80079ac:	d110      	bne.n	80079d0 <__mdiff+0x38>
 80079ae:	4629      	mov	r1, r5
 80079b0:	4630      	mov	r0, r6
 80079b2:	f7ff fd0f 	bl	80073d4 <_Balloc>
 80079b6:	b930      	cbnz	r0, 80079c6 <__mdiff+0x2e>
 80079b8:	4b3a      	ldr	r3, [pc, #232]	; (8007aa4 <__mdiff+0x10c>)
 80079ba:	4602      	mov	r2, r0
 80079bc:	f240 2137 	movw	r1, #567	; 0x237
 80079c0:	4839      	ldr	r0, [pc, #228]	; (8007aa8 <__mdiff+0x110>)
 80079c2:	f001 faa5 	bl	8008f10 <__assert_func>
 80079c6:	2301      	movs	r3, #1
 80079c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d0:	bfa4      	itt	ge
 80079d2:	4643      	movge	r3, r8
 80079d4:	46a0      	movge	r8, r4
 80079d6:	4630      	mov	r0, r6
 80079d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80079dc:	bfa6      	itte	ge
 80079de:	461c      	movge	r4, r3
 80079e0:	2500      	movge	r5, #0
 80079e2:	2501      	movlt	r5, #1
 80079e4:	f7ff fcf6 	bl	80073d4 <_Balloc>
 80079e8:	b920      	cbnz	r0, 80079f4 <__mdiff+0x5c>
 80079ea:	4b2e      	ldr	r3, [pc, #184]	; (8007aa4 <__mdiff+0x10c>)
 80079ec:	4602      	mov	r2, r0
 80079ee:	f240 2145 	movw	r1, #581	; 0x245
 80079f2:	e7e5      	b.n	80079c0 <__mdiff+0x28>
 80079f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80079f8:	6926      	ldr	r6, [r4, #16]
 80079fa:	60c5      	str	r5, [r0, #12]
 80079fc:	f104 0914 	add.w	r9, r4, #20
 8007a00:	f108 0514 	add.w	r5, r8, #20
 8007a04:	f100 0e14 	add.w	lr, r0, #20
 8007a08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007a0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a10:	f108 0210 	add.w	r2, r8, #16
 8007a14:	46f2      	mov	sl, lr
 8007a16:	2100      	movs	r1, #0
 8007a18:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a20:	fa11 f88b 	uxtah	r8, r1, fp
 8007a24:	b299      	uxth	r1, r3
 8007a26:	0c1b      	lsrs	r3, r3, #16
 8007a28:	eba8 0801 	sub.w	r8, r8, r1
 8007a2c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a30:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a34:	fa1f f888 	uxth.w	r8, r8
 8007a38:	1419      	asrs	r1, r3, #16
 8007a3a:	454e      	cmp	r6, r9
 8007a3c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a40:	f84a 3b04 	str.w	r3, [sl], #4
 8007a44:	d8e8      	bhi.n	8007a18 <__mdiff+0x80>
 8007a46:	1b33      	subs	r3, r6, r4
 8007a48:	3b15      	subs	r3, #21
 8007a4a:	f023 0303 	bic.w	r3, r3, #3
 8007a4e:	3304      	adds	r3, #4
 8007a50:	3415      	adds	r4, #21
 8007a52:	42a6      	cmp	r6, r4
 8007a54:	bf38      	it	cc
 8007a56:	2304      	movcc	r3, #4
 8007a58:	441d      	add	r5, r3
 8007a5a:	4473      	add	r3, lr
 8007a5c:	469e      	mov	lr, r3
 8007a5e:	462e      	mov	r6, r5
 8007a60:	4566      	cmp	r6, ip
 8007a62:	d30e      	bcc.n	8007a82 <__mdiff+0xea>
 8007a64:	f10c 0203 	add.w	r2, ip, #3
 8007a68:	1b52      	subs	r2, r2, r5
 8007a6a:	f022 0203 	bic.w	r2, r2, #3
 8007a6e:	3d03      	subs	r5, #3
 8007a70:	45ac      	cmp	ip, r5
 8007a72:	bf38      	it	cc
 8007a74:	2200      	movcc	r2, #0
 8007a76:	4413      	add	r3, r2
 8007a78:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007a7c:	b17a      	cbz	r2, 8007a9e <__mdiff+0x106>
 8007a7e:	6107      	str	r7, [r0, #16]
 8007a80:	e7a4      	b.n	80079cc <__mdiff+0x34>
 8007a82:	f856 8b04 	ldr.w	r8, [r6], #4
 8007a86:	fa11 f288 	uxtah	r2, r1, r8
 8007a8a:	1414      	asrs	r4, r2, #16
 8007a8c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a90:	b292      	uxth	r2, r2
 8007a92:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007a96:	f84e 2b04 	str.w	r2, [lr], #4
 8007a9a:	1421      	asrs	r1, r4, #16
 8007a9c:	e7e0      	b.n	8007a60 <__mdiff+0xc8>
 8007a9e:	3f01      	subs	r7, #1
 8007aa0:	e7ea      	b.n	8007a78 <__mdiff+0xe0>
 8007aa2:	bf00      	nop
 8007aa4:	08009e9d 	.word	0x08009e9d
 8007aa8:	08009eae 	.word	0x08009eae

08007aac <__ulp>:
 8007aac:	b082      	sub	sp, #8
 8007aae:	ed8d 0b00 	vstr	d0, [sp]
 8007ab2:	9a01      	ldr	r2, [sp, #4]
 8007ab4:	4b0f      	ldr	r3, [pc, #60]	; (8007af4 <__ulp+0x48>)
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	dc08      	bgt.n	8007ad2 <__ulp+0x26>
 8007ac0:	425b      	negs	r3, r3
 8007ac2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007ac6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007aca:	da04      	bge.n	8007ad6 <__ulp+0x2a>
 8007acc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ad0:	4113      	asrs	r3, r2
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	e008      	b.n	8007ae8 <__ulp+0x3c>
 8007ad6:	f1a2 0314 	sub.w	r3, r2, #20
 8007ada:	2b1e      	cmp	r3, #30
 8007adc:	bfda      	itte	le
 8007ade:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007ae2:	40da      	lsrle	r2, r3
 8007ae4:	2201      	movgt	r2, #1
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	4619      	mov	r1, r3
 8007aea:	4610      	mov	r0, r2
 8007aec:	ec41 0b10 	vmov	d0, r0, r1
 8007af0:	b002      	add	sp, #8
 8007af2:	4770      	bx	lr
 8007af4:	7ff00000 	.word	0x7ff00000

08007af8 <__b2d>:
 8007af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007afc:	6906      	ldr	r6, [r0, #16]
 8007afe:	f100 0814 	add.w	r8, r0, #20
 8007b02:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007b06:	1f37      	subs	r7, r6, #4
 8007b08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	f7ff fd53 	bl	80075b8 <__hi0bits>
 8007b12:	f1c0 0320 	rsb	r3, r0, #32
 8007b16:	280a      	cmp	r0, #10
 8007b18:	600b      	str	r3, [r1, #0]
 8007b1a:	491b      	ldr	r1, [pc, #108]	; (8007b88 <__b2d+0x90>)
 8007b1c:	dc15      	bgt.n	8007b4a <__b2d+0x52>
 8007b1e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007b22:	fa22 f30c 	lsr.w	r3, r2, ip
 8007b26:	45b8      	cmp	r8, r7
 8007b28:	ea43 0501 	orr.w	r5, r3, r1
 8007b2c:	bf34      	ite	cc
 8007b2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007b32:	2300      	movcs	r3, #0
 8007b34:	3015      	adds	r0, #21
 8007b36:	fa02 f000 	lsl.w	r0, r2, r0
 8007b3a:	fa23 f30c 	lsr.w	r3, r3, ip
 8007b3e:	4303      	orrs	r3, r0
 8007b40:	461c      	mov	r4, r3
 8007b42:	ec45 4b10 	vmov	d0, r4, r5
 8007b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b4a:	45b8      	cmp	r8, r7
 8007b4c:	bf3a      	itte	cc
 8007b4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007b52:	f1a6 0708 	subcc.w	r7, r6, #8
 8007b56:	2300      	movcs	r3, #0
 8007b58:	380b      	subs	r0, #11
 8007b5a:	d012      	beq.n	8007b82 <__b2d+0x8a>
 8007b5c:	f1c0 0120 	rsb	r1, r0, #32
 8007b60:	fa23 f401 	lsr.w	r4, r3, r1
 8007b64:	4082      	lsls	r2, r0
 8007b66:	4322      	orrs	r2, r4
 8007b68:	4547      	cmp	r7, r8
 8007b6a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007b6e:	bf8c      	ite	hi
 8007b70:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007b74:	2200      	movls	r2, #0
 8007b76:	4083      	lsls	r3, r0
 8007b78:	40ca      	lsrs	r2, r1
 8007b7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	e7de      	b.n	8007b40 <__b2d+0x48>
 8007b82:	ea42 0501 	orr.w	r5, r2, r1
 8007b86:	e7db      	b.n	8007b40 <__b2d+0x48>
 8007b88:	3ff00000 	.word	0x3ff00000

08007b8c <__d2b>:
 8007b8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b90:	460f      	mov	r7, r1
 8007b92:	2101      	movs	r1, #1
 8007b94:	ec59 8b10 	vmov	r8, r9, d0
 8007b98:	4616      	mov	r6, r2
 8007b9a:	f7ff fc1b 	bl	80073d4 <_Balloc>
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	b930      	cbnz	r0, 8007bb0 <__d2b+0x24>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	4b24      	ldr	r3, [pc, #144]	; (8007c38 <__d2b+0xac>)
 8007ba6:	4825      	ldr	r0, [pc, #148]	; (8007c3c <__d2b+0xb0>)
 8007ba8:	f240 310f 	movw	r1, #783	; 0x30f
 8007bac:	f001 f9b0 	bl	8008f10 <__assert_func>
 8007bb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007bb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bb8:	bb2d      	cbnz	r5, 8007c06 <__d2b+0x7a>
 8007bba:	9301      	str	r3, [sp, #4]
 8007bbc:	f1b8 0300 	subs.w	r3, r8, #0
 8007bc0:	d026      	beq.n	8007c10 <__d2b+0x84>
 8007bc2:	4668      	mov	r0, sp
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	f7ff fd17 	bl	80075f8 <__lo0bits>
 8007bca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007bce:	b1e8      	cbz	r0, 8007c0c <__d2b+0x80>
 8007bd0:	f1c0 0320 	rsb	r3, r0, #32
 8007bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	40c2      	lsrs	r2, r0
 8007bdc:	6163      	str	r3, [r4, #20]
 8007bde:	9201      	str	r2, [sp, #4]
 8007be0:	9b01      	ldr	r3, [sp, #4]
 8007be2:	61a3      	str	r3, [r4, #24]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	bf14      	ite	ne
 8007be8:	2202      	movne	r2, #2
 8007bea:	2201      	moveq	r2, #1
 8007bec:	6122      	str	r2, [r4, #16]
 8007bee:	b1bd      	cbz	r5, 8007c20 <__d2b+0x94>
 8007bf0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007bf4:	4405      	add	r5, r0
 8007bf6:	603d      	str	r5, [r7, #0]
 8007bf8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007bfc:	6030      	str	r0, [r6, #0]
 8007bfe:	4620      	mov	r0, r4
 8007c00:	b003      	add	sp, #12
 8007c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c0a:	e7d6      	b.n	8007bba <__d2b+0x2e>
 8007c0c:	6161      	str	r1, [r4, #20]
 8007c0e:	e7e7      	b.n	8007be0 <__d2b+0x54>
 8007c10:	a801      	add	r0, sp, #4
 8007c12:	f7ff fcf1 	bl	80075f8 <__lo0bits>
 8007c16:	9b01      	ldr	r3, [sp, #4]
 8007c18:	6163      	str	r3, [r4, #20]
 8007c1a:	3020      	adds	r0, #32
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	e7e5      	b.n	8007bec <__d2b+0x60>
 8007c20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c28:	6038      	str	r0, [r7, #0]
 8007c2a:	6918      	ldr	r0, [r3, #16]
 8007c2c:	f7ff fcc4 	bl	80075b8 <__hi0bits>
 8007c30:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c34:	e7e2      	b.n	8007bfc <__d2b+0x70>
 8007c36:	bf00      	nop
 8007c38:	08009e9d 	.word	0x08009e9d
 8007c3c:	08009eae 	.word	0x08009eae

08007c40 <__ratio>:
 8007c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c44:	4688      	mov	r8, r1
 8007c46:	4669      	mov	r1, sp
 8007c48:	4681      	mov	r9, r0
 8007c4a:	f7ff ff55 	bl	8007af8 <__b2d>
 8007c4e:	a901      	add	r1, sp, #4
 8007c50:	4640      	mov	r0, r8
 8007c52:	ec55 4b10 	vmov	r4, r5, d0
 8007c56:	f7ff ff4f 	bl	8007af8 <__b2d>
 8007c5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c5e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007c62:	eba3 0c02 	sub.w	ip, r3, r2
 8007c66:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007c6a:	1a9b      	subs	r3, r3, r2
 8007c6c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007c70:	ec51 0b10 	vmov	r0, r1, d0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	bfd6      	itet	le
 8007c78:	460a      	movle	r2, r1
 8007c7a:	462a      	movgt	r2, r5
 8007c7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007c80:	468b      	mov	fp, r1
 8007c82:	462f      	mov	r7, r5
 8007c84:	bfd4      	ite	le
 8007c86:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007c8a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007c8e:	4620      	mov	r0, r4
 8007c90:	ee10 2a10 	vmov	r2, s0
 8007c94:	465b      	mov	r3, fp
 8007c96:	4639      	mov	r1, r7
 8007c98:	f7f8 fde8 	bl	800086c <__aeabi_ddiv>
 8007c9c:	ec41 0b10 	vmov	d0, r0, r1
 8007ca0:	b003      	add	sp, #12
 8007ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ca6 <__copybits>:
 8007ca6:	3901      	subs	r1, #1
 8007ca8:	b570      	push	{r4, r5, r6, lr}
 8007caa:	1149      	asrs	r1, r1, #5
 8007cac:	6914      	ldr	r4, [r2, #16]
 8007cae:	3101      	adds	r1, #1
 8007cb0:	f102 0314 	add.w	r3, r2, #20
 8007cb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007cb8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007cbc:	1f05      	subs	r5, r0, #4
 8007cbe:	42a3      	cmp	r3, r4
 8007cc0:	d30c      	bcc.n	8007cdc <__copybits+0x36>
 8007cc2:	1aa3      	subs	r3, r4, r2
 8007cc4:	3b11      	subs	r3, #17
 8007cc6:	f023 0303 	bic.w	r3, r3, #3
 8007cca:	3211      	adds	r2, #17
 8007ccc:	42a2      	cmp	r2, r4
 8007cce:	bf88      	it	hi
 8007cd0:	2300      	movhi	r3, #0
 8007cd2:	4418      	add	r0, r3
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	4288      	cmp	r0, r1
 8007cd8:	d305      	bcc.n	8007ce6 <__copybits+0x40>
 8007cda:	bd70      	pop	{r4, r5, r6, pc}
 8007cdc:	f853 6b04 	ldr.w	r6, [r3], #4
 8007ce0:	f845 6f04 	str.w	r6, [r5, #4]!
 8007ce4:	e7eb      	b.n	8007cbe <__copybits+0x18>
 8007ce6:	f840 3b04 	str.w	r3, [r0], #4
 8007cea:	e7f4      	b.n	8007cd6 <__copybits+0x30>

08007cec <__any_on>:
 8007cec:	f100 0214 	add.w	r2, r0, #20
 8007cf0:	6900      	ldr	r0, [r0, #16]
 8007cf2:	114b      	asrs	r3, r1, #5
 8007cf4:	4298      	cmp	r0, r3
 8007cf6:	b510      	push	{r4, lr}
 8007cf8:	db11      	blt.n	8007d1e <__any_on+0x32>
 8007cfa:	dd0a      	ble.n	8007d12 <__any_on+0x26>
 8007cfc:	f011 011f 	ands.w	r1, r1, #31
 8007d00:	d007      	beq.n	8007d12 <__any_on+0x26>
 8007d02:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007d06:	fa24 f001 	lsr.w	r0, r4, r1
 8007d0a:	fa00 f101 	lsl.w	r1, r0, r1
 8007d0e:	428c      	cmp	r4, r1
 8007d10:	d10b      	bne.n	8007d2a <__any_on+0x3e>
 8007d12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d803      	bhi.n	8007d22 <__any_on+0x36>
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	bd10      	pop	{r4, pc}
 8007d1e:	4603      	mov	r3, r0
 8007d20:	e7f7      	b.n	8007d12 <__any_on+0x26>
 8007d22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d26:	2900      	cmp	r1, #0
 8007d28:	d0f5      	beq.n	8007d16 <__any_on+0x2a>
 8007d2a:	2001      	movs	r0, #1
 8007d2c:	e7f6      	b.n	8007d1c <__any_on+0x30>

08007d2e <sulp>:
 8007d2e:	b570      	push	{r4, r5, r6, lr}
 8007d30:	4604      	mov	r4, r0
 8007d32:	460d      	mov	r5, r1
 8007d34:	ec45 4b10 	vmov	d0, r4, r5
 8007d38:	4616      	mov	r6, r2
 8007d3a:	f7ff feb7 	bl	8007aac <__ulp>
 8007d3e:	ec51 0b10 	vmov	r0, r1, d0
 8007d42:	b17e      	cbz	r6, 8007d64 <sulp+0x36>
 8007d44:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007d48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	dd09      	ble.n	8007d64 <sulp+0x36>
 8007d50:	051b      	lsls	r3, r3, #20
 8007d52:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007d56:	2400      	movs	r4, #0
 8007d58:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	462b      	mov	r3, r5
 8007d60:	f7f8 fc5a 	bl	8000618 <__aeabi_dmul>
 8007d64:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d68 <_strtod_l>:
 8007d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	ed2d 8b02 	vpush	{d8}
 8007d70:	b09b      	sub	sp, #108	; 0x6c
 8007d72:	4604      	mov	r4, r0
 8007d74:	9213      	str	r2, [sp, #76]	; 0x4c
 8007d76:	2200      	movs	r2, #0
 8007d78:	9216      	str	r2, [sp, #88]	; 0x58
 8007d7a:	460d      	mov	r5, r1
 8007d7c:	f04f 0800 	mov.w	r8, #0
 8007d80:	f04f 0900 	mov.w	r9, #0
 8007d84:	460a      	mov	r2, r1
 8007d86:	9215      	str	r2, [sp, #84]	; 0x54
 8007d88:	7811      	ldrb	r1, [r2, #0]
 8007d8a:	292b      	cmp	r1, #43	; 0x2b
 8007d8c:	d04c      	beq.n	8007e28 <_strtod_l+0xc0>
 8007d8e:	d83a      	bhi.n	8007e06 <_strtod_l+0x9e>
 8007d90:	290d      	cmp	r1, #13
 8007d92:	d834      	bhi.n	8007dfe <_strtod_l+0x96>
 8007d94:	2908      	cmp	r1, #8
 8007d96:	d834      	bhi.n	8007e02 <_strtod_l+0x9a>
 8007d98:	2900      	cmp	r1, #0
 8007d9a:	d03d      	beq.n	8007e18 <_strtod_l+0xb0>
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	920a      	str	r2, [sp, #40]	; 0x28
 8007da0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007da2:	7832      	ldrb	r2, [r6, #0]
 8007da4:	2a30      	cmp	r2, #48	; 0x30
 8007da6:	f040 80b4 	bne.w	8007f12 <_strtod_l+0x1aa>
 8007daa:	7872      	ldrb	r2, [r6, #1]
 8007dac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007db0:	2a58      	cmp	r2, #88	; 0x58
 8007db2:	d170      	bne.n	8007e96 <_strtod_l+0x12e>
 8007db4:	9302      	str	r3, [sp, #8]
 8007db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db8:	9301      	str	r3, [sp, #4]
 8007dba:	ab16      	add	r3, sp, #88	; 0x58
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	4a8e      	ldr	r2, [pc, #568]	; (8007ff8 <_strtod_l+0x290>)
 8007dc0:	ab17      	add	r3, sp, #92	; 0x5c
 8007dc2:	a915      	add	r1, sp, #84	; 0x54
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f001 f93f 	bl	8009048 <__gethex>
 8007dca:	f010 070f 	ands.w	r7, r0, #15
 8007dce:	4605      	mov	r5, r0
 8007dd0:	d005      	beq.n	8007dde <_strtod_l+0x76>
 8007dd2:	2f06      	cmp	r7, #6
 8007dd4:	d12a      	bne.n	8007e2c <_strtod_l+0xc4>
 8007dd6:	3601      	adds	r6, #1
 8007dd8:	2300      	movs	r3, #0
 8007dda:	9615      	str	r6, [sp, #84]	; 0x54
 8007ddc:	930a      	str	r3, [sp, #40]	; 0x28
 8007dde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f040 857f 	bne.w	80088e4 <_strtod_l+0xb7c>
 8007de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de8:	b1db      	cbz	r3, 8007e22 <_strtod_l+0xba>
 8007dea:	4642      	mov	r2, r8
 8007dec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007df0:	ec43 2b10 	vmov	d0, r2, r3
 8007df4:	b01b      	add	sp, #108	; 0x6c
 8007df6:	ecbd 8b02 	vpop	{d8}
 8007dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dfe:	2920      	cmp	r1, #32
 8007e00:	d1cc      	bne.n	8007d9c <_strtod_l+0x34>
 8007e02:	3201      	adds	r2, #1
 8007e04:	e7bf      	b.n	8007d86 <_strtod_l+0x1e>
 8007e06:	292d      	cmp	r1, #45	; 0x2d
 8007e08:	d1c8      	bne.n	8007d9c <_strtod_l+0x34>
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	910a      	str	r1, [sp, #40]	; 0x28
 8007e0e:	1c51      	adds	r1, r2, #1
 8007e10:	9115      	str	r1, [sp, #84]	; 0x54
 8007e12:	7852      	ldrb	r2, [r2, #1]
 8007e14:	2a00      	cmp	r2, #0
 8007e16:	d1c3      	bne.n	8007da0 <_strtod_l+0x38>
 8007e18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e1a:	9515      	str	r5, [sp, #84]	; 0x54
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f040 855f 	bne.w	80088e0 <_strtod_l+0xb78>
 8007e22:	4642      	mov	r2, r8
 8007e24:	464b      	mov	r3, r9
 8007e26:	e7e3      	b.n	8007df0 <_strtod_l+0x88>
 8007e28:	2100      	movs	r1, #0
 8007e2a:	e7ef      	b.n	8007e0c <_strtod_l+0xa4>
 8007e2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007e2e:	b13a      	cbz	r2, 8007e40 <_strtod_l+0xd8>
 8007e30:	2135      	movs	r1, #53	; 0x35
 8007e32:	a818      	add	r0, sp, #96	; 0x60
 8007e34:	f7ff ff37 	bl	8007ca6 <__copybits>
 8007e38:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f7ff fb0a 	bl	8007454 <_Bfree>
 8007e40:	3f01      	subs	r7, #1
 8007e42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e44:	2f04      	cmp	r7, #4
 8007e46:	d806      	bhi.n	8007e56 <_strtod_l+0xee>
 8007e48:	e8df f007 	tbb	[pc, r7]
 8007e4c:	201d0314 	.word	0x201d0314
 8007e50:	14          	.byte	0x14
 8007e51:	00          	.byte	0x00
 8007e52:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007e56:	05e9      	lsls	r1, r5, #23
 8007e58:	bf48      	it	mi
 8007e5a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007e5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e62:	0d1b      	lsrs	r3, r3, #20
 8007e64:	051b      	lsls	r3, r3, #20
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1b9      	bne.n	8007dde <_strtod_l+0x76>
 8007e6a:	f7fe fb05 	bl	8006478 <__errno>
 8007e6e:	2322      	movs	r3, #34	; 0x22
 8007e70:	6003      	str	r3, [r0, #0]
 8007e72:	e7b4      	b.n	8007dde <_strtod_l+0x76>
 8007e74:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007e78:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007e7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007e80:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007e84:	e7e7      	b.n	8007e56 <_strtod_l+0xee>
 8007e86:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008000 <_strtod_l+0x298>
 8007e8a:	e7e4      	b.n	8007e56 <_strtod_l+0xee>
 8007e8c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007e90:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007e94:	e7df      	b.n	8007e56 <_strtod_l+0xee>
 8007e96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e98:	1c5a      	adds	r2, r3, #1
 8007e9a:	9215      	str	r2, [sp, #84]	; 0x54
 8007e9c:	785b      	ldrb	r3, [r3, #1]
 8007e9e:	2b30      	cmp	r3, #48	; 0x30
 8007ea0:	d0f9      	beq.n	8007e96 <_strtod_l+0x12e>
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d09b      	beq.n	8007dde <_strtod_l+0x76>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f04f 0a00 	mov.w	sl, #0
 8007eac:	9304      	str	r3, [sp, #16]
 8007eae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007eb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007eb2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007eb6:	46d3      	mov	fp, sl
 8007eb8:	220a      	movs	r2, #10
 8007eba:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007ebc:	7806      	ldrb	r6, [r0, #0]
 8007ebe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007ec2:	b2d9      	uxtb	r1, r3
 8007ec4:	2909      	cmp	r1, #9
 8007ec6:	d926      	bls.n	8007f16 <_strtod_l+0x1ae>
 8007ec8:	494c      	ldr	r1, [pc, #304]	; (8007ffc <_strtod_l+0x294>)
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f000 ffe6 	bl	8008e9c <strncmp>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d030      	beq.n	8007f36 <_strtod_l+0x1ce>
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	4632      	mov	r2, r6
 8007ed8:	9005      	str	r0, [sp, #20]
 8007eda:	465e      	mov	r6, fp
 8007edc:	4603      	mov	r3, r0
 8007ede:	2a65      	cmp	r2, #101	; 0x65
 8007ee0:	d001      	beq.n	8007ee6 <_strtod_l+0x17e>
 8007ee2:	2a45      	cmp	r2, #69	; 0x45
 8007ee4:	d113      	bne.n	8007f0e <_strtod_l+0x1a6>
 8007ee6:	b91e      	cbnz	r6, 8007ef0 <_strtod_l+0x188>
 8007ee8:	9a04      	ldr	r2, [sp, #16]
 8007eea:	4302      	orrs	r2, r0
 8007eec:	d094      	beq.n	8007e18 <_strtod_l+0xb0>
 8007eee:	2600      	movs	r6, #0
 8007ef0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007ef2:	1c6a      	adds	r2, r5, #1
 8007ef4:	9215      	str	r2, [sp, #84]	; 0x54
 8007ef6:	786a      	ldrb	r2, [r5, #1]
 8007ef8:	2a2b      	cmp	r2, #43	; 0x2b
 8007efa:	d074      	beq.n	8007fe6 <_strtod_l+0x27e>
 8007efc:	2a2d      	cmp	r2, #45	; 0x2d
 8007efe:	d078      	beq.n	8007ff2 <_strtod_l+0x28a>
 8007f00:	f04f 0c00 	mov.w	ip, #0
 8007f04:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007f08:	2909      	cmp	r1, #9
 8007f0a:	d97f      	bls.n	800800c <_strtod_l+0x2a4>
 8007f0c:	9515      	str	r5, [sp, #84]	; 0x54
 8007f0e:	2700      	movs	r7, #0
 8007f10:	e09e      	b.n	8008050 <_strtod_l+0x2e8>
 8007f12:	2300      	movs	r3, #0
 8007f14:	e7c8      	b.n	8007ea8 <_strtod_l+0x140>
 8007f16:	f1bb 0f08 	cmp.w	fp, #8
 8007f1a:	bfd8      	it	le
 8007f1c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007f1e:	f100 0001 	add.w	r0, r0, #1
 8007f22:	bfda      	itte	le
 8007f24:	fb02 3301 	mlale	r3, r2, r1, r3
 8007f28:	9309      	strle	r3, [sp, #36]	; 0x24
 8007f2a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007f2e:	f10b 0b01 	add.w	fp, fp, #1
 8007f32:	9015      	str	r0, [sp, #84]	; 0x54
 8007f34:	e7c1      	b.n	8007eba <_strtod_l+0x152>
 8007f36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f38:	1c5a      	adds	r2, r3, #1
 8007f3a:	9215      	str	r2, [sp, #84]	; 0x54
 8007f3c:	785a      	ldrb	r2, [r3, #1]
 8007f3e:	f1bb 0f00 	cmp.w	fp, #0
 8007f42:	d037      	beq.n	8007fb4 <_strtod_l+0x24c>
 8007f44:	9005      	str	r0, [sp, #20]
 8007f46:	465e      	mov	r6, fp
 8007f48:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007f4c:	2b09      	cmp	r3, #9
 8007f4e:	d912      	bls.n	8007f76 <_strtod_l+0x20e>
 8007f50:	2301      	movs	r3, #1
 8007f52:	e7c4      	b.n	8007ede <_strtod_l+0x176>
 8007f54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	9215      	str	r2, [sp, #84]	; 0x54
 8007f5a:	785a      	ldrb	r2, [r3, #1]
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	2a30      	cmp	r2, #48	; 0x30
 8007f60:	d0f8      	beq.n	8007f54 <_strtod_l+0x1ec>
 8007f62:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007f66:	2b08      	cmp	r3, #8
 8007f68:	f200 84c1 	bhi.w	80088ee <_strtod_l+0xb86>
 8007f6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f6e:	9005      	str	r0, [sp, #20]
 8007f70:	2000      	movs	r0, #0
 8007f72:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f74:	4606      	mov	r6, r0
 8007f76:	3a30      	subs	r2, #48	; 0x30
 8007f78:	f100 0301 	add.w	r3, r0, #1
 8007f7c:	d014      	beq.n	8007fa8 <_strtod_l+0x240>
 8007f7e:	9905      	ldr	r1, [sp, #20]
 8007f80:	4419      	add	r1, r3
 8007f82:	9105      	str	r1, [sp, #20]
 8007f84:	4633      	mov	r3, r6
 8007f86:	eb00 0c06 	add.w	ip, r0, r6
 8007f8a:	210a      	movs	r1, #10
 8007f8c:	4563      	cmp	r3, ip
 8007f8e:	d113      	bne.n	8007fb8 <_strtod_l+0x250>
 8007f90:	1833      	adds	r3, r6, r0
 8007f92:	2b08      	cmp	r3, #8
 8007f94:	f106 0601 	add.w	r6, r6, #1
 8007f98:	4406      	add	r6, r0
 8007f9a:	dc1a      	bgt.n	8007fd2 <_strtod_l+0x26a>
 8007f9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f9e:	230a      	movs	r3, #10
 8007fa0:	fb03 2301 	mla	r3, r3, r1, r2
 8007fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007faa:	1c51      	adds	r1, r2, #1
 8007fac:	9115      	str	r1, [sp, #84]	; 0x54
 8007fae:	7852      	ldrb	r2, [r2, #1]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	e7c9      	b.n	8007f48 <_strtod_l+0x1e0>
 8007fb4:	4658      	mov	r0, fp
 8007fb6:	e7d2      	b.n	8007f5e <_strtod_l+0x1f6>
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	f103 0301 	add.w	r3, r3, #1
 8007fbe:	dc03      	bgt.n	8007fc8 <_strtod_l+0x260>
 8007fc0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007fc2:	434f      	muls	r7, r1
 8007fc4:	9709      	str	r7, [sp, #36]	; 0x24
 8007fc6:	e7e1      	b.n	8007f8c <_strtod_l+0x224>
 8007fc8:	2b10      	cmp	r3, #16
 8007fca:	bfd8      	it	le
 8007fcc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007fd0:	e7dc      	b.n	8007f8c <_strtod_l+0x224>
 8007fd2:	2e10      	cmp	r6, #16
 8007fd4:	bfdc      	itt	le
 8007fd6:	230a      	movle	r3, #10
 8007fd8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007fdc:	e7e3      	b.n	8007fa6 <_strtod_l+0x23e>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	9305      	str	r3, [sp, #20]
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e780      	b.n	8007ee8 <_strtod_l+0x180>
 8007fe6:	f04f 0c00 	mov.w	ip, #0
 8007fea:	1caa      	adds	r2, r5, #2
 8007fec:	9215      	str	r2, [sp, #84]	; 0x54
 8007fee:	78aa      	ldrb	r2, [r5, #2]
 8007ff0:	e788      	b.n	8007f04 <_strtod_l+0x19c>
 8007ff2:	f04f 0c01 	mov.w	ip, #1
 8007ff6:	e7f8      	b.n	8007fea <_strtod_l+0x282>
 8007ff8:	0800a008 	.word	0x0800a008
 8007ffc:	0800a004 	.word	0x0800a004
 8008000:	7ff00000 	.word	0x7ff00000
 8008004:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008006:	1c51      	adds	r1, r2, #1
 8008008:	9115      	str	r1, [sp, #84]	; 0x54
 800800a:	7852      	ldrb	r2, [r2, #1]
 800800c:	2a30      	cmp	r2, #48	; 0x30
 800800e:	d0f9      	beq.n	8008004 <_strtod_l+0x29c>
 8008010:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008014:	2908      	cmp	r1, #8
 8008016:	f63f af7a 	bhi.w	8007f0e <_strtod_l+0x1a6>
 800801a:	3a30      	subs	r2, #48	; 0x30
 800801c:	9208      	str	r2, [sp, #32]
 800801e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008020:	920c      	str	r2, [sp, #48]	; 0x30
 8008022:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008024:	1c57      	adds	r7, r2, #1
 8008026:	9715      	str	r7, [sp, #84]	; 0x54
 8008028:	7852      	ldrb	r2, [r2, #1]
 800802a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800802e:	f1be 0f09 	cmp.w	lr, #9
 8008032:	d938      	bls.n	80080a6 <_strtod_l+0x33e>
 8008034:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008036:	1a7f      	subs	r7, r7, r1
 8008038:	2f08      	cmp	r7, #8
 800803a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800803e:	dc03      	bgt.n	8008048 <_strtod_l+0x2e0>
 8008040:	9908      	ldr	r1, [sp, #32]
 8008042:	428f      	cmp	r7, r1
 8008044:	bfa8      	it	ge
 8008046:	460f      	movge	r7, r1
 8008048:	f1bc 0f00 	cmp.w	ip, #0
 800804c:	d000      	beq.n	8008050 <_strtod_l+0x2e8>
 800804e:	427f      	negs	r7, r7
 8008050:	2e00      	cmp	r6, #0
 8008052:	d14f      	bne.n	80080f4 <_strtod_l+0x38c>
 8008054:	9904      	ldr	r1, [sp, #16]
 8008056:	4301      	orrs	r1, r0
 8008058:	f47f aec1 	bne.w	8007dde <_strtod_l+0x76>
 800805c:	2b00      	cmp	r3, #0
 800805e:	f47f aedb 	bne.w	8007e18 <_strtod_l+0xb0>
 8008062:	2a69      	cmp	r2, #105	; 0x69
 8008064:	d029      	beq.n	80080ba <_strtod_l+0x352>
 8008066:	dc26      	bgt.n	80080b6 <_strtod_l+0x34e>
 8008068:	2a49      	cmp	r2, #73	; 0x49
 800806a:	d026      	beq.n	80080ba <_strtod_l+0x352>
 800806c:	2a4e      	cmp	r2, #78	; 0x4e
 800806e:	f47f aed3 	bne.w	8007e18 <_strtod_l+0xb0>
 8008072:	499b      	ldr	r1, [pc, #620]	; (80082e0 <_strtod_l+0x578>)
 8008074:	a815      	add	r0, sp, #84	; 0x54
 8008076:	f001 fa27 	bl	80094c8 <__match>
 800807a:	2800      	cmp	r0, #0
 800807c:	f43f aecc 	beq.w	8007e18 <_strtod_l+0xb0>
 8008080:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	2b28      	cmp	r3, #40	; 0x28
 8008086:	d12f      	bne.n	80080e8 <_strtod_l+0x380>
 8008088:	4996      	ldr	r1, [pc, #600]	; (80082e4 <_strtod_l+0x57c>)
 800808a:	aa18      	add	r2, sp, #96	; 0x60
 800808c:	a815      	add	r0, sp, #84	; 0x54
 800808e:	f001 fa2f 	bl	80094f0 <__hexnan>
 8008092:	2805      	cmp	r0, #5
 8008094:	d128      	bne.n	80080e8 <_strtod_l+0x380>
 8008096:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008098:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800809c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80080a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80080a4:	e69b      	b.n	8007dde <_strtod_l+0x76>
 80080a6:	9f08      	ldr	r7, [sp, #32]
 80080a8:	210a      	movs	r1, #10
 80080aa:	fb01 2107 	mla	r1, r1, r7, r2
 80080ae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80080b2:	9208      	str	r2, [sp, #32]
 80080b4:	e7b5      	b.n	8008022 <_strtod_l+0x2ba>
 80080b6:	2a6e      	cmp	r2, #110	; 0x6e
 80080b8:	e7d9      	b.n	800806e <_strtod_l+0x306>
 80080ba:	498b      	ldr	r1, [pc, #556]	; (80082e8 <_strtod_l+0x580>)
 80080bc:	a815      	add	r0, sp, #84	; 0x54
 80080be:	f001 fa03 	bl	80094c8 <__match>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	f43f aea8 	beq.w	8007e18 <_strtod_l+0xb0>
 80080c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080ca:	4988      	ldr	r1, [pc, #544]	; (80082ec <_strtod_l+0x584>)
 80080cc:	3b01      	subs	r3, #1
 80080ce:	a815      	add	r0, sp, #84	; 0x54
 80080d0:	9315      	str	r3, [sp, #84]	; 0x54
 80080d2:	f001 f9f9 	bl	80094c8 <__match>
 80080d6:	b910      	cbnz	r0, 80080de <_strtod_l+0x376>
 80080d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080da:	3301      	adds	r3, #1
 80080dc:	9315      	str	r3, [sp, #84]	; 0x54
 80080de:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80082fc <_strtod_l+0x594>
 80080e2:	f04f 0800 	mov.w	r8, #0
 80080e6:	e67a      	b.n	8007dde <_strtod_l+0x76>
 80080e8:	4881      	ldr	r0, [pc, #516]	; (80082f0 <_strtod_l+0x588>)
 80080ea:	f000 ff09 	bl	8008f00 <nan>
 80080ee:	ec59 8b10 	vmov	r8, r9, d0
 80080f2:	e674      	b.n	8007dde <_strtod_l+0x76>
 80080f4:	9b05      	ldr	r3, [sp, #20]
 80080f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080f8:	1afb      	subs	r3, r7, r3
 80080fa:	f1bb 0f00 	cmp.w	fp, #0
 80080fe:	bf08      	it	eq
 8008100:	46b3      	moveq	fp, r6
 8008102:	2e10      	cmp	r6, #16
 8008104:	9308      	str	r3, [sp, #32]
 8008106:	4635      	mov	r5, r6
 8008108:	bfa8      	it	ge
 800810a:	2510      	movge	r5, #16
 800810c:	f7f8 fa0a 	bl	8000524 <__aeabi_ui2d>
 8008110:	2e09      	cmp	r6, #9
 8008112:	4680      	mov	r8, r0
 8008114:	4689      	mov	r9, r1
 8008116:	dd13      	ble.n	8008140 <_strtod_l+0x3d8>
 8008118:	4b76      	ldr	r3, [pc, #472]	; (80082f4 <_strtod_l+0x58c>)
 800811a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800811e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008122:	f7f8 fa79 	bl	8000618 <__aeabi_dmul>
 8008126:	4680      	mov	r8, r0
 8008128:	4650      	mov	r0, sl
 800812a:	4689      	mov	r9, r1
 800812c:	f7f8 f9fa 	bl	8000524 <__aeabi_ui2d>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	4640      	mov	r0, r8
 8008136:	4649      	mov	r1, r9
 8008138:	f7f8 f8b8 	bl	80002ac <__adddf3>
 800813c:	4680      	mov	r8, r0
 800813e:	4689      	mov	r9, r1
 8008140:	2e0f      	cmp	r6, #15
 8008142:	dc38      	bgt.n	80081b6 <_strtod_l+0x44e>
 8008144:	9b08      	ldr	r3, [sp, #32]
 8008146:	2b00      	cmp	r3, #0
 8008148:	f43f ae49 	beq.w	8007dde <_strtod_l+0x76>
 800814c:	dd24      	ble.n	8008198 <_strtod_l+0x430>
 800814e:	2b16      	cmp	r3, #22
 8008150:	dc0b      	bgt.n	800816a <_strtod_l+0x402>
 8008152:	4968      	ldr	r1, [pc, #416]	; (80082f4 <_strtod_l+0x58c>)
 8008154:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800815c:	4642      	mov	r2, r8
 800815e:	464b      	mov	r3, r9
 8008160:	f7f8 fa5a 	bl	8000618 <__aeabi_dmul>
 8008164:	4680      	mov	r8, r0
 8008166:	4689      	mov	r9, r1
 8008168:	e639      	b.n	8007dde <_strtod_l+0x76>
 800816a:	9a08      	ldr	r2, [sp, #32]
 800816c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008170:	4293      	cmp	r3, r2
 8008172:	db20      	blt.n	80081b6 <_strtod_l+0x44e>
 8008174:	4c5f      	ldr	r4, [pc, #380]	; (80082f4 <_strtod_l+0x58c>)
 8008176:	f1c6 060f 	rsb	r6, r6, #15
 800817a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800817e:	4642      	mov	r2, r8
 8008180:	464b      	mov	r3, r9
 8008182:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008186:	f7f8 fa47 	bl	8000618 <__aeabi_dmul>
 800818a:	9b08      	ldr	r3, [sp, #32]
 800818c:	1b9e      	subs	r6, r3, r6
 800818e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008192:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008196:	e7e3      	b.n	8008160 <_strtod_l+0x3f8>
 8008198:	9b08      	ldr	r3, [sp, #32]
 800819a:	3316      	adds	r3, #22
 800819c:	db0b      	blt.n	80081b6 <_strtod_l+0x44e>
 800819e:	9b05      	ldr	r3, [sp, #20]
 80081a0:	1bdf      	subs	r7, r3, r7
 80081a2:	4b54      	ldr	r3, [pc, #336]	; (80082f4 <_strtod_l+0x58c>)
 80081a4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80081a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ac:	4640      	mov	r0, r8
 80081ae:	4649      	mov	r1, r9
 80081b0:	f7f8 fb5c 	bl	800086c <__aeabi_ddiv>
 80081b4:	e7d6      	b.n	8008164 <_strtod_l+0x3fc>
 80081b6:	9b08      	ldr	r3, [sp, #32]
 80081b8:	1b75      	subs	r5, r6, r5
 80081ba:	441d      	add	r5, r3
 80081bc:	2d00      	cmp	r5, #0
 80081be:	dd70      	ble.n	80082a2 <_strtod_l+0x53a>
 80081c0:	f015 030f 	ands.w	r3, r5, #15
 80081c4:	d00a      	beq.n	80081dc <_strtod_l+0x474>
 80081c6:	494b      	ldr	r1, [pc, #300]	; (80082f4 <_strtod_l+0x58c>)
 80081c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80081cc:	4642      	mov	r2, r8
 80081ce:	464b      	mov	r3, r9
 80081d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081d4:	f7f8 fa20 	bl	8000618 <__aeabi_dmul>
 80081d8:	4680      	mov	r8, r0
 80081da:	4689      	mov	r9, r1
 80081dc:	f035 050f 	bics.w	r5, r5, #15
 80081e0:	d04d      	beq.n	800827e <_strtod_l+0x516>
 80081e2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80081e6:	dd22      	ble.n	800822e <_strtod_l+0x4c6>
 80081e8:	2500      	movs	r5, #0
 80081ea:	46ab      	mov	fp, r5
 80081ec:	9509      	str	r5, [sp, #36]	; 0x24
 80081ee:	9505      	str	r5, [sp, #20]
 80081f0:	2322      	movs	r3, #34	; 0x22
 80081f2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80082fc <_strtod_l+0x594>
 80081f6:	6023      	str	r3, [r4, #0]
 80081f8:	f04f 0800 	mov.w	r8, #0
 80081fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f43f aded 	beq.w	8007dde <_strtod_l+0x76>
 8008204:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008206:	4620      	mov	r0, r4
 8008208:	f7ff f924 	bl	8007454 <_Bfree>
 800820c:	9905      	ldr	r1, [sp, #20]
 800820e:	4620      	mov	r0, r4
 8008210:	f7ff f920 	bl	8007454 <_Bfree>
 8008214:	4659      	mov	r1, fp
 8008216:	4620      	mov	r0, r4
 8008218:	f7ff f91c 	bl	8007454 <_Bfree>
 800821c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800821e:	4620      	mov	r0, r4
 8008220:	f7ff f918 	bl	8007454 <_Bfree>
 8008224:	4629      	mov	r1, r5
 8008226:	4620      	mov	r0, r4
 8008228:	f7ff f914 	bl	8007454 <_Bfree>
 800822c:	e5d7      	b.n	8007dde <_strtod_l+0x76>
 800822e:	4b32      	ldr	r3, [pc, #200]	; (80082f8 <_strtod_l+0x590>)
 8008230:	9304      	str	r3, [sp, #16]
 8008232:	2300      	movs	r3, #0
 8008234:	112d      	asrs	r5, r5, #4
 8008236:	4640      	mov	r0, r8
 8008238:	4649      	mov	r1, r9
 800823a:	469a      	mov	sl, r3
 800823c:	2d01      	cmp	r5, #1
 800823e:	dc21      	bgt.n	8008284 <_strtod_l+0x51c>
 8008240:	b10b      	cbz	r3, 8008246 <_strtod_l+0x4de>
 8008242:	4680      	mov	r8, r0
 8008244:	4689      	mov	r9, r1
 8008246:	492c      	ldr	r1, [pc, #176]	; (80082f8 <_strtod_l+0x590>)
 8008248:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800824c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008250:	4642      	mov	r2, r8
 8008252:	464b      	mov	r3, r9
 8008254:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008258:	f7f8 f9de 	bl	8000618 <__aeabi_dmul>
 800825c:	4b27      	ldr	r3, [pc, #156]	; (80082fc <_strtod_l+0x594>)
 800825e:	460a      	mov	r2, r1
 8008260:	400b      	ands	r3, r1
 8008262:	4927      	ldr	r1, [pc, #156]	; (8008300 <_strtod_l+0x598>)
 8008264:	428b      	cmp	r3, r1
 8008266:	4680      	mov	r8, r0
 8008268:	d8be      	bhi.n	80081e8 <_strtod_l+0x480>
 800826a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800826e:	428b      	cmp	r3, r1
 8008270:	bf86      	itte	hi
 8008272:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008304 <_strtod_l+0x59c>
 8008276:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800827a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800827e:	2300      	movs	r3, #0
 8008280:	9304      	str	r3, [sp, #16]
 8008282:	e07b      	b.n	800837c <_strtod_l+0x614>
 8008284:	07ea      	lsls	r2, r5, #31
 8008286:	d505      	bpl.n	8008294 <_strtod_l+0x52c>
 8008288:	9b04      	ldr	r3, [sp, #16]
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	f7f8 f9c3 	bl	8000618 <__aeabi_dmul>
 8008292:	2301      	movs	r3, #1
 8008294:	9a04      	ldr	r2, [sp, #16]
 8008296:	3208      	adds	r2, #8
 8008298:	f10a 0a01 	add.w	sl, sl, #1
 800829c:	106d      	asrs	r5, r5, #1
 800829e:	9204      	str	r2, [sp, #16]
 80082a0:	e7cc      	b.n	800823c <_strtod_l+0x4d4>
 80082a2:	d0ec      	beq.n	800827e <_strtod_l+0x516>
 80082a4:	426d      	negs	r5, r5
 80082a6:	f015 020f 	ands.w	r2, r5, #15
 80082aa:	d00a      	beq.n	80082c2 <_strtod_l+0x55a>
 80082ac:	4b11      	ldr	r3, [pc, #68]	; (80082f4 <_strtod_l+0x58c>)
 80082ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082b2:	4640      	mov	r0, r8
 80082b4:	4649      	mov	r1, r9
 80082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ba:	f7f8 fad7 	bl	800086c <__aeabi_ddiv>
 80082be:	4680      	mov	r8, r0
 80082c0:	4689      	mov	r9, r1
 80082c2:	112d      	asrs	r5, r5, #4
 80082c4:	d0db      	beq.n	800827e <_strtod_l+0x516>
 80082c6:	2d1f      	cmp	r5, #31
 80082c8:	dd1e      	ble.n	8008308 <_strtod_l+0x5a0>
 80082ca:	2500      	movs	r5, #0
 80082cc:	46ab      	mov	fp, r5
 80082ce:	9509      	str	r5, [sp, #36]	; 0x24
 80082d0:	9505      	str	r5, [sp, #20]
 80082d2:	2322      	movs	r3, #34	; 0x22
 80082d4:	f04f 0800 	mov.w	r8, #0
 80082d8:	f04f 0900 	mov.w	r9, #0
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	e78d      	b.n	80081fc <_strtod_l+0x494>
 80082e0:	08009df5 	.word	0x08009df5
 80082e4:	0800a01c 	.word	0x0800a01c
 80082e8:	08009ded 	.word	0x08009ded
 80082ec:	08009e24 	.word	0x08009e24
 80082f0:	0800a1ad 	.word	0x0800a1ad
 80082f4:	08009f30 	.word	0x08009f30
 80082f8:	08009f08 	.word	0x08009f08
 80082fc:	7ff00000 	.word	0x7ff00000
 8008300:	7ca00000 	.word	0x7ca00000
 8008304:	7fefffff 	.word	0x7fefffff
 8008308:	f015 0310 	ands.w	r3, r5, #16
 800830c:	bf18      	it	ne
 800830e:	236a      	movne	r3, #106	; 0x6a
 8008310:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80086b4 <_strtod_l+0x94c>
 8008314:	9304      	str	r3, [sp, #16]
 8008316:	4640      	mov	r0, r8
 8008318:	4649      	mov	r1, r9
 800831a:	2300      	movs	r3, #0
 800831c:	07ea      	lsls	r2, r5, #31
 800831e:	d504      	bpl.n	800832a <_strtod_l+0x5c2>
 8008320:	e9da 2300 	ldrd	r2, r3, [sl]
 8008324:	f7f8 f978 	bl	8000618 <__aeabi_dmul>
 8008328:	2301      	movs	r3, #1
 800832a:	106d      	asrs	r5, r5, #1
 800832c:	f10a 0a08 	add.w	sl, sl, #8
 8008330:	d1f4      	bne.n	800831c <_strtod_l+0x5b4>
 8008332:	b10b      	cbz	r3, 8008338 <_strtod_l+0x5d0>
 8008334:	4680      	mov	r8, r0
 8008336:	4689      	mov	r9, r1
 8008338:	9b04      	ldr	r3, [sp, #16]
 800833a:	b1bb      	cbz	r3, 800836c <_strtod_l+0x604>
 800833c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008340:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008344:	2b00      	cmp	r3, #0
 8008346:	4649      	mov	r1, r9
 8008348:	dd10      	ble.n	800836c <_strtod_l+0x604>
 800834a:	2b1f      	cmp	r3, #31
 800834c:	f340 811e 	ble.w	800858c <_strtod_l+0x824>
 8008350:	2b34      	cmp	r3, #52	; 0x34
 8008352:	bfde      	ittt	le
 8008354:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8008358:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800835c:	4093      	lslle	r3, r2
 800835e:	f04f 0800 	mov.w	r8, #0
 8008362:	bfcc      	ite	gt
 8008364:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008368:	ea03 0901 	andle.w	r9, r3, r1
 800836c:	2200      	movs	r2, #0
 800836e:	2300      	movs	r3, #0
 8008370:	4640      	mov	r0, r8
 8008372:	4649      	mov	r1, r9
 8008374:	f7f8 fbb8 	bl	8000ae8 <__aeabi_dcmpeq>
 8008378:	2800      	cmp	r0, #0
 800837a:	d1a6      	bne.n	80082ca <_strtod_l+0x562>
 800837c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008382:	4633      	mov	r3, r6
 8008384:	465a      	mov	r2, fp
 8008386:	4620      	mov	r0, r4
 8008388:	f7ff f8cc 	bl	8007524 <__s2b>
 800838c:	9009      	str	r0, [sp, #36]	; 0x24
 800838e:	2800      	cmp	r0, #0
 8008390:	f43f af2a 	beq.w	80081e8 <_strtod_l+0x480>
 8008394:	9a08      	ldr	r2, [sp, #32]
 8008396:	9b05      	ldr	r3, [sp, #20]
 8008398:	2a00      	cmp	r2, #0
 800839a:	eba3 0307 	sub.w	r3, r3, r7
 800839e:	bfa8      	it	ge
 80083a0:	2300      	movge	r3, #0
 80083a2:	930c      	str	r3, [sp, #48]	; 0x30
 80083a4:	2500      	movs	r5, #0
 80083a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80083aa:	9312      	str	r3, [sp, #72]	; 0x48
 80083ac:	46ab      	mov	fp, r5
 80083ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b0:	4620      	mov	r0, r4
 80083b2:	6859      	ldr	r1, [r3, #4]
 80083b4:	f7ff f80e 	bl	80073d4 <_Balloc>
 80083b8:	9005      	str	r0, [sp, #20]
 80083ba:	2800      	cmp	r0, #0
 80083bc:	f43f af18 	beq.w	80081f0 <_strtod_l+0x488>
 80083c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c2:	691a      	ldr	r2, [r3, #16]
 80083c4:	3202      	adds	r2, #2
 80083c6:	f103 010c 	add.w	r1, r3, #12
 80083ca:	0092      	lsls	r2, r2, #2
 80083cc:	300c      	adds	r0, #12
 80083ce:	f000 fd87 	bl	8008ee0 <memcpy>
 80083d2:	ec49 8b10 	vmov	d0, r8, r9
 80083d6:	aa18      	add	r2, sp, #96	; 0x60
 80083d8:	a917      	add	r1, sp, #92	; 0x5c
 80083da:	4620      	mov	r0, r4
 80083dc:	f7ff fbd6 	bl	8007b8c <__d2b>
 80083e0:	ec49 8b18 	vmov	d8, r8, r9
 80083e4:	9016      	str	r0, [sp, #88]	; 0x58
 80083e6:	2800      	cmp	r0, #0
 80083e8:	f43f af02 	beq.w	80081f0 <_strtod_l+0x488>
 80083ec:	2101      	movs	r1, #1
 80083ee:	4620      	mov	r0, r4
 80083f0:	f7ff f930 	bl	8007654 <__i2b>
 80083f4:	4683      	mov	fp, r0
 80083f6:	2800      	cmp	r0, #0
 80083f8:	f43f aefa 	beq.w	80081f0 <_strtod_l+0x488>
 80083fc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80083fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008400:	2e00      	cmp	r6, #0
 8008402:	bfab      	itete	ge
 8008404:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008406:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008408:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800840a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800840e:	bfac      	ite	ge
 8008410:	eb06 0a03 	addge.w	sl, r6, r3
 8008414:	1b9f      	sublt	r7, r3, r6
 8008416:	9b04      	ldr	r3, [sp, #16]
 8008418:	1af6      	subs	r6, r6, r3
 800841a:	4416      	add	r6, r2
 800841c:	4ba0      	ldr	r3, [pc, #640]	; (80086a0 <_strtod_l+0x938>)
 800841e:	3e01      	subs	r6, #1
 8008420:	429e      	cmp	r6, r3
 8008422:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008426:	f280 80c4 	bge.w	80085b2 <_strtod_l+0x84a>
 800842a:	1b9b      	subs	r3, r3, r6
 800842c:	2b1f      	cmp	r3, #31
 800842e:	eba2 0203 	sub.w	r2, r2, r3
 8008432:	f04f 0101 	mov.w	r1, #1
 8008436:	f300 80b0 	bgt.w	800859a <_strtod_l+0x832>
 800843a:	fa01 f303 	lsl.w	r3, r1, r3
 800843e:	930e      	str	r3, [sp, #56]	; 0x38
 8008440:	2300      	movs	r3, #0
 8008442:	930d      	str	r3, [sp, #52]	; 0x34
 8008444:	eb0a 0602 	add.w	r6, sl, r2
 8008448:	9b04      	ldr	r3, [sp, #16]
 800844a:	45b2      	cmp	sl, r6
 800844c:	4417      	add	r7, r2
 800844e:	441f      	add	r7, r3
 8008450:	4653      	mov	r3, sl
 8008452:	bfa8      	it	ge
 8008454:	4633      	movge	r3, r6
 8008456:	42bb      	cmp	r3, r7
 8008458:	bfa8      	it	ge
 800845a:	463b      	movge	r3, r7
 800845c:	2b00      	cmp	r3, #0
 800845e:	bfc2      	ittt	gt
 8008460:	1af6      	subgt	r6, r6, r3
 8008462:	1aff      	subgt	r7, r7, r3
 8008464:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800846a:	2b00      	cmp	r3, #0
 800846c:	dd17      	ble.n	800849e <_strtod_l+0x736>
 800846e:	4659      	mov	r1, fp
 8008470:	461a      	mov	r2, r3
 8008472:	4620      	mov	r0, r4
 8008474:	f7ff f9ae 	bl	80077d4 <__pow5mult>
 8008478:	4683      	mov	fp, r0
 800847a:	2800      	cmp	r0, #0
 800847c:	f43f aeb8 	beq.w	80081f0 <_strtod_l+0x488>
 8008480:	4601      	mov	r1, r0
 8008482:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008484:	4620      	mov	r0, r4
 8008486:	f7ff f8fb 	bl	8007680 <__multiply>
 800848a:	900b      	str	r0, [sp, #44]	; 0x2c
 800848c:	2800      	cmp	r0, #0
 800848e:	f43f aeaf 	beq.w	80081f0 <_strtod_l+0x488>
 8008492:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008494:	4620      	mov	r0, r4
 8008496:	f7fe ffdd 	bl	8007454 <_Bfree>
 800849a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800849c:	9316      	str	r3, [sp, #88]	; 0x58
 800849e:	2e00      	cmp	r6, #0
 80084a0:	f300 808c 	bgt.w	80085bc <_strtod_l+0x854>
 80084a4:	9b08      	ldr	r3, [sp, #32]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	dd08      	ble.n	80084bc <_strtod_l+0x754>
 80084aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084ac:	9905      	ldr	r1, [sp, #20]
 80084ae:	4620      	mov	r0, r4
 80084b0:	f7ff f990 	bl	80077d4 <__pow5mult>
 80084b4:	9005      	str	r0, [sp, #20]
 80084b6:	2800      	cmp	r0, #0
 80084b8:	f43f ae9a 	beq.w	80081f0 <_strtod_l+0x488>
 80084bc:	2f00      	cmp	r7, #0
 80084be:	dd08      	ble.n	80084d2 <_strtod_l+0x76a>
 80084c0:	9905      	ldr	r1, [sp, #20]
 80084c2:	463a      	mov	r2, r7
 80084c4:	4620      	mov	r0, r4
 80084c6:	f7ff f9df 	bl	8007888 <__lshift>
 80084ca:	9005      	str	r0, [sp, #20]
 80084cc:	2800      	cmp	r0, #0
 80084ce:	f43f ae8f 	beq.w	80081f0 <_strtod_l+0x488>
 80084d2:	f1ba 0f00 	cmp.w	sl, #0
 80084d6:	dd08      	ble.n	80084ea <_strtod_l+0x782>
 80084d8:	4659      	mov	r1, fp
 80084da:	4652      	mov	r2, sl
 80084dc:	4620      	mov	r0, r4
 80084de:	f7ff f9d3 	bl	8007888 <__lshift>
 80084e2:	4683      	mov	fp, r0
 80084e4:	2800      	cmp	r0, #0
 80084e6:	f43f ae83 	beq.w	80081f0 <_strtod_l+0x488>
 80084ea:	9a05      	ldr	r2, [sp, #20]
 80084ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80084ee:	4620      	mov	r0, r4
 80084f0:	f7ff fa52 	bl	8007998 <__mdiff>
 80084f4:	4605      	mov	r5, r0
 80084f6:	2800      	cmp	r0, #0
 80084f8:	f43f ae7a 	beq.w	80081f0 <_strtod_l+0x488>
 80084fc:	68c3      	ldr	r3, [r0, #12]
 80084fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008500:	2300      	movs	r3, #0
 8008502:	60c3      	str	r3, [r0, #12]
 8008504:	4659      	mov	r1, fp
 8008506:	f7ff fa2b 	bl	8007960 <__mcmp>
 800850a:	2800      	cmp	r0, #0
 800850c:	da60      	bge.n	80085d0 <_strtod_l+0x868>
 800850e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008510:	ea53 0308 	orrs.w	r3, r3, r8
 8008514:	f040 8084 	bne.w	8008620 <_strtod_l+0x8b8>
 8008518:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800851c:	2b00      	cmp	r3, #0
 800851e:	d17f      	bne.n	8008620 <_strtod_l+0x8b8>
 8008520:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008524:	0d1b      	lsrs	r3, r3, #20
 8008526:	051b      	lsls	r3, r3, #20
 8008528:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800852c:	d978      	bls.n	8008620 <_strtod_l+0x8b8>
 800852e:	696b      	ldr	r3, [r5, #20]
 8008530:	b913      	cbnz	r3, 8008538 <_strtod_l+0x7d0>
 8008532:	692b      	ldr	r3, [r5, #16]
 8008534:	2b01      	cmp	r3, #1
 8008536:	dd73      	ble.n	8008620 <_strtod_l+0x8b8>
 8008538:	4629      	mov	r1, r5
 800853a:	2201      	movs	r2, #1
 800853c:	4620      	mov	r0, r4
 800853e:	f7ff f9a3 	bl	8007888 <__lshift>
 8008542:	4659      	mov	r1, fp
 8008544:	4605      	mov	r5, r0
 8008546:	f7ff fa0b 	bl	8007960 <__mcmp>
 800854a:	2800      	cmp	r0, #0
 800854c:	dd68      	ble.n	8008620 <_strtod_l+0x8b8>
 800854e:	9904      	ldr	r1, [sp, #16]
 8008550:	4a54      	ldr	r2, [pc, #336]	; (80086a4 <_strtod_l+0x93c>)
 8008552:	464b      	mov	r3, r9
 8008554:	2900      	cmp	r1, #0
 8008556:	f000 8084 	beq.w	8008662 <_strtod_l+0x8fa>
 800855a:	ea02 0109 	and.w	r1, r2, r9
 800855e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008562:	dc7e      	bgt.n	8008662 <_strtod_l+0x8fa>
 8008564:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008568:	f77f aeb3 	ble.w	80082d2 <_strtod_l+0x56a>
 800856c:	4b4e      	ldr	r3, [pc, #312]	; (80086a8 <_strtod_l+0x940>)
 800856e:	4640      	mov	r0, r8
 8008570:	4649      	mov	r1, r9
 8008572:	2200      	movs	r2, #0
 8008574:	f7f8 f850 	bl	8000618 <__aeabi_dmul>
 8008578:	4b4a      	ldr	r3, [pc, #296]	; (80086a4 <_strtod_l+0x93c>)
 800857a:	400b      	ands	r3, r1
 800857c:	4680      	mov	r8, r0
 800857e:	4689      	mov	r9, r1
 8008580:	2b00      	cmp	r3, #0
 8008582:	f47f ae3f 	bne.w	8008204 <_strtod_l+0x49c>
 8008586:	2322      	movs	r3, #34	; 0x22
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	e63b      	b.n	8008204 <_strtod_l+0x49c>
 800858c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008590:	fa02 f303 	lsl.w	r3, r2, r3
 8008594:	ea03 0808 	and.w	r8, r3, r8
 8008598:	e6e8      	b.n	800836c <_strtod_l+0x604>
 800859a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800859e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80085a2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80085a6:	36e2      	adds	r6, #226	; 0xe2
 80085a8:	fa01 f306 	lsl.w	r3, r1, r6
 80085ac:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80085b0:	e748      	b.n	8008444 <_strtod_l+0x6dc>
 80085b2:	2100      	movs	r1, #0
 80085b4:	2301      	movs	r3, #1
 80085b6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80085ba:	e743      	b.n	8008444 <_strtod_l+0x6dc>
 80085bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80085be:	4632      	mov	r2, r6
 80085c0:	4620      	mov	r0, r4
 80085c2:	f7ff f961 	bl	8007888 <__lshift>
 80085c6:	9016      	str	r0, [sp, #88]	; 0x58
 80085c8:	2800      	cmp	r0, #0
 80085ca:	f47f af6b 	bne.w	80084a4 <_strtod_l+0x73c>
 80085ce:	e60f      	b.n	80081f0 <_strtod_l+0x488>
 80085d0:	46ca      	mov	sl, r9
 80085d2:	d171      	bne.n	80086b8 <_strtod_l+0x950>
 80085d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085da:	b352      	cbz	r2, 8008632 <_strtod_l+0x8ca>
 80085dc:	4a33      	ldr	r2, [pc, #204]	; (80086ac <_strtod_l+0x944>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d12a      	bne.n	8008638 <_strtod_l+0x8d0>
 80085e2:	9b04      	ldr	r3, [sp, #16]
 80085e4:	4641      	mov	r1, r8
 80085e6:	b1fb      	cbz	r3, 8008628 <_strtod_l+0x8c0>
 80085e8:	4b2e      	ldr	r3, [pc, #184]	; (80086a4 <_strtod_l+0x93c>)
 80085ea:	ea09 0303 	and.w	r3, r9, r3
 80085ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80085f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085f6:	d81a      	bhi.n	800862e <_strtod_l+0x8c6>
 80085f8:	0d1b      	lsrs	r3, r3, #20
 80085fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008602:	4299      	cmp	r1, r3
 8008604:	d118      	bne.n	8008638 <_strtod_l+0x8d0>
 8008606:	4b2a      	ldr	r3, [pc, #168]	; (80086b0 <_strtod_l+0x948>)
 8008608:	459a      	cmp	sl, r3
 800860a:	d102      	bne.n	8008612 <_strtod_l+0x8aa>
 800860c:	3101      	adds	r1, #1
 800860e:	f43f adef 	beq.w	80081f0 <_strtod_l+0x488>
 8008612:	4b24      	ldr	r3, [pc, #144]	; (80086a4 <_strtod_l+0x93c>)
 8008614:	ea0a 0303 	and.w	r3, sl, r3
 8008618:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800861c:	f04f 0800 	mov.w	r8, #0
 8008620:	9b04      	ldr	r3, [sp, #16]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1a2      	bne.n	800856c <_strtod_l+0x804>
 8008626:	e5ed      	b.n	8008204 <_strtod_l+0x49c>
 8008628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800862c:	e7e9      	b.n	8008602 <_strtod_l+0x89a>
 800862e:	4613      	mov	r3, r2
 8008630:	e7e7      	b.n	8008602 <_strtod_l+0x89a>
 8008632:	ea53 0308 	orrs.w	r3, r3, r8
 8008636:	d08a      	beq.n	800854e <_strtod_l+0x7e6>
 8008638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800863a:	b1e3      	cbz	r3, 8008676 <_strtod_l+0x90e>
 800863c:	ea13 0f0a 	tst.w	r3, sl
 8008640:	d0ee      	beq.n	8008620 <_strtod_l+0x8b8>
 8008642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008644:	9a04      	ldr	r2, [sp, #16]
 8008646:	4640      	mov	r0, r8
 8008648:	4649      	mov	r1, r9
 800864a:	b1c3      	cbz	r3, 800867e <_strtod_l+0x916>
 800864c:	f7ff fb6f 	bl	8007d2e <sulp>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	ec51 0b18 	vmov	r0, r1, d8
 8008658:	f7f7 fe28 	bl	80002ac <__adddf3>
 800865c:	4680      	mov	r8, r0
 800865e:	4689      	mov	r9, r1
 8008660:	e7de      	b.n	8008620 <_strtod_l+0x8b8>
 8008662:	4013      	ands	r3, r2
 8008664:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008668:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800866c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008670:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008674:	e7d4      	b.n	8008620 <_strtod_l+0x8b8>
 8008676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008678:	ea13 0f08 	tst.w	r3, r8
 800867c:	e7e0      	b.n	8008640 <_strtod_l+0x8d8>
 800867e:	f7ff fb56 	bl	8007d2e <sulp>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	ec51 0b18 	vmov	r0, r1, d8
 800868a:	f7f7 fe0d 	bl	80002a8 <__aeabi_dsub>
 800868e:	2200      	movs	r2, #0
 8008690:	2300      	movs	r3, #0
 8008692:	4680      	mov	r8, r0
 8008694:	4689      	mov	r9, r1
 8008696:	f7f8 fa27 	bl	8000ae8 <__aeabi_dcmpeq>
 800869a:	2800      	cmp	r0, #0
 800869c:	d0c0      	beq.n	8008620 <_strtod_l+0x8b8>
 800869e:	e618      	b.n	80082d2 <_strtod_l+0x56a>
 80086a0:	fffffc02 	.word	0xfffffc02
 80086a4:	7ff00000 	.word	0x7ff00000
 80086a8:	39500000 	.word	0x39500000
 80086ac:	000fffff 	.word	0x000fffff
 80086b0:	7fefffff 	.word	0x7fefffff
 80086b4:	0800a030 	.word	0x0800a030
 80086b8:	4659      	mov	r1, fp
 80086ba:	4628      	mov	r0, r5
 80086bc:	f7ff fac0 	bl	8007c40 <__ratio>
 80086c0:	ec57 6b10 	vmov	r6, r7, d0
 80086c4:	ee10 0a10 	vmov	r0, s0
 80086c8:	2200      	movs	r2, #0
 80086ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80086ce:	4639      	mov	r1, r7
 80086d0:	f7f8 fa1e 	bl	8000b10 <__aeabi_dcmple>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d071      	beq.n	80087bc <_strtod_l+0xa54>
 80086d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d17c      	bne.n	80087d8 <_strtod_l+0xa70>
 80086de:	f1b8 0f00 	cmp.w	r8, #0
 80086e2:	d15a      	bne.n	800879a <_strtod_l+0xa32>
 80086e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d15d      	bne.n	80087a8 <_strtod_l+0xa40>
 80086ec:	4b90      	ldr	r3, [pc, #576]	; (8008930 <_strtod_l+0xbc8>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	4630      	mov	r0, r6
 80086f2:	4639      	mov	r1, r7
 80086f4:	f7f8 fa02 	bl	8000afc <__aeabi_dcmplt>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	d15c      	bne.n	80087b6 <_strtod_l+0xa4e>
 80086fc:	4630      	mov	r0, r6
 80086fe:	4639      	mov	r1, r7
 8008700:	4b8c      	ldr	r3, [pc, #560]	; (8008934 <_strtod_l+0xbcc>)
 8008702:	2200      	movs	r2, #0
 8008704:	f7f7 ff88 	bl	8000618 <__aeabi_dmul>
 8008708:	4606      	mov	r6, r0
 800870a:	460f      	mov	r7, r1
 800870c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008710:	9606      	str	r6, [sp, #24]
 8008712:	9307      	str	r3, [sp, #28]
 8008714:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008718:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800871c:	4b86      	ldr	r3, [pc, #536]	; (8008938 <_strtod_l+0xbd0>)
 800871e:	ea0a 0303 	and.w	r3, sl, r3
 8008722:	930d      	str	r3, [sp, #52]	; 0x34
 8008724:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008726:	4b85      	ldr	r3, [pc, #532]	; (800893c <_strtod_l+0xbd4>)
 8008728:	429a      	cmp	r2, r3
 800872a:	f040 8090 	bne.w	800884e <_strtod_l+0xae6>
 800872e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008732:	ec49 8b10 	vmov	d0, r8, r9
 8008736:	f7ff f9b9 	bl	8007aac <__ulp>
 800873a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800873e:	ec51 0b10 	vmov	r0, r1, d0
 8008742:	f7f7 ff69 	bl	8000618 <__aeabi_dmul>
 8008746:	4642      	mov	r2, r8
 8008748:	464b      	mov	r3, r9
 800874a:	f7f7 fdaf 	bl	80002ac <__adddf3>
 800874e:	460b      	mov	r3, r1
 8008750:	4979      	ldr	r1, [pc, #484]	; (8008938 <_strtod_l+0xbd0>)
 8008752:	4a7b      	ldr	r2, [pc, #492]	; (8008940 <_strtod_l+0xbd8>)
 8008754:	4019      	ands	r1, r3
 8008756:	4291      	cmp	r1, r2
 8008758:	4680      	mov	r8, r0
 800875a:	d944      	bls.n	80087e6 <_strtod_l+0xa7e>
 800875c:	ee18 2a90 	vmov	r2, s17
 8008760:	4b78      	ldr	r3, [pc, #480]	; (8008944 <_strtod_l+0xbdc>)
 8008762:	429a      	cmp	r2, r3
 8008764:	d104      	bne.n	8008770 <_strtod_l+0xa08>
 8008766:	ee18 3a10 	vmov	r3, s16
 800876a:	3301      	adds	r3, #1
 800876c:	f43f ad40 	beq.w	80081f0 <_strtod_l+0x488>
 8008770:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008944 <_strtod_l+0xbdc>
 8008774:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008778:	9916      	ldr	r1, [sp, #88]	; 0x58
 800877a:	4620      	mov	r0, r4
 800877c:	f7fe fe6a 	bl	8007454 <_Bfree>
 8008780:	9905      	ldr	r1, [sp, #20]
 8008782:	4620      	mov	r0, r4
 8008784:	f7fe fe66 	bl	8007454 <_Bfree>
 8008788:	4659      	mov	r1, fp
 800878a:	4620      	mov	r0, r4
 800878c:	f7fe fe62 	bl	8007454 <_Bfree>
 8008790:	4629      	mov	r1, r5
 8008792:	4620      	mov	r0, r4
 8008794:	f7fe fe5e 	bl	8007454 <_Bfree>
 8008798:	e609      	b.n	80083ae <_strtod_l+0x646>
 800879a:	f1b8 0f01 	cmp.w	r8, #1
 800879e:	d103      	bne.n	80087a8 <_strtod_l+0xa40>
 80087a0:	f1b9 0f00 	cmp.w	r9, #0
 80087a4:	f43f ad95 	beq.w	80082d2 <_strtod_l+0x56a>
 80087a8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008900 <_strtod_l+0xb98>
 80087ac:	4f60      	ldr	r7, [pc, #384]	; (8008930 <_strtod_l+0xbc8>)
 80087ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80087b2:	2600      	movs	r6, #0
 80087b4:	e7ae      	b.n	8008714 <_strtod_l+0x9ac>
 80087b6:	4f5f      	ldr	r7, [pc, #380]	; (8008934 <_strtod_l+0xbcc>)
 80087b8:	2600      	movs	r6, #0
 80087ba:	e7a7      	b.n	800870c <_strtod_l+0x9a4>
 80087bc:	4b5d      	ldr	r3, [pc, #372]	; (8008934 <_strtod_l+0xbcc>)
 80087be:	4630      	mov	r0, r6
 80087c0:	4639      	mov	r1, r7
 80087c2:	2200      	movs	r2, #0
 80087c4:	f7f7 ff28 	bl	8000618 <__aeabi_dmul>
 80087c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087ca:	4606      	mov	r6, r0
 80087cc:	460f      	mov	r7, r1
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d09c      	beq.n	800870c <_strtod_l+0x9a4>
 80087d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80087d6:	e79d      	b.n	8008714 <_strtod_l+0x9ac>
 80087d8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008908 <_strtod_l+0xba0>
 80087dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80087e0:	ec57 6b17 	vmov	r6, r7, d7
 80087e4:	e796      	b.n	8008714 <_strtod_l+0x9ac>
 80087e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80087ea:	9b04      	ldr	r3, [sp, #16]
 80087ec:	46ca      	mov	sl, r9
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1c2      	bne.n	8008778 <_strtod_l+0xa10>
 80087f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087f8:	0d1b      	lsrs	r3, r3, #20
 80087fa:	051b      	lsls	r3, r3, #20
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d1bb      	bne.n	8008778 <_strtod_l+0xa10>
 8008800:	4630      	mov	r0, r6
 8008802:	4639      	mov	r1, r7
 8008804:	f7f8 fa68 	bl	8000cd8 <__aeabi_d2lz>
 8008808:	f7f7 fed8 	bl	80005bc <__aeabi_l2d>
 800880c:	4602      	mov	r2, r0
 800880e:	460b      	mov	r3, r1
 8008810:	4630      	mov	r0, r6
 8008812:	4639      	mov	r1, r7
 8008814:	f7f7 fd48 	bl	80002a8 <__aeabi_dsub>
 8008818:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800881a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800881e:	ea43 0308 	orr.w	r3, r3, r8
 8008822:	4313      	orrs	r3, r2
 8008824:	4606      	mov	r6, r0
 8008826:	460f      	mov	r7, r1
 8008828:	d054      	beq.n	80088d4 <_strtod_l+0xb6c>
 800882a:	a339      	add	r3, pc, #228	; (adr r3, 8008910 <_strtod_l+0xba8>)
 800882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008830:	f7f8 f964 	bl	8000afc <__aeabi_dcmplt>
 8008834:	2800      	cmp	r0, #0
 8008836:	f47f ace5 	bne.w	8008204 <_strtod_l+0x49c>
 800883a:	a337      	add	r3, pc, #220	; (adr r3, 8008918 <_strtod_l+0xbb0>)
 800883c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008840:	4630      	mov	r0, r6
 8008842:	4639      	mov	r1, r7
 8008844:	f7f8 f978 	bl	8000b38 <__aeabi_dcmpgt>
 8008848:	2800      	cmp	r0, #0
 800884a:	d095      	beq.n	8008778 <_strtod_l+0xa10>
 800884c:	e4da      	b.n	8008204 <_strtod_l+0x49c>
 800884e:	9b04      	ldr	r3, [sp, #16]
 8008850:	b333      	cbz	r3, 80088a0 <_strtod_l+0xb38>
 8008852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008854:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008858:	d822      	bhi.n	80088a0 <_strtod_l+0xb38>
 800885a:	a331      	add	r3, pc, #196	; (adr r3, 8008920 <_strtod_l+0xbb8>)
 800885c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008860:	4630      	mov	r0, r6
 8008862:	4639      	mov	r1, r7
 8008864:	f7f8 f954 	bl	8000b10 <__aeabi_dcmple>
 8008868:	b1a0      	cbz	r0, 8008894 <_strtod_l+0xb2c>
 800886a:	4639      	mov	r1, r7
 800886c:	4630      	mov	r0, r6
 800886e:	f7f8 f9ab 	bl	8000bc8 <__aeabi_d2uiz>
 8008872:	2801      	cmp	r0, #1
 8008874:	bf38      	it	cc
 8008876:	2001      	movcc	r0, #1
 8008878:	f7f7 fe54 	bl	8000524 <__aeabi_ui2d>
 800887c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800887e:	4606      	mov	r6, r0
 8008880:	460f      	mov	r7, r1
 8008882:	bb23      	cbnz	r3, 80088ce <_strtod_l+0xb66>
 8008884:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008888:	9010      	str	r0, [sp, #64]	; 0x40
 800888a:	9311      	str	r3, [sp, #68]	; 0x44
 800888c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008890:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008894:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008896:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008898:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800889c:	1a9b      	subs	r3, r3, r2
 800889e:	930f      	str	r3, [sp, #60]	; 0x3c
 80088a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80088a4:	eeb0 0a48 	vmov.f32	s0, s16
 80088a8:	eef0 0a68 	vmov.f32	s1, s17
 80088ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80088b0:	f7ff f8fc 	bl	8007aac <__ulp>
 80088b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80088b8:	ec53 2b10 	vmov	r2, r3, d0
 80088bc:	f7f7 feac 	bl	8000618 <__aeabi_dmul>
 80088c0:	ec53 2b18 	vmov	r2, r3, d8
 80088c4:	f7f7 fcf2 	bl	80002ac <__adddf3>
 80088c8:	4680      	mov	r8, r0
 80088ca:	4689      	mov	r9, r1
 80088cc:	e78d      	b.n	80087ea <_strtod_l+0xa82>
 80088ce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80088d2:	e7db      	b.n	800888c <_strtod_l+0xb24>
 80088d4:	a314      	add	r3, pc, #80	; (adr r3, 8008928 <_strtod_l+0xbc0>)
 80088d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088da:	f7f8 f90f 	bl	8000afc <__aeabi_dcmplt>
 80088de:	e7b3      	b.n	8008848 <_strtod_l+0xae0>
 80088e0:	2300      	movs	r3, #0
 80088e2:	930a      	str	r3, [sp, #40]	; 0x28
 80088e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088e8:	6013      	str	r3, [r2, #0]
 80088ea:	f7ff ba7c 	b.w	8007de6 <_strtod_l+0x7e>
 80088ee:	2a65      	cmp	r2, #101	; 0x65
 80088f0:	f43f ab75 	beq.w	8007fde <_strtod_l+0x276>
 80088f4:	2a45      	cmp	r2, #69	; 0x45
 80088f6:	f43f ab72 	beq.w	8007fde <_strtod_l+0x276>
 80088fa:	2301      	movs	r3, #1
 80088fc:	f7ff bbaa 	b.w	8008054 <_strtod_l+0x2ec>
 8008900:	00000000 	.word	0x00000000
 8008904:	bff00000 	.word	0xbff00000
 8008908:	00000000 	.word	0x00000000
 800890c:	3ff00000 	.word	0x3ff00000
 8008910:	94a03595 	.word	0x94a03595
 8008914:	3fdfffff 	.word	0x3fdfffff
 8008918:	35afe535 	.word	0x35afe535
 800891c:	3fe00000 	.word	0x3fe00000
 8008920:	ffc00000 	.word	0xffc00000
 8008924:	41dfffff 	.word	0x41dfffff
 8008928:	94a03595 	.word	0x94a03595
 800892c:	3fcfffff 	.word	0x3fcfffff
 8008930:	3ff00000 	.word	0x3ff00000
 8008934:	3fe00000 	.word	0x3fe00000
 8008938:	7ff00000 	.word	0x7ff00000
 800893c:	7fe00000 	.word	0x7fe00000
 8008940:	7c9fffff 	.word	0x7c9fffff
 8008944:	7fefffff 	.word	0x7fefffff

08008948 <_strtod_r>:
 8008948:	4b01      	ldr	r3, [pc, #4]	; (8008950 <_strtod_r+0x8>)
 800894a:	f7ff ba0d 	b.w	8007d68 <_strtod_l>
 800894e:	bf00      	nop
 8008950:	200000a0 	.word	0x200000a0

08008954 <_strtol_l.constprop.0>:
 8008954:	2b01      	cmp	r3, #1
 8008956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800895a:	d001      	beq.n	8008960 <_strtol_l.constprop.0+0xc>
 800895c:	2b24      	cmp	r3, #36	; 0x24
 800895e:	d906      	bls.n	800896e <_strtol_l.constprop.0+0x1a>
 8008960:	f7fd fd8a 	bl	8006478 <__errno>
 8008964:	2316      	movs	r3, #22
 8008966:	6003      	str	r3, [r0, #0]
 8008968:	2000      	movs	r0, #0
 800896a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800896e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008a54 <_strtol_l.constprop.0+0x100>
 8008972:	460d      	mov	r5, r1
 8008974:	462e      	mov	r6, r5
 8008976:	f815 4b01 	ldrb.w	r4, [r5], #1
 800897a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800897e:	f017 0708 	ands.w	r7, r7, #8
 8008982:	d1f7      	bne.n	8008974 <_strtol_l.constprop.0+0x20>
 8008984:	2c2d      	cmp	r4, #45	; 0x2d
 8008986:	d132      	bne.n	80089ee <_strtol_l.constprop.0+0x9a>
 8008988:	782c      	ldrb	r4, [r5, #0]
 800898a:	2701      	movs	r7, #1
 800898c:	1cb5      	adds	r5, r6, #2
 800898e:	2b00      	cmp	r3, #0
 8008990:	d05b      	beq.n	8008a4a <_strtol_l.constprop.0+0xf6>
 8008992:	2b10      	cmp	r3, #16
 8008994:	d109      	bne.n	80089aa <_strtol_l.constprop.0+0x56>
 8008996:	2c30      	cmp	r4, #48	; 0x30
 8008998:	d107      	bne.n	80089aa <_strtol_l.constprop.0+0x56>
 800899a:	782c      	ldrb	r4, [r5, #0]
 800899c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80089a0:	2c58      	cmp	r4, #88	; 0x58
 80089a2:	d14d      	bne.n	8008a40 <_strtol_l.constprop.0+0xec>
 80089a4:	786c      	ldrb	r4, [r5, #1]
 80089a6:	2310      	movs	r3, #16
 80089a8:	3502      	adds	r5, #2
 80089aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80089ae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80089b2:	f04f 0e00 	mov.w	lr, #0
 80089b6:	fbb8 f9f3 	udiv	r9, r8, r3
 80089ba:	4676      	mov	r6, lr
 80089bc:	fb03 8a19 	mls	sl, r3, r9, r8
 80089c0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80089c4:	f1bc 0f09 	cmp.w	ip, #9
 80089c8:	d816      	bhi.n	80089f8 <_strtol_l.constprop.0+0xa4>
 80089ca:	4664      	mov	r4, ip
 80089cc:	42a3      	cmp	r3, r4
 80089ce:	dd24      	ble.n	8008a1a <_strtol_l.constprop.0+0xc6>
 80089d0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80089d4:	d008      	beq.n	80089e8 <_strtol_l.constprop.0+0x94>
 80089d6:	45b1      	cmp	r9, r6
 80089d8:	d31c      	bcc.n	8008a14 <_strtol_l.constprop.0+0xc0>
 80089da:	d101      	bne.n	80089e0 <_strtol_l.constprop.0+0x8c>
 80089dc:	45a2      	cmp	sl, r4
 80089de:	db19      	blt.n	8008a14 <_strtol_l.constprop.0+0xc0>
 80089e0:	fb06 4603 	mla	r6, r6, r3, r4
 80089e4:	f04f 0e01 	mov.w	lr, #1
 80089e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089ec:	e7e8      	b.n	80089c0 <_strtol_l.constprop.0+0x6c>
 80089ee:	2c2b      	cmp	r4, #43	; 0x2b
 80089f0:	bf04      	itt	eq
 80089f2:	782c      	ldrbeq	r4, [r5, #0]
 80089f4:	1cb5      	addeq	r5, r6, #2
 80089f6:	e7ca      	b.n	800898e <_strtol_l.constprop.0+0x3a>
 80089f8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80089fc:	f1bc 0f19 	cmp.w	ip, #25
 8008a00:	d801      	bhi.n	8008a06 <_strtol_l.constprop.0+0xb2>
 8008a02:	3c37      	subs	r4, #55	; 0x37
 8008a04:	e7e2      	b.n	80089cc <_strtol_l.constprop.0+0x78>
 8008a06:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008a0a:	f1bc 0f19 	cmp.w	ip, #25
 8008a0e:	d804      	bhi.n	8008a1a <_strtol_l.constprop.0+0xc6>
 8008a10:	3c57      	subs	r4, #87	; 0x57
 8008a12:	e7db      	b.n	80089cc <_strtol_l.constprop.0+0x78>
 8008a14:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8008a18:	e7e6      	b.n	80089e8 <_strtol_l.constprop.0+0x94>
 8008a1a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8008a1e:	d105      	bne.n	8008a2c <_strtol_l.constprop.0+0xd8>
 8008a20:	2322      	movs	r3, #34	; 0x22
 8008a22:	6003      	str	r3, [r0, #0]
 8008a24:	4646      	mov	r6, r8
 8008a26:	b942      	cbnz	r2, 8008a3a <_strtol_l.constprop.0+0xe6>
 8008a28:	4630      	mov	r0, r6
 8008a2a:	e79e      	b.n	800896a <_strtol_l.constprop.0+0x16>
 8008a2c:	b107      	cbz	r7, 8008a30 <_strtol_l.constprop.0+0xdc>
 8008a2e:	4276      	negs	r6, r6
 8008a30:	2a00      	cmp	r2, #0
 8008a32:	d0f9      	beq.n	8008a28 <_strtol_l.constprop.0+0xd4>
 8008a34:	f1be 0f00 	cmp.w	lr, #0
 8008a38:	d000      	beq.n	8008a3c <_strtol_l.constprop.0+0xe8>
 8008a3a:	1e69      	subs	r1, r5, #1
 8008a3c:	6011      	str	r1, [r2, #0]
 8008a3e:	e7f3      	b.n	8008a28 <_strtol_l.constprop.0+0xd4>
 8008a40:	2430      	movs	r4, #48	; 0x30
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1b1      	bne.n	80089aa <_strtol_l.constprop.0+0x56>
 8008a46:	2308      	movs	r3, #8
 8008a48:	e7af      	b.n	80089aa <_strtol_l.constprop.0+0x56>
 8008a4a:	2c30      	cmp	r4, #48	; 0x30
 8008a4c:	d0a5      	beq.n	800899a <_strtol_l.constprop.0+0x46>
 8008a4e:	230a      	movs	r3, #10
 8008a50:	e7ab      	b.n	80089aa <_strtol_l.constprop.0+0x56>
 8008a52:	bf00      	nop
 8008a54:	0800a059 	.word	0x0800a059

08008a58 <_strtol_r>:
 8008a58:	f7ff bf7c 	b.w	8008954 <_strtol_l.constprop.0>

08008a5c <__ssputs_r>:
 8008a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a60:	688e      	ldr	r6, [r1, #8]
 8008a62:	461f      	mov	r7, r3
 8008a64:	42be      	cmp	r6, r7
 8008a66:	680b      	ldr	r3, [r1, #0]
 8008a68:	4682      	mov	sl, r0
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	4690      	mov	r8, r2
 8008a6e:	d82c      	bhi.n	8008aca <__ssputs_r+0x6e>
 8008a70:	898a      	ldrh	r2, [r1, #12]
 8008a72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a76:	d026      	beq.n	8008ac6 <__ssputs_r+0x6a>
 8008a78:	6965      	ldr	r5, [r4, #20]
 8008a7a:	6909      	ldr	r1, [r1, #16]
 8008a7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a80:	eba3 0901 	sub.w	r9, r3, r1
 8008a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a88:	1c7b      	adds	r3, r7, #1
 8008a8a:	444b      	add	r3, r9
 8008a8c:	106d      	asrs	r5, r5, #1
 8008a8e:	429d      	cmp	r5, r3
 8008a90:	bf38      	it	cc
 8008a92:	461d      	movcc	r5, r3
 8008a94:	0553      	lsls	r3, r2, #21
 8008a96:	d527      	bpl.n	8008ae8 <__ssputs_r+0x8c>
 8008a98:	4629      	mov	r1, r5
 8008a9a:	f7fe fc0f 	bl	80072bc <_malloc_r>
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	b360      	cbz	r0, 8008afc <__ssputs_r+0xa0>
 8008aa2:	6921      	ldr	r1, [r4, #16]
 8008aa4:	464a      	mov	r2, r9
 8008aa6:	f000 fa1b 	bl	8008ee0 <memcpy>
 8008aaa:	89a3      	ldrh	r3, [r4, #12]
 8008aac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab4:	81a3      	strh	r3, [r4, #12]
 8008ab6:	6126      	str	r6, [r4, #16]
 8008ab8:	6165      	str	r5, [r4, #20]
 8008aba:	444e      	add	r6, r9
 8008abc:	eba5 0509 	sub.w	r5, r5, r9
 8008ac0:	6026      	str	r6, [r4, #0]
 8008ac2:	60a5      	str	r5, [r4, #8]
 8008ac4:	463e      	mov	r6, r7
 8008ac6:	42be      	cmp	r6, r7
 8008ac8:	d900      	bls.n	8008acc <__ssputs_r+0x70>
 8008aca:	463e      	mov	r6, r7
 8008acc:	6820      	ldr	r0, [r4, #0]
 8008ace:	4632      	mov	r2, r6
 8008ad0:	4641      	mov	r1, r8
 8008ad2:	f000 f9c9 	bl	8008e68 <memmove>
 8008ad6:	68a3      	ldr	r3, [r4, #8]
 8008ad8:	1b9b      	subs	r3, r3, r6
 8008ada:	60a3      	str	r3, [r4, #8]
 8008adc:	6823      	ldr	r3, [r4, #0]
 8008ade:	4433      	add	r3, r6
 8008ae0:	6023      	str	r3, [r4, #0]
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae8:	462a      	mov	r2, r5
 8008aea:	f000 fdae 	bl	800964a <_realloc_r>
 8008aee:	4606      	mov	r6, r0
 8008af0:	2800      	cmp	r0, #0
 8008af2:	d1e0      	bne.n	8008ab6 <__ssputs_r+0x5a>
 8008af4:	6921      	ldr	r1, [r4, #16]
 8008af6:	4650      	mov	r0, sl
 8008af8:	f7fe fb6c 	bl	80071d4 <_free_r>
 8008afc:	230c      	movs	r3, #12
 8008afe:	f8ca 3000 	str.w	r3, [sl]
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b08:	81a3      	strh	r3, [r4, #12]
 8008b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b0e:	e7e9      	b.n	8008ae4 <__ssputs_r+0x88>

08008b10 <_svfiprintf_r>:
 8008b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b14:	4698      	mov	r8, r3
 8008b16:	898b      	ldrh	r3, [r1, #12]
 8008b18:	061b      	lsls	r3, r3, #24
 8008b1a:	b09d      	sub	sp, #116	; 0x74
 8008b1c:	4607      	mov	r7, r0
 8008b1e:	460d      	mov	r5, r1
 8008b20:	4614      	mov	r4, r2
 8008b22:	d50e      	bpl.n	8008b42 <_svfiprintf_r+0x32>
 8008b24:	690b      	ldr	r3, [r1, #16]
 8008b26:	b963      	cbnz	r3, 8008b42 <_svfiprintf_r+0x32>
 8008b28:	2140      	movs	r1, #64	; 0x40
 8008b2a:	f7fe fbc7 	bl	80072bc <_malloc_r>
 8008b2e:	6028      	str	r0, [r5, #0]
 8008b30:	6128      	str	r0, [r5, #16]
 8008b32:	b920      	cbnz	r0, 8008b3e <_svfiprintf_r+0x2e>
 8008b34:	230c      	movs	r3, #12
 8008b36:	603b      	str	r3, [r7, #0]
 8008b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b3c:	e0d0      	b.n	8008ce0 <_svfiprintf_r+0x1d0>
 8008b3e:	2340      	movs	r3, #64	; 0x40
 8008b40:	616b      	str	r3, [r5, #20]
 8008b42:	2300      	movs	r3, #0
 8008b44:	9309      	str	r3, [sp, #36]	; 0x24
 8008b46:	2320      	movs	r3, #32
 8008b48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b50:	2330      	movs	r3, #48	; 0x30
 8008b52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008cf8 <_svfiprintf_r+0x1e8>
 8008b56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b5a:	f04f 0901 	mov.w	r9, #1
 8008b5e:	4623      	mov	r3, r4
 8008b60:	469a      	mov	sl, r3
 8008b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b66:	b10a      	cbz	r2, 8008b6c <_svfiprintf_r+0x5c>
 8008b68:	2a25      	cmp	r2, #37	; 0x25
 8008b6a:	d1f9      	bne.n	8008b60 <_svfiprintf_r+0x50>
 8008b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8008b70:	d00b      	beq.n	8008b8a <_svfiprintf_r+0x7a>
 8008b72:	465b      	mov	r3, fp
 8008b74:	4622      	mov	r2, r4
 8008b76:	4629      	mov	r1, r5
 8008b78:	4638      	mov	r0, r7
 8008b7a:	f7ff ff6f 	bl	8008a5c <__ssputs_r>
 8008b7e:	3001      	adds	r0, #1
 8008b80:	f000 80a9 	beq.w	8008cd6 <_svfiprintf_r+0x1c6>
 8008b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b86:	445a      	add	r2, fp
 8008b88:	9209      	str	r2, [sp, #36]	; 0x24
 8008b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f000 80a1 	beq.w	8008cd6 <_svfiprintf_r+0x1c6>
 8008b94:	2300      	movs	r3, #0
 8008b96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b9e:	f10a 0a01 	add.w	sl, sl, #1
 8008ba2:	9304      	str	r3, [sp, #16]
 8008ba4:	9307      	str	r3, [sp, #28]
 8008ba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008baa:	931a      	str	r3, [sp, #104]	; 0x68
 8008bac:	4654      	mov	r4, sl
 8008bae:	2205      	movs	r2, #5
 8008bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bb4:	4850      	ldr	r0, [pc, #320]	; (8008cf8 <_svfiprintf_r+0x1e8>)
 8008bb6:	f7f7 fb1b 	bl	80001f0 <memchr>
 8008bba:	9a04      	ldr	r2, [sp, #16]
 8008bbc:	b9d8      	cbnz	r0, 8008bf6 <_svfiprintf_r+0xe6>
 8008bbe:	06d0      	lsls	r0, r2, #27
 8008bc0:	bf44      	itt	mi
 8008bc2:	2320      	movmi	r3, #32
 8008bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bc8:	0711      	lsls	r1, r2, #28
 8008bca:	bf44      	itt	mi
 8008bcc:	232b      	movmi	r3, #43	; 0x2b
 8008bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8008bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8008bd8:	d015      	beq.n	8008c06 <_svfiprintf_r+0xf6>
 8008bda:	9a07      	ldr	r2, [sp, #28]
 8008bdc:	4654      	mov	r4, sl
 8008bde:	2000      	movs	r0, #0
 8008be0:	f04f 0c0a 	mov.w	ip, #10
 8008be4:	4621      	mov	r1, r4
 8008be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bea:	3b30      	subs	r3, #48	; 0x30
 8008bec:	2b09      	cmp	r3, #9
 8008bee:	d94d      	bls.n	8008c8c <_svfiprintf_r+0x17c>
 8008bf0:	b1b0      	cbz	r0, 8008c20 <_svfiprintf_r+0x110>
 8008bf2:	9207      	str	r2, [sp, #28]
 8008bf4:	e014      	b.n	8008c20 <_svfiprintf_r+0x110>
 8008bf6:	eba0 0308 	sub.w	r3, r0, r8
 8008bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	9304      	str	r3, [sp, #16]
 8008c02:	46a2      	mov	sl, r4
 8008c04:	e7d2      	b.n	8008bac <_svfiprintf_r+0x9c>
 8008c06:	9b03      	ldr	r3, [sp, #12]
 8008c08:	1d19      	adds	r1, r3, #4
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	9103      	str	r1, [sp, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	bfbb      	ittet	lt
 8008c12:	425b      	neglt	r3, r3
 8008c14:	f042 0202 	orrlt.w	r2, r2, #2
 8008c18:	9307      	strge	r3, [sp, #28]
 8008c1a:	9307      	strlt	r3, [sp, #28]
 8008c1c:	bfb8      	it	lt
 8008c1e:	9204      	strlt	r2, [sp, #16]
 8008c20:	7823      	ldrb	r3, [r4, #0]
 8008c22:	2b2e      	cmp	r3, #46	; 0x2e
 8008c24:	d10c      	bne.n	8008c40 <_svfiprintf_r+0x130>
 8008c26:	7863      	ldrb	r3, [r4, #1]
 8008c28:	2b2a      	cmp	r3, #42	; 0x2a
 8008c2a:	d134      	bne.n	8008c96 <_svfiprintf_r+0x186>
 8008c2c:	9b03      	ldr	r3, [sp, #12]
 8008c2e:	1d1a      	adds	r2, r3, #4
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	9203      	str	r2, [sp, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	bfb8      	it	lt
 8008c38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008c3c:	3402      	adds	r4, #2
 8008c3e:	9305      	str	r3, [sp, #20]
 8008c40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008d08 <_svfiprintf_r+0x1f8>
 8008c44:	7821      	ldrb	r1, [r4, #0]
 8008c46:	2203      	movs	r2, #3
 8008c48:	4650      	mov	r0, sl
 8008c4a:	f7f7 fad1 	bl	80001f0 <memchr>
 8008c4e:	b138      	cbz	r0, 8008c60 <_svfiprintf_r+0x150>
 8008c50:	9b04      	ldr	r3, [sp, #16]
 8008c52:	eba0 000a 	sub.w	r0, r0, sl
 8008c56:	2240      	movs	r2, #64	; 0x40
 8008c58:	4082      	lsls	r2, r0
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	3401      	adds	r4, #1
 8008c5e:	9304      	str	r3, [sp, #16]
 8008c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c64:	4825      	ldr	r0, [pc, #148]	; (8008cfc <_svfiprintf_r+0x1ec>)
 8008c66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c6a:	2206      	movs	r2, #6
 8008c6c:	f7f7 fac0 	bl	80001f0 <memchr>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d038      	beq.n	8008ce6 <_svfiprintf_r+0x1d6>
 8008c74:	4b22      	ldr	r3, [pc, #136]	; (8008d00 <_svfiprintf_r+0x1f0>)
 8008c76:	bb1b      	cbnz	r3, 8008cc0 <_svfiprintf_r+0x1b0>
 8008c78:	9b03      	ldr	r3, [sp, #12]
 8008c7a:	3307      	adds	r3, #7
 8008c7c:	f023 0307 	bic.w	r3, r3, #7
 8008c80:	3308      	adds	r3, #8
 8008c82:	9303      	str	r3, [sp, #12]
 8008c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c86:	4433      	add	r3, r6
 8008c88:	9309      	str	r3, [sp, #36]	; 0x24
 8008c8a:	e768      	b.n	8008b5e <_svfiprintf_r+0x4e>
 8008c8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c90:	460c      	mov	r4, r1
 8008c92:	2001      	movs	r0, #1
 8008c94:	e7a6      	b.n	8008be4 <_svfiprintf_r+0xd4>
 8008c96:	2300      	movs	r3, #0
 8008c98:	3401      	adds	r4, #1
 8008c9a:	9305      	str	r3, [sp, #20]
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	f04f 0c0a 	mov.w	ip, #10
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ca8:	3a30      	subs	r2, #48	; 0x30
 8008caa:	2a09      	cmp	r2, #9
 8008cac:	d903      	bls.n	8008cb6 <_svfiprintf_r+0x1a6>
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0c6      	beq.n	8008c40 <_svfiprintf_r+0x130>
 8008cb2:	9105      	str	r1, [sp, #20]
 8008cb4:	e7c4      	b.n	8008c40 <_svfiprintf_r+0x130>
 8008cb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cba:	4604      	mov	r4, r0
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e7f0      	b.n	8008ca2 <_svfiprintf_r+0x192>
 8008cc0:	ab03      	add	r3, sp, #12
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	462a      	mov	r2, r5
 8008cc6:	4b0f      	ldr	r3, [pc, #60]	; (8008d04 <_svfiprintf_r+0x1f4>)
 8008cc8:	a904      	add	r1, sp, #16
 8008cca:	4638      	mov	r0, r7
 8008ccc:	f7fc fc52 	bl	8005574 <_printf_float>
 8008cd0:	1c42      	adds	r2, r0, #1
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	d1d6      	bne.n	8008c84 <_svfiprintf_r+0x174>
 8008cd6:	89ab      	ldrh	r3, [r5, #12]
 8008cd8:	065b      	lsls	r3, r3, #25
 8008cda:	f53f af2d 	bmi.w	8008b38 <_svfiprintf_r+0x28>
 8008cde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ce0:	b01d      	add	sp, #116	; 0x74
 8008ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce6:	ab03      	add	r3, sp, #12
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	462a      	mov	r2, r5
 8008cec:	4b05      	ldr	r3, [pc, #20]	; (8008d04 <_svfiprintf_r+0x1f4>)
 8008cee:	a904      	add	r1, sp, #16
 8008cf0:	4638      	mov	r0, r7
 8008cf2:	f7fc fee3 	bl	8005abc <_printf_i>
 8008cf6:	e7eb      	b.n	8008cd0 <_svfiprintf_r+0x1c0>
 8008cf8:	0800a159 	.word	0x0800a159
 8008cfc:	0800a163 	.word	0x0800a163
 8008d00:	08005575 	.word	0x08005575
 8008d04:	08008a5d 	.word	0x08008a5d
 8008d08:	0800a15f 	.word	0x0800a15f

08008d0c <__sflush_r>:
 8008d0c:	898a      	ldrh	r2, [r1, #12]
 8008d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d12:	4605      	mov	r5, r0
 8008d14:	0710      	lsls	r0, r2, #28
 8008d16:	460c      	mov	r4, r1
 8008d18:	d458      	bmi.n	8008dcc <__sflush_r+0xc0>
 8008d1a:	684b      	ldr	r3, [r1, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	dc05      	bgt.n	8008d2c <__sflush_r+0x20>
 8008d20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	dc02      	bgt.n	8008d2c <__sflush_r+0x20>
 8008d26:	2000      	movs	r0, #0
 8008d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d2e:	2e00      	cmp	r6, #0
 8008d30:	d0f9      	beq.n	8008d26 <__sflush_r+0x1a>
 8008d32:	2300      	movs	r3, #0
 8008d34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d38:	682f      	ldr	r7, [r5, #0]
 8008d3a:	6a21      	ldr	r1, [r4, #32]
 8008d3c:	602b      	str	r3, [r5, #0]
 8008d3e:	d032      	beq.n	8008da6 <__sflush_r+0x9a>
 8008d40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d42:	89a3      	ldrh	r3, [r4, #12]
 8008d44:	075a      	lsls	r2, r3, #29
 8008d46:	d505      	bpl.n	8008d54 <__sflush_r+0x48>
 8008d48:	6863      	ldr	r3, [r4, #4]
 8008d4a:	1ac0      	subs	r0, r0, r3
 8008d4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d4e:	b10b      	cbz	r3, 8008d54 <__sflush_r+0x48>
 8008d50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d52:	1ac0      	subs	r0, r0, r3
 8008d54:	2300      	movs	r3, #0
 8008d56:	4602      	mov	r2, r0
 8008d58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d5a:	6a21      	ldr	r1, [r4, #32]
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	47b0      	blx	r6
 8008d60:	1c43      	adds	r3, r0, #1
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	d106      	bne.n	8008d74 <__sflush_r+0x68>
 8008d66:	6829      	ldr	r1, [r5, #0]
 8008d68:	291d      	cmp	r1, #29
 8008d6a:	d82b      	bhi.n	8008dc4 <__sflush_r+0xb8>
 8008d6c:	4a29      	ldr	r2, [pc, #164]	; (8008e14 <__sflush_r+0x108>)
 8008d6e:	410a      	asrs	r2, r1
 8008d70:	07d6      	lsls	r6, r2, #31
 8008d72:	d427      	bmi.n	8008dc4 <__sflush_r+0xb8>
 8008d74:	2200      	movs	r2, #0
 8008d76:	6062      	str	r2, [r4, #4]
 8008d78:	04d9      	lsls	r1, r3, #19
 8008d7a:	6922      	ldr	r2, [r4, #16]
 8008d7c:	6022      	str	r2, [r4, #0]
 8008d7e:	d504      	bpl.n	8008d8a <__sflush_r+0x7e>
 8008d80:	1c42      	adds	r2, r0, #1
 8008d82:	d101      	bne.n	8008d88 <__sflush_r+0x7c>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	b903      	cbnz	r3, 8008d8a <__sflush_r+0x7e>
 8008d88:	6560      	str	r0, [r4, #84]	; 0x54
 8008d8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d8c:	602f      	str	r7, [r5, #0]
 8008d8e:	2900      	cmp	r1, #0
 8008d90:	d0c9      	beq.n	8008d26 <__sflush_r+0x1a>
 8008d92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d96:	4299      	cmp	r1, r3
 8008d98:	d002      	beq.n	8008da0 <__sflush_r+0x94>
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f7fe fa1a 	bl	80071d4 <_free_r>
 8008da0:	2000      	movs	r0, #0
 8008da2:	6360      	str	r0, [r4, #52]	; 0x34
 8008da4:	e7c0      	b.n	8008d28 <__sflush_r+0x1c>
 8008da6:	2301      	movs	r3, #1
 8008da8:	4628      	mov	r0, r5
 8008daa:	47b0      	blx	r6
 8008dac:	1c41      	adds	r1, r0, #1
 8008dae:	d1c8      	bne.n	8008d42 <__sflush_r+0x36>
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0c5      	beq.n	8008d42 <__sflush_r+0x36>
 8008db6:	2b1d      	cmp	r3, #29
 8008db8:	d001      	beq.n	8008dbe <__sflush_r+0xb2>
 8008dba:	2b16      	cmp	r3, #22
 8008dbc:	d101      	bne.n	8008dc2 <__sflush_r+0xb6>
 8008dbe:	602f      	str	r7, [r5, #0]
 8008dc0:	e7b1      	b.n	8008d26 <__sflush_r+0x1a>
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dc8:	81a3      	strh	r3, [r4, #12]
 8008dca:	e7ad      	b.n	8008d28 <__sflush_r+0x1c>
 8008dcc:	690f      	ldr	r7, [r1, #16]
 8008dce:	2f00      	cmp	r7, #0
 8008dd0:	d0a9      	beq.n	8008d26 <__sflush_r+0x1a>
 8008dd2:	0793      	lsls	r3, r2, #30
 8008dd4:	680e      	ldr	r6, [r1, #0]
 8008dd6:	bf08      	it	eq
 8008dd8:	694b      	ldreq	r3, [r1, #20]
 8008dda:	600f      	str	r7, [r1, #0]
 8008ddc:	bf18      	it	ne
 8008dde:	2300      	movne	r3, #0
 8008de0:	eba6 0807 	sub.w	r8, r6, r7
 8008de4:	608b      	str	r3, [r1, #8]
 8008de6:	f1b8 0f00 	cmp.w	r8, #0
 8008dea:	dd9c      	ble.n	8008d26 <__sflush_r+0x1a>
 8008dec:	6a21      	ldr	r1, [r4, #32]
 8008dee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008df0:	4643      	mov	r3, r8
 8008df2:	463a      	mov	r2, r7
 8008df4:	4628      	mov	r0, r5
 8008df6:	47b0      	blx	r6
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	dc06      	bgt.n	8008e0a <__sflush_r+0xfe>
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e02:	81a3      	strh	r3, [r4, #12]
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e08:	e78e      	b.n	8008d28 <__sflush_r+0x1c>
 8008e0a:	4407      	add	r7, r0
 8008e0c:	eba8 0800 	sub.w	r8, r8, r0
 8008e10:	e7e9      	b.n	8008de6 <__sflush_r+0xda>
 8008e12:	bf00      	nop
 8008e14:	dfbffffe 	.word	0xdfbffffe

08008e18 <_fflush_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	690b      	ldr	r3, [r1, #16]
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	b913      	cbnz	r3, 8008e28 <_fflush_r+0x10>
 8008e22:	2500      	movs	r5, #0
 8008e24:	4628      	mov	r0, r5
 8008e26:	bd38      	pop	{r3, r4, r5, pc}
 8008e28:	b118      	cbz	r0, 8008e32 <_fflush_r+0x1a>
 8008e2a:	6a03      	ldr	r3, [r0, #32]
 8008e2c:	b90b      	cbnz	r3, 8008e32 <_fflush_r+0x1a>
 8008e2e:	f7fd fa03 	bl	8006238 <__sinit>
 8008e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d0f3      	beq.n	8008e22 <_fflush_r+0xa>
 8008e3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e3c:	07d0      	lsls	r0, r2, #31
 8008e3e:	d404      	bmi.n	8008e4a <_fflush_r+0x32>
 8008e40:	0599      	lsls	r1, r3, #22
 8008e42:	d402      	bmi.n	8008e4a <_fflush_r+0x32>
 8008e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e46:	f7fd fb42 	bl	80064ce <__retarget_lock_acquire_recursive>
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	f7ff ff5d 	bl	8008d0c <__sflush_r>
 8008e52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e54:	07da      	lsls	r2, r3, #31
 8008e56:	4605      	mov	r5, r0
 8008e58:	d4e4      	bmi.n	8008e24 <_fflush_r+0xc>
 8008e5a:	89a3      	ldrh	r3, [r4, #12]
 8008e5c:	059b      	lsls	r3, r3, #22
 8008e5e:	d4e1      	bmi.n	8008e24 <_fflush_r+0xc>
 8008e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e62:	f7fd fb35 	bl	80064d0 <__retarget_lock_release_recursive>
 8008e66:	e7dd      	b.n	8008e24 <_fflush_r+0xc>

08008e68 <memmove>:
 8008e68:	4288      	cmp	r0, r1
 8008e6a:	b510      	push	{r4, lr}
 8008e6c:	eb01 0402 	add.w	r4, r1, r2
 8008e70:	d902      	bls.n	8008e78 <memmove+0x10>
 8008e72:	4284      	cmp	r4, r0
 8008e74:	4623      	mov	r3, r4
 8008e76:	d807      	bhi.n	8008e88 <memmove+0x20>
 8008e78:	1e43      	subs	r3, r0, #1
 8008e7a:	42a1      	cmp	r1, r4
 8008e7c:	d008      	beq.n	8008e90 <memmove+0x28>
 8008e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e86:	e7f8      	b.n	8008e7a <memmove+0x12>
 8008e88:	4402      	add	r2, r0
 8008e8a:	4601      	mov	r1, r0
 8008e8c:	428a      	cmp	r2, r1
 8008e8e:	d100      	bne.n	8008e92 <memmove+0x2a>
 8008e90:	bd10      	pop	{r4, pc}
 8008e92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e9a:	e7f7      	b.n	8008e8c <memmove+0x24>

08008e9c <strncmp>:
 8008e9c:	b510      	push	{r4, lr}
 8008e9e:	b16a      	cbz	r2, 8008ebc <strncmp+0x20>
 8008ea0:	3901      	subs	r1, #1
 8008ea2:	1884      	adds	r4, r0, r2
 8008ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ea8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d103      	bne.n	8008eb8 <strncmp+0x1c>
 8008eb0:	42a0      	cmp	r0, r4
 8008eb2:	d001      	beq.n	8008eb8 <strncmp+0x1c>
 8008eb4:	2a00      	cmp	r2, #0
 8008eb6:	d1f5      	bne.n	8008ea4 <strncmp+0x8>
 8008eb8:	1ad0      	subs	r0, r2, r3
 8008eba:	bd10      	pop	{r4, pc}
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	e7fc      	b.n	8008eba <strncmp+0x1e>

08008ec0 <_sbrk_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4d06      	ldr	r5, [pc, #24]	; (8008edc <_sbrk_r+0x1c>)
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4608      	mov	r0, r1
 8008eca:	602b      	str	r3, [r5, #0]
 8008ecc:	f7f8 fd4a 	bl	8001964 <_sbrk>
 8008ed0:	1c43      	adds	r3, r0, #1
 8008ed2:	d102      	bne.n	8008eda <_sbrk_r+0x1a>
 8008ed4:	682b      	ldr	r3, [r5, #0]
 8008ed6:	b103      	cbz	r3, 8008eda <_sbrk_r+0x1a>
 8008ed8:	6023      	str	r3, [r4, #0]
 8008eda:	bd38      	pop	{r3, r4, r5, pc}
 8008edc:	20000c14 	.word	0x20000c14

08008ee0 <memcpy>:
 8008ee0:	440a      	add	r2, r1
 8008ee2:	4291      	cmp	r1, r2
 8008ee4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008ee8:	d100      	bne.n	8008eec <memcpy+0xc>
 8008eea:	4770      	bx	lr
 8008eec:	b510      	push	{r4, lr}
 8008eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ef6:	4291      	cmp	r1, r2
 8008ef8:	d1f9      	bne.n	8008eee <memcpy+0xe>
 8008efa:	bd10      	pop	{r4, pc}
 8008efc:	0000      	movs	r0, r0
	...

08008f00 <nan>:
 8008f00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008f08 <nan+0x8>
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	00000000 	.word	0x00000000
 8008f0c:	7ff80000 	.word	0x7ff80000

08008f10 <__assert_func>:
 8008f10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f12:	4614      	mov	r4, r2
 8008f14:	461a      	mov	r2, r3
 8008f16:	4b09      	ldr	r3, [pc, #36]	; (8008f3c <__assert_func+0x2c>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	68d8      	ldr	r0, [r3, #12]
 8008f1e:	b14c      	cbz	r4, 8008f34 <__assert_func+0x24>
 8008f20:	4b07      	ldr	r3, [pc, #28]	; (8008f40 <__assert_func+0x30>)
 8008f22:	9100      	str	r1, [sp, #0]
 8008f24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f28:	4906      	ldr	r1, [pc, #24]	; (8008f44 <__assert_func+0x34>)
 8008f2a:	462b      	mov	r3, r5
 8008f2c:	f000 fbca 	bl	80096c4 <fiprintf>
 8008f30:	f000 fbda 	bl	80096e8 <abort>
 8008f34:	4b04      	ldr	r3, [pc, #16]	; (8008f48 <__assert_func+0x38>)
 8008f36:	461c      	mov	r4, r3
 8008f38:	e7f3      	b.n	8008f22 <__assert_func+0x12>
 8008f3a:	bf00      	nop
 8008f3c:	2000009c 	.word	0x2000009c
 8008f40:	0800a172 	.word	0x0800a172
 8008f44:	0800a17f 	.word	0x0800a17f
 8008f48:	0800a1ad 	.word	0x0800a1ad

08008f4c <_calloc_r>:
 8008f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f4e:	fba1 2402 	umull	r2, r4, r1, r2
 8008f52:	b94c      	cbnz	r4, 8008f68 <_calloc_r+0x1c>
 8008f54:	4611      	mov	r1, r2
 8008f56:	9201      	str	r2, [sp, #4]
 8008f58:	f7fe f9b0 	bl	80072bc <_malloc_r>
 8008f5c:	9a01      	ldr	r2, [sp, #4]
 8008f5e:	4605      	mov	r5, r0
 8008f60:	b930      	cbnz	r0, 8008f70 <_calloc_r+0x24>
 8008f62:	4628      	mov	r0, r5
 8008f64:	b003      	add	sp, #12
 8008f66:	bd30      	pop	{r4, r5, pc}
 8008f68:	220c      	movs	r2, #12
 8008f6a:	6002      	str	r2, [r0, #0]
 8008f6c:	2500      	movs	r5, #0
 8008f6e:	e7f8      	b.n	8008f62 <_calloc_r+0x16>
 8008f70:	4621      	mov	r1, r4
 8008f72:	f7fd fa2e 	bl	80063d2 <memset>
 8008f76:	e7f4      	b.n	8008f62 <_calloc_r+0x16>

08008f78 <rshift>:
 8008f78:	6903      	ldr	r3, [r0, #16]
 8008f7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008f7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f82:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008f86:	f100 0414 	add.w	r4, r0, #20
 8008f8a:	dd45      	ble.n	8009018 <rshift+0xa0>
 8008f8c:	f011 011f 	ands.w	r1, r1, #31
 8008f90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008f94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008f98:	d10c      	bne.n	8008fb4 <rshift+0x3c>
 8008f9a:	f100 0710 	add.w	r7, r0, #16
 8008f9e:	4629      	mov	r1, r5
 8008fa0:	42b1      	cmp	r1, r6
 8008fa2:	d334      	bcc.n	800900e <rshift+0x96>
 8008fa4:	1a9b      	subs	r3, r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	1eea      	subs	r2, r5, #3
 8008faa:	4296      	cmp	r6, r2
 8008fac:	bf38      	it	cc
 8008fae:	2300      	movcc	r3, #0
 8008fb0:	4423      	add	r3, r4
 8008fb2:	e015      	b.n	8008fe0 <rshift+0x68>
 8008fb4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008fb8:	f1c1 0820 	rsb	r8, r1, #32
 8008fbc:	40cf      	lsrs	r7, r1
 8008fbe:	f105 0e04 	add.w	lr, r5, #4
 8008fc2:	46a1      	mov	r9, r4
 8008fc4:	4576      	cmp	r6, lr
 8008fc6:	46f4      	mov	ip, lr
 8008fc8:	d815      	bhi.n	8008ff6 <rshift+0x7e>
 8008fca:	1a9a      	subs	r2, r3, r2
 8008fcc:	0092      	lsls	r2, r2, #2
 8008fce:	3a04      	subs	r2, #4
 8008fd0:	3501      	adds	r5, #1
 8008fd2:	42ae      	cmp	r6, r5
 8008fd4:	bf38      	it	cc
 8008fd6:	2200      	movcc	r2, #0
 8008fd8:	18a3      	adds	r3, r4, r2
 8008fda:	50a7      	str	r7, [r4, r2]
 8008fdc:	b107      	cbz	r7, 8008fe0 <rshift+0x68>
 8008fde:	3304      	adds	r3, #4
 8008fe0:	1b1a      	subs	r2, r3, r4
 8008fe2:	42a3      	cmp	r3, r4
 8008fe4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008fe8:	bf08      	it	eq
 8008fea:	2300      	moveq	r3, #0
 8008fec:	6102      	str	r2, [r0, #16]
 8008fee:	bf08      	it	eq
 8008ff0:	6143      	streq	r3, [r0, #20]
 8008ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ff6:	f8dc c000 	ldr.w	ip, [ip]
 8008ffa:	fa0c fc08 	lsl.w	ip, ip, r8
 8008ffe:	ea4c 0707 	orr.w	r7, ip, r7
 8009002:	f849 7b04 	str.w	r7, [r9], #4
 8009006:	f85e 7b04 	ldr.w	r7, [lr], #4
 800900a:	40cf      	lsrs	r7, r1
 800900c:	e7da      	b.n	8008fc4 <rshift+0x4c>
 800900e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009012:	f847 cf04 	str.w	ip, [r7, #4]!
 8009016:	e7c3      	b.n	8008fa0 <rshift+0x28>
 8009018:	4623      	mov	r3, r4
 800901a:	e7e1      	b.n	8008fe0 <rshift+0x68>

0800901c <__hexdig_fun>:
 800901c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009020:	2b09      	cmp	r3, #9
 8009022:	d802      	bhi.n	800902a <__hexdig_fun+0xe>
 8009024:	3820      	subs	r0, #32
 8009026:	b2c0      	uxtb	r0, r0
 8009028:	4770      	bx	lr
 800902a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800902e:	2b05      	cmp	r3, #5
 8009030:	d801      	bhi.n	8009036 <__hexdig_fun+0x1a>
 8009032:	3847      	subs	r0, #71	; 0x47
 8009034:	e7f7      	b.n	8009026 <__hexdig_fun+0xa>
 8009036:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800903a:	2b05      	cmp	r3, #5
 800903c:	d801      	bhi.n	8009042 <__hexdig_fun+0x26>
 800903e:	3827      	subs	r0, #39	; 0x27
 8009040:	e7f1      	b.n	8009026 <__hexdig_fun+0xa>
 8009042:	2000      	movs	r0, #0
 8009044:	4770      	bx	lr
	...

08009048 <__gethex>:
 8009048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904c:	4617      	mov	r7, r2
 800904e:	680a      	ldr	r2, [r1, #0]
 8009050:	b085      	sub	sp, #20
 8009052:	f102 0b02 	add.w	fp, r2, #2
 8009056:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800905a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800905e:	4681      	mov	r9, r0
 8009060:	468a      	mov	sl, r1
 8009062:	9302      	str	r3, [sp, #8]
 8009064:	32fe      	adds	r2, #254	; 0xfe
 8009066:	eb02 030b 	add.w	r3, r2, fp
 800906a:	46d8      	mov	r8, fp
 800906c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009070:	9301      	str	r3, [sp, #4]
 8009072:	2830      	cmp	r0, #48	; 0x30
 8009074:	d0f7      	beq.n	8009066 <__gethex+0x1e>
 8009076:	f7ff ffd1 	bl	800901c <__hexdig_fun>
 800907a:	4604      	mov	r4, r0
 800907c:	2800      	cmp	r0, #0
 800907e:	d138      	bne.n	80090f2 <__gethex+0xaa>
 8009080:	49a7      	ldr	r1, [pc, #668]	; (8009320 <__gethex+0x2d8>)
 8009082:	2201      	movs	r2, #1
 8009084:	4640      	mov	r0, r8
 8009086:	f7ff ff09 	bl	8008e9c <strncmp>
 800908a:	4606      	mov	r6, r0
 800908c:	2800      	cmp	r0, #0
 800908e:	d169      	bne.n	8009164 <__gethex+0x11c>
 8009090:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009094:	465d      	mov	r5, fp
 8009096:	f7ff ffc1 	bl	800901c <__hexdig_fun>
 800909a:	2800      	cmp	r0, #0
 800909c:	d064      	beq.n	8009168 <__gethex+0x120>
 800909e:	465a      	mov	r2, fp
 80090a0:	7810      	ldrb	r0, [r2, #0]
 80090a2:	2830      	cmp	r0, #48	; 0x30
 80090a4:	4690      	mov	r8, r2
 80090a6:	f102 0201 	add.w	r2, r2, #1
 80090aa:	d0f9      	beq.n	80090a0 <__gethex+0x58>
 80090ac:	f7ff ffb6 	bl	800901c <__hexdig_fun>
 80090b0:	2301      	movs	r3, #1
 80090b2:	fab0 f480 	clz	r4, r0
 80090b6:	0964      	lsrs	r4, r4, #5
 80090b8:	465e      	mov	r6, fp
 80090ba:	9301      	str	r3, [sp, #4]
 80090bc:	4642      	mov	r2, r8
 80090be:	4615      	mov	r5, r2
 80090c0:	3201      	adds	r2, #1
 80090c2:	7828      	ldrb	r0, [r5, #0]
 80090c4:	f7ff ffaa 	bl	800901c <__hexdig_fun>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	d1f8      	bne.n	80090be <__gethex+0x76>
 80090cc:	4994      	ldr	r1, [pc, #592]	; (8009320 <__gethex+0x2d8>)
 80090ce:	2201      	movs	r2, #1
 80090d0:	4628      	mov	r0, r5
 80090d2:	f7ff fee3 	bl	8008e9c <strncmp>
 80090d6:	b978      	cbnz	r0, 80090f8 <__gethex+0xb0>
 80090d8:	b946      	cbnz	r6, 80090ec <__gethex+0xa4>
 80090da:	1c6e      	adds	r6, r5, #1
 80090dc:	4632      	mov	r2, r6
 80090de:	4615      	mov	r5, r2
 80090e0:	3201      	adds	r2, #1
 80090e2:	7828      	ldrb	r0, [r5, #0]
 80090e4:	f7ff ff9a 	bl	800901c <__hexdig_fun>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	d1f8      	bne.n	80090de <__gethex+0x96>
 80090ec:	1b73      	subs	r3, r6, r5
 80090ee:	009e      	lsls	r6, r3, #2
 80090f0:	e004      	b.n	80090fc <__gethex+0xb4>
 80090f2:	2400      	movs	r4, #0
 80090f4:	4626      	mov	r6, r4
 80090f6:	e7e1      	b.n	80090bc <__gethex+0x74>
 80090f8:	2e00      	cmp	r6, #0
 80090fa:	d1f7      	bne.n	80090ec <__gethex+0xa4>
 80090fc:	782b      	ldrb	r3, [r5, #0]
 80090fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009102:	2b50      	cmp	r3, #80	; 0x50
 8009104:	d13d      	bne.n	8009182 <__gethex+0x13a>
 8009106:	786b      	ldrb	r3, [r5, #1]
 8009108:	2b2b      	cmp	r3, #43	; 0x2b
 800910a:	d02f      	beq.n	800916c <__gethex+0x124>
 800910c:	2b2d      	cmp	r3, #45	; 0x2d
 800910e:	d031      	beq.n	8009174 <__gethex+0x12c>
 8009110:	1c69      	adds	r1, r5, #1
 8009112:	f04f 0b00 	mov.w	fp, #0
 8009116:	7808      	ldrb	r0, [r1, #0]
 8009118:	f7ff ff80 	bl	800901c <__hexdig_fun>
 800911c:	1e42      	subs	r2, r0, #1
 800911e:	b2d2      	uxtb	r2, r2
 8009120:	2a18      	cmp	r2, #24
 8009122:	d82e      	bhi.n	8009182 <__gethex+0x13a>
 8009124:	f1a0 0210 	sub.w	r2, r0, #16
 8009128:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800912c:	f7ff ff76 	bl	800901c <__hexdig_fun>
 8009130:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8009134:	fa5f fc8c 	uxtb.w	ip, ip
 8009138:	f1bc 0f18 	cmp.w	ip, #24
 800913c:	d91d      	bls.n	800917a <__gethex+0x132>
 800913e:	f1bb 0f00 	cmp.w	fp, #0
 8009142:	d000      	beq.n	8009146 <__gethex+0xfe>
 8009144:	4252      	negs	r2, r2
 8009146:	4416      	add	r6, r2
 8009148:	f8ca 1000 	str.w	r1, [sl]
 800914c:	b1dc      	cbz	r4, 8009186 <__gethex+0x13e>
 800914e:	9b01      	ldr	r3, [sp, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	bf14      	ite	ne
 8009154:	f04f 0800 	movne.w	r8, #0
 8009158:	f04f 0806 	moveq.w	r8, #6
 800915c:	4640      	mov	r0, r8
 800915e:	b005      	add	sp, #20
 8009160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009164:	4645      	mov	r5, r8
 8009166:	4626      	mov	r6, r4
 8009168:	2401      	movs	r4, #1
 800916a:	e7c7      	b.n	80090fc <__gethex+0xb4>
 800916c:	f04f 0b00 	mov.w	fp, #0
 8009170:	1ca9      	adds	r1, r5, #2
 8009172:	e7d0      	b.n	8009116 <__gethex+0xce>
 8009174:	f04f 0b01 	mov.w	fp, #1
 8009178:	e7fa      	b.n	8009170 <__gethex+0x128>
 800917a:	230a      	movs	r3, #10
 800917c:	fb03 0002 	mla	r0, r3, r2, r0
 8009180:	e7d0      	b.n	8009124 <__gethex+0xdc>
 8009182:	4629      	mov	r1, r5
 8009184:	e7e0      	b.n	8009148 <__gethex+0x100>
 8009186:	eba5 0308 	sub.w	r3, r5, r8
 800918a:	3b01      	subs	r3, #1
 800918c:	4621      	mov	r1, r4
 800918e:	2b07      	cmp	r3, #7
 8009190:	dc0a      	bgt.n	80091a8 <__gethex+0x160>
 8009192:	4648      	mov	r0, r9
 8009194:	f7fe f91e 	bl	80073d4 <_Balloc>
 8009198:	4604      	mov	r4, r0
 800919a:	b940      	cbnz	r0, 80091ae <__gethex+0x166>
 800919c:	4b61      	ldr	r3, [pc, #388]	; (8009324 <__gethex+0x2dc>)
 800919e:	4602      	mov	r2, r0
 80091a0:	21e4      	movs	r1, #228	; 0xe4
 80091a2:	4861      	ldr	r0, [pc, #388]	; (8009328 <__gethex+0x2e0>)
 80091a4:	f7ff feb4 	bl	8008f10 <__assert_func>
 80091a8:	3101      	adds	r1, #1
 80091aa:	105b      	asrs	r3, r3, #1
 80091ac:	e7ef      	b.n	800918e <__gethex+0x146>
 80091ae:	f100 0a14 	add.w	sl, r0, #20
 80091b2:	2300      	movs	r3, #0
 80091b4:	495a      	ldr	r1, [pc, #360]	; (8009320 <__gethex+0x2d8>)
 80091b6:	f8cd a004 	str.w	sl, [sp, #4]
 80091ba:	469b      	mov	fp, r3
 80091bc:	45a8      	cmp	r8, r5
 80091be:	d342      	bcc.n	8009246 <__gethex+0x1fe>
 80091c0:	9801      	ldr	r0, [sp, #4]
 80091c2:	f840 bb04 	str.w	fp, [r0], #4
 80091c6:	eba0 000a 	sub.w	r0, r0, sl
 80091ca:	1080      	asrs	r0, r0, #2
 80091cc:	6120      	str	r0, [r4, #16]
 80091ce:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80091d2:	4658      	mov	r0, fp
 80091d4:	f7fe f9f0 	bl	80075b8 <__hi0bits>
 80091d8:	683d      	ldr	r5, [r7, #0]
 80091da:	eba8 0000 	sub.w	r0, r8, r0
 80091de:	42a8      	cmp	r0, r5
 80091e0:	dd59      	ble.n	8009296 <__gethex+0x24e>
 80091e2:	eba0 0805 	sub.w	r8, r0, r5
 80091e6:	4641      	mov	r1, r8
 80091e8:	4620      	mov	r0, r4
 80091ea:	f7fe fd7f 	bl	8007cec <__any_on>
 80091ee:	4683      	mov	fp, r0
 80091f0:	b1b8      	cbz	r0, 8009222 <__gethex+0x1da>
 80091f2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80091f6:	1159      	asrs	r1, r3, #5
 80091f8:	f003 021f 	and.w	r2, r3, #31
 80091fc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009200:	f04f 0b01 	mov.w	fp, #1
 8009204:	fa0b f202 	lsl.w	r2, fp, r2
 8009208:	420a      	tst	r2, r1
 800920a:	d00a      	beq.n	8009222 <__gethex+0x1da>
 800920c:	455b      	cmp	r3, fp
 800920e:	dd06      	ble.n	800921e <__gethex+0x1d6>
 8009210:	f1a8 0102 	sub.w	r1, r8, #2
 8009214:	4620      	mov	r0, r4
 8009216:	f7fe fd69 	bl	8007cec <__any_on>
 800921a:	2800      	cmp	r0, #0
 800921c:	d138      	bne.n	8009290 <__gethex+0x248>
 800921e:	f04f 0b02 	mov.w	fp, #2
 8009222:	4641      	mov	r1, r8
 8009224:	4620      	mov	r0, r4
 8009226:	f7ff fea7 	bl	8008f78 <rshift>
 800922a:	4446      	add	r6, r8
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	42b3      	cmp	r3, r6
 8009230:	da41      	bge.n	80092b6 <__gethex+0x26e>
 8009232:	4621      	mov	r1, r4
 8009234:	4648      	mov	r0, r9
 8009236:	f7fe f90d 	bl	8007454 <_Bfree>
 800923a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800923c:	2300      	movs	r3, #0
 800923e:	6013      	str	r3, [r2, #0]
 8009240:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009244:	e78a      	b.n	800915c <__gethex+0x114>
 8009246:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800924a:	2a2e      	cmp	r2, #46	; 0x2e
 800924c:	d014      	beq.n	8009278 <__gethex+0x230>
 800924e:	2b20      	cmp	r3, #32
 8009250:	d106      	bne.n	8009260 <__gethex+0x218>
 8009252:	9b01      	ldr	r3, [sp, #4]
 8009254:	f843 bb04 	str.w	fp, [r3], #4
 8009258:	f04f 0b00 	mov.w	fp, #0
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	465b      	mov	r3, fp
 8009260:	7828      	ldrb	r0, [r5, #0]
 8009262:	9303      	str	r3, [sp, #12]
 8009264:	f7ff feda 	bl	800901c <__hexdig_fun>
 8009268:	9b03      	ldr	r3, [sp, #12]
 800926a:	f000 000f 	and.w	r0, r0, #15
 800926e:	4098      	lsls	r0, r3
 8009270:	ea4b 0b00 	orr.w	fp, fp, r0
 8009274:	3304      	adds	r3, #4
 8009276:	e7a1      	b.n	80091bc <__gethex+0x174>
 8009278:	45a8      	cmp	r8, r5
 800927a:	d8e8      	bhi.n	800924e <__gethex+0x206>
 800927c:	2201      	movs	r2, #1
 800927e:	4628      	mov	r0, r5
 8009280:	9303      	str	r3, [sp, #12]
 8009282:	f7ff fe0b 	bl	8008e9c <strncmp>
 8009286:	4926      	ldr	r1, [pc, #152]	; (8009320 <__gethex+0x2d8>)
 8009288:	9b03      	ldr	r3, [sp, #12]
 800928a:	2800      	cmp	r0, #0
 800928c:	d1df      	bne.n	800924e <__gethex+0x206>
 800928e:	e795      	b.n	80091bc <__gethex+0x174>
 8009290:	f04f 0b03 	mov.w	fp, #3
 8009294:	e7c5      	b.n	8009222 <__gethex+0x1da>
 8009296:	da0b      	bge.n	80092b0 <__gethex+0x268>
 8009298:	eba5 0800 	sub.w	r8, r5, r0
 800929c:	4621      	mov	r1, r4
 800929e:	4642      	mov	r2, r8
 80092a0:	4648      	mov	r0, r9
 80092a2:	f7fe faf1 	bl	8007888 <__lshift>
 80092a6:	eba6 0608 	sub.w	r6, r6, r8
 80092aa:	4604      	mov	r4, r0
 80092ac:	f100 0a14 	add.w	sl, r0, #20
 80092b0:	f04f 0b00 	mov.w	fp, #0
 80092b4:	e7ba      	b.n	800922c <__gethex+0x1e4>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	42b3      	cmp	r3, r6
 80092ba:	dd73      	ble.n	80093a4 <__gethex+0x35c>
 80092bc:	1b9e      	subs	r6, r3, r6
 80092be:	42b5      	cmp	r5, r6
 80092c0:	dc34      	bgt.n	800932c <__gethex+0x2e4>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d023      	beq.n	8009310 <__gethex+0x2c8>
 80092c8:	2b03      	cmp	r3, #3
 80092ca:	d025      	beq.n	8009318 <__gethex+0x2d0>
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d115      	bne.n	80092fc <__gethex+0x2b4>
 80092d0:	42b5      	cmp	r5, r6
 80092d2:	d113      	bne.n	80092fc <__gethex+0x2b4>
 80092d4:	2d01      	cmp	r5, #1
 80092d6:	d10b      	bne.n	80092f0 <__gethex+0x2a8>
 80092d8:	9a02      	ldr	r2, [sp, #8]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	2301      	movs	r3, #1
 80092e0:	6123      	str	r3, [r4, #16]
 80092e2:	f8ca 3000 	str.w	r3, [sl]
 80092e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092e8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80092ec:	601c      	str	r4, [r3, #0]
 80092ee:	e735      	b.n	800915c <__gethex+0x114>
 80092f0:	1e69      	subs	r1, r5, #1
 80092f2:	4620      	mov	r0, r4
 80092f4:	f7fe fcfa 	bl	8007cec <__any_on>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d1ed      	bne.n	80092d8 <__gethex+0x290>
 80092fc:	4621      	mov	r1, r4
 80092fe:	4648      	mov	r0, r9
 8009300:	f7fe f8a8 	bl	8007454 <_Bfree>
 8009304:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009306:	2300      	movs	r3, #0
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800930e:	e725      	b.n	800915c <__gethex+0x114>
 8009310:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1f2      	bne.n	80092fc <__gethex+0x2b4>
 8009316:	e7df      	b.n	80092d8 <__gethex+0x290>
 8009318:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1dc      	bne.n	80092d8 <__gethex+0x290>
 800931e:	e7ed      	b.n	80092fc <__gethex+0x2b4>
 8009320:	0800a004 	.word	0x0800a004
 8009324:	08009e9d 	.word	0x08009e9d
 8009328:	0800a1ae 	.word	0x0800a1ae
 800932c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8009330:	f1bb 0f00 	cmp.w	fp, #0
 8009334:	d133      	bne.n	800939e <__gethex+0x356>
 8009336:	f1b8 0f00 	cmp.w	r8, #0
 800933a:	d004      	beq.n	8009346 <__gethex+0x2fe>
 800933c:	4641      	mov	r1, r8
 800933e:	4620      	mov	r0, r4
 8009340:	f7fe fcd4 	bl	8007cec <__any_on>
 8009344:	4683      	mov	fp, r0
 8009346:	ea4f 1268 	mov.w	r2, r8, asr #5
 800934a:	2301      	movs	r3, #1
 800934c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009350:	f008 081f 	and.w	r8, r8, #31
 8009354:	fa03 f308 	lsl.w	r3, r3, r8
 8009358:	4213      	tst	r3, r2
 800935a:	4631      	mov	r1, r6
 800935c:	4620      	mov	r0, r4
 800935e:	bf18      	it	ne
 8009360:	f04b 0b02 	orrne.w	fp, fp, #2
 8009364:	1bad      	subs	r5, r5, r6
 8009366:	f7ff fe07 	bl	8008f78 <rshift>
 800936a:	687e      	ldr	r6, [r7, #4]
 800936c:	f04f 0802 	mov.w	r8, #2
 8009370:	f1bb 0f00 	cmp.w	fp, #0
 8009374:	d04a      	beq.n	800940c <__gethex+0x3c4>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2b02      	cmp	r3, #2
 800937a:	d016      	beq.n	80093aa <__gethex+0x362>
 800937c:	2b03      	cmp	r3, #3
 800937e:	d018      	beq.n	80093b2 <__gethex+0x36a>
 8009380:	2b01      	cmp	r3, #1
 8009382:	d109      	bne.n	8009398 <__gethex+0x350>
 8009384:	f01b 0f02 	tst.w	fp, #2
 8009388:	d006      	beq.n	8009398 <__gethex+0x350>
 800938a:	f8da 3000 	ldr.w	r3, [sl]
 800938e:	ea4b 0b03 	orr.w	fp, fp, r3
 8009392:	f01b 0f01 	tst.w	fp, #1
 8009396:	d10f      	bne.n	80093b8 <__gethex+0x370>
 8009398:	f048 0810 	orr.w	r8, r8, #16
 800939c:	e036      	b.n	800940c <__gethex+0x3c4>
 800939e:	f04f 0b01 	mov.w	fp, #1
 80093a2:	e7d0      	b.n	8009346 <__gethex+0x2fe>
 80093a4:	f04f 0801 	mov.w	r8, #1
 80093a8:	e7e2      	b.n	8009370 <__gethex+0x328>
 80093aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093ac:	f1c3 0301 	rsb	r3, r3, #1
 80093b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80093b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d0ef      	beq.n	8009398 <__gethex+0x350>
 80093b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80093bc:	f104 0214 	add.w	r2, r4, #20
 80093c0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80093c4:	9301      	str	r3, [sp, #4]
 80093c6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80093ca:	2300      	movs	r3, #0
 80093cc:	4694      	mov	ip, r2
 80093ce:	f852 1b04 	ldr.w	r1, [r2], #4
 80093d2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80093d6:	d01e      	beq.n	8009416 <__gethex+0x3ce>
 80093d8:	3101      	adds	r1, #1
 80093da:	f8cc 1000 	str.w	r1, [ip]
 80093de:	f1b8 0f02 	cmp.w	r8, #2
 80093e2:	f104 0214 	add.w	r2, r4, #20
 80093e6:	d13d      	bne.n	8009464 <__gethex+0x41c>
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	42ab      	cmp	r3, r5
 80093ee:	d10b      	bne.n	8009408 <__gethex+0x3c0>
 80093f0:	1169      	asrs	r1, r5, #5
 80093f2:	2301      	movs	r3, #1
 80093f4:	f005 051f 	and.w	r5, r5, #31
 80093f8:	fa03 f505 	lsl.w	r5, r3, r5
 80093fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009400:	421d      	tst	r5, r3
 8009402:	bf18      	it	ne
 8009404:	f04f 0801 	movne.w	r8, #1
 8009408:	f048 0820 	orr.w	r8, r8, #32
 800940c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800940e:	601c      	str	r4, [r3, #0]
 8009410:	9b02      	ldr	r3, [sp, #8]
 8009412:	601e      	str	r6, [r3, #0]
 8009414:	e6a2      	b.n	800915c <__gethex+0x114>
 8009416:	4290      	cmp	r0, r2
 8009418:	f842 3c04 	str.w	r3, [r2, #-4]
 800941c:	d8d6      	bhi.n	80093cc <__gethex+0x384>
 800941e:	68a2      	ldr	r2, [r4, #8]
 8009420:	4593      	cmp	fp, r2
 8009422:	db17      	blt.n	8009454 <__gethex+0x40c>
 8009424:	6861      	ldr	r1, [r4, #4]
 8009426:	4648      	mov	r0, r9
 8009428:	3101      	adds	r1, #1
 800942a:	f7fd ffd3 	bl	80073d4 <_Balloc>
 800942e:	4682      	mov	sl, r0
 8009430:	b918      	cbnz	r0, 800943a <__gethex+0x3f2>
 8009432:	4b1b      	ldr	r3, [pc, #108]	; (80094a0 <__gethex+0x458>)
 8009434:	4602      	mov	r2, r0
 8009436:	2184      	movs	r1, #132	; 0x84
 8009438:	e6b3      	b.n	80091a2 <__gethex+0x15a>
 800943a:	6922      	ldr	r2, [r4, #16]
 800943c:	3202      	adds	r2, #2
 800943e:	f104 010c 	add.w	r1, r4, #12
 8009442:	0092      	lsls	r2, r2, #2
 8009444:	300c      	adds	r0, #12
 8009446:	f7ff fd4b 	bl	8008ee0 <memcpy>
 800944a:	4621      	mov	r1, r4
 800944c:	4648      	mov	r0, r9
 800944e:	f7fe f801 	bl	8007454 <_Bfree>
 8009452:	4654      	mov	r4, sl
 8009454:	6922      	ldr	r2, [r4, #16]
 8009456:	1c51      	adds	r1, r2, #1
 8009458:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800945c:	6121      	str	r1, [r4, #16]
 800945e:	2101      	movs	r1, #1
 8009460:	6151      	str	r1, [r2, #20]
 8009462:	e7bc      	b.n	80093de <__gethex+0x396>
 8009464:	6921      	ldr	r1, [r4, #16]
 8009466:	4559      	cmp	r1, fp
 8009468:	dd0b      	ble.n	8009482 <__gethex+0x43a>
 800946a:	2101      	movs	r1, #1
 800946c:	4620      	mov	r0, r4
 800946e:	f7ff fd83 	bl	8008f78 <rshift>
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	3601      	adds	r6, #1
 8009476:	42b3      	cmp	r3, r6
 8009478:	f6ff aedb 	blt.w	8009232 <__gethex+0x1ea>
 800947c:	f04f 0801 	mov.w	r8, #1
 8009480:	e7c2      	b.n	8009408 <__gethex+0x3c0>
 8009482:	f015 051f 	ands.w	r5, r5, #31
 8009486:	d0f9      	beq.n	800947c <__gethex+0x434>
 8009488:	9b01      	ldr	r3, [sp, #4]
 800948a:	441a      	add	r2, r3
 800948c:	f1c5 0520 	rsb	r5, r5, #32
 8009490:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009494:	f7fe f890 	bl	80075b8 <__hi0bits>
 8009498:	42a8      	cmp	r0, r5
 800949a:	dbe6      	blt.n	800946a <__gethex+0x422>
 800949c:	e7ee      	b.n	800947c <__gethex+0x434>
 800949e:	bf00      	nop
 80094a0:	08009e9d 	.word	0x08009e9d

080094a4 <L_shift>:
 80094a4:	f1c2 0208 	rsb	r2, r2, #8
 80094a8:	0092      	lsls	r2, r2, #2
 80094aa:	b570      	push	{r4, r5, r6, lr}
 80094ac:	f1c2 0620 	rsb	r6, r2, #32
 80094b0:	6843      	ldr	r3, [r0, #4]
 80094b2:	6804      	ldr	r4, [r0, #0]
 80094b4:	fa03 f506 	lsl.w	r5, r3, r6
 80094b8:	432c      	orrs	r4, r5
 80094ba:	40d3      	lsrs	r3, r2
 80094bc:	6004      	str	r4, [r0, #0]
 80094be:	f840 3f04 	str.w	r3, [r0, #4]!
 80094c2:	4288      	cmp	r0, r1
 80094c4:	d3f4      	bcc.n	80094b0 <L_shift+0xc>
 80094c6:	bd70      	pop	{r4, r5, r6, pc}

080094c8 <__match>:
 80094c8:	b530      	push	{r4, r5, lr}
 80094ca:	6803      	ldr	r3, [r0, #0]
 80094cc:	3301      	adds	r3, #1
 80094ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094d2:	b914      	cbnz	r4, 80094da <__match+0x12>
 80094d4:	6003      	str	r3, [r0, #0]
 80094d6:	2001      	movs	r0, #1
 80094d8:	bd30      	pop	{r4, r5, pc}
 80094da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80094e2:	2d19      	cmp	r5, #25
 80094e4:	bf98      	it	ls
 80094e6:	3220      	addls	r2, #32
 80094e8:	42a2      	cmp	r2, r4
 80094ea:	d0f0      	beq.n	80094ce <__match+0x6>
 80094ec:	2000      	movs	r0, #0
 80094ee:	e7f3      	b.n	80094d8 <__match+0x10>

080094f0 <__hexnan>:
 80094f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f4:	680b      	ldr	r3, [r1, #0]
 80094f6:	6801      	ldr	r1, [r0, #0]
 80094f8:	115e      	asrs	r6, r3, #5
 80094fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80094fe:	f013 031f 	ands.w	r3, r3, #31
 8009502:	b087      	sub	sp, #28
 8009504:	bf18      	it	ne
 8009506:	3604      	addne	r6, #4
 8009508:	2500      	movs	r5, #0
 800950a:	1f37      	subs	r7, r6, #4
 800950c:	4682      	mov	sl, r0
 800950e:	4690      	mov	r8, r2
 8009510:	9301      	str	r3, [sp, #4]
 8009512:	f846 5c04 	str.w	r5, [r6, #-4]
 8009516:	46b9      	mov	r9, r7
 8009518:	463c      	mov	r4, r7
 800951a:	9502      	str	r5, [sp, #8]
 800951c:	46ab      	mov	fp, r5
 800951e:	784a      	ldrb	r2, [r1, #1]
 8009520:	1c4b      	adds	r3, r1, #1
 8009522:	9303      	str	r3, [sp, #12]
 8009524:	b342      	cbz	r2, 8009578 <__hexnan+0x88>
 8009526:	4610      	mov	r0, r2
 8009528:	9105      	str	r1, [sp, #20]
 800952a:	9204      	str	r2, [sp, #16]
 800952c:	f7ff fd76 	bl	800901c <__hexdig_fun>
 8009530:	2800      	cmp	r0, #0
 8009532:	d14f      	bne.n	80095d4 <__hexnan+0xe4>
 8009534:	9a04      	ldr	r2, [sp, #16]
 8009536:	9905      	ldr	r1, [sp, #20]
 8009538:	2a20      	cmp	r2, #32
 800953a:	d818      	bhi.n	800956e <__hexnan+0x7e>
 800953c:	9b02      	ldr	r3, [sp, #8]
 800953e:	459b      	cmp	fp, r3
 8009540:	dd13      	ble.n	800956a <__hexnan+0x7a>
 8009542:	454c      	cmp	r4, r9
 8009544:	d206      	bcs.n	8009554 <__hexnan+0x64>
 8009546:	2d07      	cmp	r5, #7
 8009548:	dc04      	bgt.n	8009554 <__hexnan+0x64>
 800954a:	462a      	mov	r2, r5
 800954c:	4649      	mov	r1, r9
 800954e:	4620      	mov	r0, r4
 8009550:	f7ff ffa8 	bl	80094a4 <L_shift>
 8009554:	4544      	cmp	r4, r8
 8009556:	d950      	bls.n	80095fa <__hexnan+0x10a>
 8009558:	2300      	movs	r3, #0
 800955a:	f1a4 0904 	sub.w	r9, r4, #4
 800955e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009562:	f8cd b008 	str.w	fp, [sp, #8]
 8009566:	464c      	mov	r4, r9
 8009568:	461d      	mov	r5, r3
 800956a:	9903      	ldr	r1, [sp, #12]
 800956c:	e7d7      	b.n	800951e <__hexnan+0x2e>
 800956e:	2a29      	cmp	r2, #41	; 0x29
 8009570:	d155      	bne.n	800961e <__hexnan+0x12e>
 8009572:	3102      	adds	r1, #2
 8009574:	f8ca 1000 	str.w	r1, [sl]
 8009578:	f1bb 0f00 	cmp.w	fp, #0
 800957c:	d04f      	beq.n	800961e <__hexnan+0x12e>
 800957e:	454c      	cmp	r4, r9
 8009580:	d206      	bcs.n	8009590 <__hexnan+0xa0>
 8009582:	2d07      	cmp	r5, #7
 8009584:	dc04      	bgt.n	8009590 <__hexnan+0xa0>
 8009586:	462a      	mov	r2, r5
 8009588:	4649      	mov	r1, r9
 800958a:	4620      	mov	r0, r4
 800958c:	f7ff ff8a 	bl	80094a4 <L_shift>
 8009590:	4544      	cmp	r4, r8
 8009592:	d934      	bls.n	80095fe <__hexnan+0x10e>
 8009594:	f1a8 0204 	sub.w	r2, r8, #4
 8009598:	4623      	mov	r3, r4
 800959a:	f853 1b04 	ldr.w	r1, [r3], #4
 800959e:	f842 1f04 	str.w	r1, [r2, #4]!
 80095a2:	429f      	cmp	r7, r3
 80095a4:	d2f9      	bcs.n	800959a <__hexnan+0xaa>
 80095a6:	1b3b      	subs	r3, r7, r4
 80095a8:	f023 0303 	bic.w	r3, r3, #3
 80095ac:	3304      	adds	r3, #4
 80095ae:	3e03      	subs	r6, #3
 80095b0:	3401      	adds	r4, #1
 80095b2:	42a6      	cmp	r6, r4
 80095b4:	bf38      	it	cc
 80095b6:	2304      	movcc	r3, #4
 80095b8:	4443      	add	r3, r8
 80095ba:	2200      	movs	r2, #0
 80095bc:	f843 2b04 	str.w	r2, [r3], #4
 80095c0:	429f      	cmp	r7, r3
 80095c2:	d2fb      	bcs.n	80095bc <__hexnan+0xcc>
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	b91b      	cbnz	r3, 80095d0 <__hexnan+0xe0>
 80095c8:	4547      	cmp	r7, r8
 80095ca:	d126      	bne.n	800961a <__hexnan+0x12a>
 80095cc:	2301      	movs	r3, #1
 80095ce:	603b      	str	r3, [r7, #0]
 80095d0:	2005      	movs	r0, #5
 80095d2:	e025      	b.n	8009620 <__hexnan+0x130>
 80095d4:	3501      	adds	r5, #1
 80095d6:	2d08      	cmp	r5, #8
 80095d8:	f10b 0b01 	add.w	fp, fp, #1
 80095dc:	dd06      	ble.n	80095ec <__hexnan+0xfc>
 80095de:	4544      	cmp	r4, r8
 80095e0:	d9c3      	bls.n	800956a <__hexnan+0x7a>
 80095e2:	2300      	movs	r3, #0
 80095e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80095e8:	2501      	movs	r5, #1
 80095ea:	3c04      	subs	r4, #4
 80095ec:	6822      	ldr	r2, [r4, #0]
 80095ee:	f000 000f 	and.w	r0, r0, #15
 80095f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80095f6:	6020      	str	r0, [r4, #0]
 80095f8:	e7b7      	b.n	800956a <__hexnan+0x7a>
 80095fa:	2508      	movs	r5, #8
 80095fc:	e7b5      	b.n	800956a <__hexnan+0x7a>
 80095fe:	9b01      	ldr	r3, [sp, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d0df      	beq.n	80095c4 <__hexnan+0xd4>
 8009604:	f1c3 0320 	rsb	r3, r3, #32
 8009608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800960c:	40da      	lsrs	r2, r3
 800960e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009612:	4013      	ands	r3, r2
 8009614:	f846 3c04 	str.w	r3, [r6, #-4]
 8009618:	e7d4      	b.n	80095c4 <__hexnan+0xd4>
 800961a:	3f04      	subs	r7, #4
 800961c:	e7d2      	b.n	80095c4 <__hexnan+0xd4>
 800961e:	2004      	movs	r0, #4
 8009620:	b007      	add	sp, #28
 8009622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009626 <__ascii_mbtowc>:
 8009626:	b082      	sub	sp, #8
 8009628:	b901      	cbnz	r1, 800962c <__ascii_mbtowc+0x6>
 800962a:	a901      	add	r1, sp, #4
 800962c:	b142      	cbz	r2, 8009640 <__ascii_mbtowc+0x1a>
 800962e:	b14b      	cbz	r3, 8009644 <__ascii_mbtowc+0x1e>
 8009630:	7813      	ldrb	r3, [r2, #0]
 8009632:	600b      	str	r3, [r1, #0]
 8009634:	7812      	ldrb	r2, [r2, #0]
 8009636:	1e10      	subs	r0, r2, #0
 8009638:	bf18      	it	ne
 800963a:	2001      	movne	r0, #1
 800963c:	b002      	add	sp, #8
 800963e:	4770      	bx	lr
 8009640:	4610      	mov	r0, r2
 8009642:	e7fb      	b.n	800963c <__ascii_mbtowc+0x16>
 8009644:	f06f 0001 	mvn.w	r0, #1
 8009648:	e7f8      	b.n	800963c <__ascii_mbtowc+0x16>

0800964a <_realloc_r>:
 800964a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800964e:	4680      	mov	r8, r0
 8009650:	4614      	mov	r4, r2
 8009652:	460e      	mov	r6, r1
 8009654:	b921      	cbnz	r1, 8009660 <_realloc_r+0x16>
 8009656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800965a:	4611      	mov	r1, r2
 800965c:	f7fd be2e 	b.w	80072bc <_malloc_r>
 8009660:	b92a      	cbnz	r2, 800966e <_realloc_r+0x24>
 8009662:	f7fd fdb7 	bl	80071d4 <_free_r>
 8009666:	4625      	mov	r5, r4
 8009668:	4628      	mov	r0, r5
 800966a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800966e:	f000 f842 	bl	80096f6 <_malloc_usable_size_r>
 8009672:	4284      	cmp	r4, r0
 8009674:	4607      	mov	r7, r0
 8009676:	d802      	bhi.n	800967e <_realloc_r+0x34>
 8009678:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800967c:	d812      	bhi.n	80096a4 <_realloc_r+0x5a>
 800967e:	4621      	mov	r1, r4
 8009680:	4640      	mov	r0, r8
 8009682:	f7fd fe1b 	bl	80072bc <_malloc_r>
 8009686:	4605      	mov	r5, r0
 8009688:	2800      	cmp	r0, #0
 800968a:	d0ed      	beq.n	8009668 <_realloc_r+0x1e>
 800968c:	42bc      	cmp	r4, r7
 800968e:	4622      	mov	r2, r4
 8009690:	4631      	mov	r1, r6
 8009692:	bf28      	it	cs
 8009694:	463a      	movcs	r2, r7
 8009696:	f7ff fc23 	bl	8008ee0 <memcpy>
 800969a:	4631      	mov	r1, r6
 800969c:	4640      	mov	r0, r8
 800969e:	f7fd fd99 	bl	80071d4 <_free_r>
 80096a2:	e7e1      	b.n	8009668 <_realloc_r+0x1e>
 80096a4:	4635      	mov	r5, r6
 80096a6:	e7df      	b.n	8009668 <_realloc_r+0x1e>

080096a8 <__ascii_wctomb>:
 80096a8:	b149      	cbz	r1, 80096be <__ascii_wctomb+0x16>
 80096aa:	2aff      	cmp	r2, #255	; 0xff
 80096ac:	bf85      	ittet	hi
 80096ae:	238a      	movhi	r3, #138	; 0x8a
 80096b0:	6003      	strhi	r3, [r0, #0]
 80096b2:	700a      	strbls	r2, [r1, #0]
 80096b4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80096b8:	bf98      	it	ls
 80096ba:	2001      	movls	r0, #1
 80096bc:	4770      	bx	lr
 80096be:	4608      	mov	r0, r1
 80096c0:	4770      	bx	lr
	...

080096c4 <fiprintf>:
 80096c4:	b40e      	push	{r1, r2, r3}
 80096c6:	b503      	push	{r0, r1, lr}
 80096c8:	4601      	mov	r1, r0
 80096ca:	ab03      	add	r3, sp, #12
 80096cc:	4805      	ldr	r0, [pc, #20]	; (80096e4 <fiprintf+0x20>)
 80096ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d2:	6800      	ldr	r0, [r0, #0]
 80096d4:	9301      	str	r3, [sp, #4]
 80096d6:	f000 f83f 	bl	8009758 <_vfiprintf_r>
 80096da:	b002      	add	sp, #8
 80096dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80096e0:	b003      	add	sp, #12
 80096e2:	4770      	bx	lr
 80096e4:	2000009c 	.word	0x2000009c

080096e8 <abort>:
 80096e8:	b508      	push	{r3, lr}
 80096ea:	2006      	movs	r0, #6
 80096ec:	f000 fa0c 	bl	8009b08 <raise>
 80096f0:	2001      	movs	r0, #1
 80096f2:	f7f8 f8bf 	bl	8001874 <_exit>

080096f6 <_malloc_usable_size_r>:
 80096f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096fa:	1f18      	subs	r0, r3, #4
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	bfbc      	itt	lt
 8009700:	580b      	ldrlt	r3, [r1, r0]
 8009702:	18c0      	addlt	r0, r0, r3
 8009704:	4770      	bx	lr

08009706 <__sfputc_r>:
 8009706:	6893      	ldr	r3, [r2, #8]
 8009708:	3b01      	subs	r3, #1
 800970a:	2b00      	cmp	r3, #0
 800970c:	b410      	push	{r4}
 800970e:	6093      	str	r3, [r2, #8]
 8009710:	da08      	bge.n	8009724 <__sfputc_r+0x1e>
 8009712:	6994      	ldr	r4, [r2, #24]
 8009714:	42a3      	cmp	r3, r4
 8009716:	db01      	blt.n	800971c <__sfputc_r+0x16>
 8009718:	290a      	cmp	r1, #10
 800971a:	d103      	bne.n	8009724 <__sfputc_r+0x1e>
 800971c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009720:	f000 b934 	b.w	800998c <__swbuf_r>
 8009724:	6813      	ldr	r3, [r2, #0]
 8009726:	1c58      	adds	r0, r3, #1
 8009728:	6010      	str	r0, [r2, #0]
 800972a:	7019      	strb	r1, [r3, #0]
 800972c:	4608      	mov	r0, r1
 800972e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009732:	4770      	bx	lr

08009734 <__sfputs_r>:
 8009734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009736:	4606      	mov	r6, r0
 8009738:	460f      	mov	r7, r1
 800973a:	4614      	mov	r4, r2
 800973c:	18d5      	adds	r5, r2, r3
 800973e:	42ac      	cmp	r4, r5
 8009740:	d101      	bne.n	8009746 <__sfputs_r+0x12>
 8009742:	2000      	movs	r0, #0
 8009744:	e007      	b.n	8009756 <__sfputs_r+0x22>
 8009746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800974a:	463a      	mov	r2, r7
 800974c:	4630      	mov	r0, r6
 800974e:	f7ff ffda 	bl	8009706 <__sfputc_r>
 8009752:	1c43      	adds	r3, r0, #1
 8009754:	d1f3      	bne.n	800973e <__sfputs_r+0xa>
 8009756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009758 <_vfiprintf_r>:
 8009758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975c:	460d      	mov	r5, r1
 800975e:	b09d      	sub	sp, #116	; 0x74
 8009760:	4614      	mov	r4, r2
 8009762:	4698      	mov	r8, r3
 8009764:	4606      	mov	r6, r0
 8009766:	b118      	cbz	r0, 8009770 <_vfiprintf_r+0x18>
 8009768:	6a03      	ldr	r3, [r0, #32]
 800976a:	b90b      	cbnz	r3, 8009770 <_vfiprintf_r+0x18>
 800976c:	f7fc fd64 	bl	8006238 <__sinit>
 8009770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009772:	07d9      	lsls	r1, r3, #31
 8009774:	d405      	bmi.n	8009782 <_vfiprintf_r+0x2a>
 8009776:	89ab      	ldrh	r3, [r5, #12]
 8009778:	059a      	lsls	r2, r3, #22
 800977a:	d402      	bmi.n	8009782 <_vfiprintf_r+0x2a>
 800977c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800977e:	f7fc fea6 	bl	80064ce <__retarget_lock_acquire_recursive>
 8009782:	89ab      	ldrh	r3, [r5, #12]
 8009784:	071b      	lsls	r3, r3, #28
 8009786:	d501      	bpl.n	800978c <_vfiprintf_r+0x34>
 8009788:	692b      	ldr	r3, [r5, #16]
 800978a:	b99b      	cbnz	r3, 80097b4 <_vfiprintf_r+0x5c>
 800978c:	4629      	mov	r1, r5
 800978e:	4630      	mov	r0, r6
 8009790:	f000 f93a 	bl	8009a08 <__swsetup_r>
 8009794:	b170      	cbz	r0, 80097b4 <_vfiprintf_r+0x5c>
 8009796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009798:	07dc      	lsls	r4, r3, #31
 800979a:	d504      	bpl.n	80097a6 <_vfiprintf_r+0x4e>
 800979c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097a0:	b01d      	add	sp, #116	; 0x74
 80097a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a6:	89ab      	ldrh	r3, [r5, #12]
 80097a8:	0598      	lsls	r0, r3, #22
 80097aa:	d4f7      	bmi.n	800979c <_vfiprintf_r+0x44>
 80097ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097ae:	f7fc fe8f 	bl	80064d0 <__retarget_lock_release_recursive>
 80097b2:	e7f3      	b.n	800979c <_vfiprintf_r+0x44>
 80097b4:	2300      	movs	r3, #0
 80097b6:	9309      	str	r3, [sp, #36]	; 0x24
 80097b8:	2320      	movs	r3, #32
 80097ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097be:	f8cd 800c 	str.w	r8, [sp, #12]
 80097c2:	2330      	movs	r3, #48	; 0x30
 80097c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009978 <_vfiprintf_r+0x220>
 80097c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097cc:	f04f 0901 	mov.w	r9, #1
 80097d0:	4623      	mov	r3, r4
 80097d2:	469a      	mov	sl, r3
 80097d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097d8:	b10a      	cbz	r2, 80097de <_vfiprintf_r+0x86>
 80097da:	2a25      	cmp	r2, #37	; 0x25
 80097dc:	d1f9      	bne.n	80097d2 <_vfiprintf_r+0x7a>
 80097de:	ebba 0b04 	subs.w	fp, sl, r4
 80097e2:	d00b      	beq.n	80097fc <_vfiprintf_r+0xa4>
 80097e4:	465b      	mov	r3, fp
 80097e6:	4622      	mov	r2, r4
 80097e8:	4629      	mov	r1, r5
 80097ea:	4630      	mov	r0, r6
 80097ec:	f7ff ffa2 	bl	8009734 <__sfputs_r>
 80097f0:	3001      	adds	r0, #1
 80097f2:	f000 80a9 	beq.w	8009948 <_vfiprintf_r+0x1f0>
 80097f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097f8:	445a      	add	r2, fp
 80097fa:	9209      	str	r2, [sp, #36]	; 0x24
 80097fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009800:	2b00      	cmp	r3, #0
 8009802:	f000 80a1 	beq.w	8009948 <_vfiprintf_r+0x1f0>
 8009806:	2300      	movs	r3, #0
 8009808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800980c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009810:	f10a 0a01 	add.w	sl, sl, #1
 8009814:	9304      	str	r3, [sp, #16]
 8009816:	9307      	str	r3, [sp, #28]
 8009818:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800981c:	931a      	str	r3, [sp, #104]	; 0x68
 800981e:	4654      	mov	r4, sl
 8009820:	2205      	movs	r2, #5
 8009822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009826:	4854      	ldr	r0, [pc, #336]	; (8009978 <_vfiprintf_r+0x220>)
 8009828:	f7f6 fce2 	bl	80001f0 <memchr>
 800982c:	9a04      	ldr	r2, [sp, #16]
 800982e:	b9d8      	cbnz	r0, 8009868 <_vfiprintf_r+0x110>
 8009830:	06d1      	lsls	r1, r2, #27
 8009832:	bf44      	itt	mi
 8009834:	2320      	movmi	r3, #32
 8009836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800983a:	0713      	lsls	r3, r2, #28
 800983c:	bf44      	itt	mi
 800983e:	232b      	movmi	r3, #43	; 0x2b
 8009840:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009844:	f89a 3000 	ldrb.w	r3, [sl]
 8009848:	2b2a      	cmp	r3, #42	; 0x2a
 800984a:	d015      	beq.n	8009878 <_vfiprintf_r+0x120>
 800984c:	9a07      	ldr	r2, [sp, #28]
 800984e:	4654      	mov	r4, sl
 8009850:	2000      	movs	r0, #0
 8009852:	f04f 0c0a 	mov.w	ip, #10
 8009856:	4621      	mov	r1, r4
 8009858:	f811 3b01 	ldrb.w	r3, [r1], #1
 800985c:	3b30      	subs	r3, #48	; 0x30
 800985e:	2b09      	cmp	r3, #9
 8009860:	d94d      	bls.n	80098fe <_vfiprintf_r+0x1a6>
 8009862:	b1b0      	cbz	r0, 8009892 <_vfiprintf_r+0x13a>
 8009864:	9207      	str	r2, [sp, #28]
 8009866:	e014      	b.n	8009892 <_vfiprintf_r+0x13a>
 8009868:	eba0 0308 	sub.w	r3, r0, r8
 800986c:	fa09 f303 	lsl.w	r3, r9, r3
 8009870:	4313      	orrs	r3, r2
 8009872:	9304      	str	r3, [sp, #16]
 8009874:	46a2      	mov	sl, r4
 8009876:	e7d2      	b.n	800981e <_vfiprintf_r+0xc6>
 8009878:	9b03      	ldr	r3, [sp, #12]
 800987a:	1d19      	adds	r1, r3, #4
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	9103      	str	r1, [sp, #12]
 8009880:	2b00      	cmp	r3, #0
 8009882:	bfbb      	ittet	lt
 8009884:	425b      	neglt	r3, r3
 8009886:	f042 0202 	orrlt.w	r2, r2, #2
 800988a:	9307      	strge	r3, [sp, #28]
 800988c:	9307      	strlt	r3, [sp, #28]
 800988e:	bfb8      	it	lt
 8009890:	9204      	strlt	r2, [sp, #16]
 8009892:	7823      	ldrb	r3, [r4, #0]
 8009894:	2b2e      	cmp	r3, #46	; 0x2e
 8009896:	d10c      	bne.n	80098b2 <_vfiprintf_r+0x15a>
 8009898:	7863      	ldrb	r3, [r4, #1]
 800989a:	2b2a      	cmp	r3, #42	; 0x2a
 800989c:	d134      	bne.n	8009908 <_vfiprintf_r+0x1b0>
 800989e:	9b03      	ldr	r3, [sp, #12]
 80098a0:	1d1a      	adds	r2, r3, #4
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	9203      	str	r2, [sp, #12]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	bfb8      	it	lt
 80098aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80098ae:	3402      	adds	r4, #2
 80098b0:	9305      	str	r3, [sp, #20]
 80098b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009988 <_vfiprintf_r+0x230>
 80098b6:	7821      	ldrb	r1, [r4, #0]
 80098b8:	2203      	movs	r2, #3
 80098ba:	4650      	mov	r0, sl
 80098bc:	f7f6 fc98 	bl	80001f0 <memchr>
 80098c0:	b138      	cbz	r0, 80098d2 <_vfiprintf_r+0x17a>
 80098c2:	9b04      	ldr	r3, [sp, #16]
 80098c4:	eba0 000a 	sub.w	r0, r0, sl
 80098c8:	2240      	movs	r2, #64	; 0x40
 80098ca:	4082      	lsls	r2, r0
 80098cc:	4313      	orrs	r3, r2
 80098ce:	3401      	adds	r4, #1
 80098d0:	9304      	str	r3, [sp, #16]
 80098d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d6:	4829      	ldr	r0, [pc, #164]	; (800997c <_vfiprintf_r+0x224>)
 80098d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098dc:	2206      	movs	r2, #6
 80098de:	f7f6 fc87 	bl	80001f0 <memchr>
 80098e2:	2800      	cmp	r0, #0
 80098e4:	d03f      	beq.n	8009966 <_vfiprintf_r+0x20e>
 80098e6:	4b26      	ldr	r3, [pc, #152]	; (8009980 <_vfiprintf_r+0x228>)
 80098e8:	bb1b      	cbnz	r3, 8009932 <_vfiprintf_r+0x1da>
 80098ea:	9b03      	ldr	r3, [sp, #12]
 80098ec:	3307      	adds	r3, #7
 80098ee:	f023 0307 	bic.w	r3, r3, #7
 80098f2:	3308      	adds	r3, #8
 80098f4:	9303      	str	r3, [sp, #12]
 80098f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f8:	443b      	add	r3, r7
 80098fa:	9309      	str	r3, [sp, #36]	; 0x24
 80098fc:	e768      	b.n	80097d0 <_vfiprintf_r+0x78>
 80098fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009902:	460c      	mov	r4, r1
 8009904:	2001      	movs	r0, #1
 8009906:	e7a6      	b.n	8009856 <_vfiprintf_r+0xfe>
 8009908:	2300      	movs	r3, #0
 800990a:	3401      	adds	r4, #1
 800990c:	9305      	str	r3, [sp, #20]
 800990e:	4619      	mov	r1, r3
 8009910:	f04f 0c0a 	mov.w	ip, #10
 8009914:	4620      	mov	r0, r4
 8009916:	f810 2b01 	ldrb.w	r2, [r0], #1
 800991a:	3a30      	subs	r2, #48	; 0x30
 800991c:	2a09      	cmp	r2, #9
 800991e:	d903      	bls.n	8009928 <_vfiprintf_r+0x1d0>
 8009920:	2b00      	cmp	r3, #0
 8009922:	d0c6      	beq.n	80098b2 <_vfiprintf_r+0x15a>
 8009924:	9105      	str	r1, [sp, #20]
 8009926:	e7c4      	b.n	80098b2 <_vfiprintf_r+0x15a>
 8009928:	fb0c 2101 	mla	r1, ip, r1, r2
 800992c:	4604      	mov	r4, r0
 800992e:	2301      	movs	r3, #1
 8009930:	e7f0      	b.n	8009914 <_vfiprintf_r+0x1bc>
 8009932:	ab03      	add	r3, sp, #12
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	462a      	mov	r2, r5
 8009938:	4b12      	ldr	r3, [pc, #72]	; (8009984 <_vfiprintf_r+0x22c>)
 800993a:	a904      	add	r1, sp, #16
 800993c:	4630      	mov	r0, r6
 800993e:	f7fb fe19 	bl	8005574 <_printf_float>
 8009942:	4607      	mov	r7, r0
 8009944:	1c78      	adds	r0, r7, #1
 8009946:	d1d6      	bne.n	80098f6 <_vfiprintf_r+0x19e>
 8009948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800994a:	07d9      	lsls	r1, r3, #31
 800994c:	d405      	bmi.n	800995a <_vfiprintf_r+0x202>
 800994e:	89ab      	ldrh	r3, [r5, #12]
 8009950:	059a      	lsls	r2, r3, #22
 8009952:	d402      	bmi.n	800995a <_vfiprintf_r+0x202>
 8009954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009956:	f7fc fdbb 	bl	80064d0 <__retarget_lock_release_recursive>
 800995a:	89ab      	ldrh	r3, [r5, #12]
 800995c:	065b      	lsls	r3, r3, #25
 800995e:	f53f af1d 	bmi.w	800979c <_vfiprintf_r+0x44>
 8009962:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009964:	e71c      	b.n	80097a0 <_vfiprintf_r+0x48>
 8009966:	ab03      	add	r3, sp, #12
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	462a      	mov	r2, r5
 800996c:	4b05      	ldr	r3, [pc, #20]	; (8009984 <_vfiprintf_r+0x22c>)
 800996e:	a904      	add	r1, sp, #16
 8009970:	4630      	mov	r0, r6
 8009972:	f7fc f8a3 	bl	8005abc <_printf_i>
 8009976:	e7e4      	b.n	8009942 <_vfiprintf_r+0x1ea>
 8009978:	0800a159 	.word	0x0800a159
 800997c:	0800a163 	.word	0x0800a163
 8009980:	08005575 	.word	0x08005575
 8009984:	08009735 	.word	0x08009735
 8009988:	0800a15f 	.word	0x0800a15f

0800998c <__swbuf_r>:
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998e:	460e      	mov	r6, r1
 8009990:	4614      	mov	r4, r2
 8009992:	4605      	mov	r5, r0
 8009994:	b118      	cbz	r0, 800999e <__swbuf_r+0x12>
 8009996:	6a03      	ldr	r3, [r0, #32]
 8009998:	b90b      	cbnz	r3, 800999e <__swbuf_r+0x12>
 800999a:	f7fc fc4d 	bl	8006238 <__sinit>
 800999e:	69a3      	ldr	r3, [r4, #24]
 80099a0:	60a3      	str	r3, [r4, #8]
 80099a2:	89a3      	ldrh	r3, [r4, #12]
 80099a4:	071a      	lsls	r2, r3, #28
 80099a6:	d525      	bpl.n	80099f4 <__swbuf_r+0x68>
 80099a8:	6923      	ldr	r3, [r4, #16]
 80099aa:	b31b      	cbz	r3, 80099f4 <__swbuf_r+0x68>
 80099ac:	6823      	ldr	r3, [r4, #0]
 80099ae:	6922      	ldr	r2, [r4, #16]
 80099b0:	1a98      	subs	r0, r3, r2
 80099b2:	6963      	ldr	r3, [r4, #20]
 80099b4:	b2f6      	uxtb	r6, r6
 80099b6:	4283      	cmp	r3, r0
 80099b8:	4637      	mov	r7, r6
 80099ba:	dc04      	bgt.n	80099c6 <__swbuf_r+0x3a>
 80099bc:	4621      	mov	r1, r4
 80099be:	4628      	mov	r0, r5
 80099c0:	f7ff fa2a 	bl	8008e18 <_fflush_r>
 80099c4:	b9e0      	cbnz	r0, 8009a00 <__swbuf_r+0x74>
 80099c6:	68a3      	ldr	r3, [r4, #8]
 80099c8:	3b01      	subs	r3, #1
 80099ca:	60a3      	str	r3, [r4, #8]
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	6022      	str	r2, [r4, #0]
 80099d2:	701e      	strb	r6, [r3, #0]
 80099d4:	6962      	ldr	r2, [r4, #20]
 80099d6:	1c43      	adds	r3, r0, #1
 80099d8:	429a      	cmp	r2, r3
 80099da:	d004      	beq.n	80099e6 <__swbuf_r+0x5a>
 80099dc:	89a3      	ldrh	r3, [r4, #12]
 80099de:	07db      	lsls	r3, r3, #31
 80099e0:	d506      	bpl.n	80099f0 <__swbuf_r+0x64>
 80099e2:	2e0a      	cmp	r6, #10
 80099e4:	d104      	bne.n	80099f0 <__swbuf_r+0x64>
 80099e6:	4621      	mov	r1, r4
 80099e8:	4628      	mov	r0, r5
 80099ea:	f7ff fa15 	bl	8008e18 <_fflush_r>
 80099ee:	b938      	cbnz	r0, 8009a00 <__swbuf_r+0x74>
 80099f0:	4638      	mov	r0, r7
 80099f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099f4:	4621      	mov	r1, r4
 80099f6:	4628      	mov	r0, r5
 80099f8:	f000 f806 	bl	8009a08 <__swsetup_r>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d0d5      	beq.n	80099ac <__swbuf_r+0x20>
 8009a00:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009a04:	e7f4      	b.n	80099f0 <__swbuf_r+0x64>
	...

08009a08 <__swsetup_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	4b2a      	ldr	r3, [pc, #168]	; (8009ab4 <__swsetup_r+0xac>)
 8009a0c:	4605      	mov	r5, r0
 8009a0e:	6818      	ldr	r0, [r3, #0]
 8009a10:	460c      	mov	r4, r1
 8009a12:	b118      	cbz	r0, 8009a1c <__swsetup_r+0x14>
 8009a14:	6a03      	ldr	r3, [r0, #32]
 8009a16:	b90b      	cbnz	r3, 8009a1c <__swsetup_r+0x14>
 8009a18:	f7fc fc0e 	bl	8006238 <__sinit>
 8009a1c:	89a3      	ldrh	r3, [r4, #12]
 8009a1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a22:	0718      	lsls	r0, r3, #28
 8009a24:	d422      	bmi.n	8009a6c <__swsetup_r+0x64>
 8009a26:	06d9      	lsls	r1, r3, #27
 8009a28:	d407      	bmi.n	8009a3a <__swsetup_r+0x32>
 8009a2a:	2309      	movs	r3, #9
 8009a2c:	602b      	str	r3, [r5, #0]
 8009a2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a32:	81a3      	strh	r3, [r4, #12]
 8009a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a38:	e034      	b.n	8009aa4 <__swsetup_r+0x9c>
 8009a3a:	0758      	lsls	r0, r3, #29
 8009a3c:	d512      	bpl.n	8009a64 <__swsetup_r+0x5c>
 8009a3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a40:	b141      	cbz	r1, 8009a54 <__swsetup_r+0x4c>
 8009a42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a46:	4299      	cmp	r1, r3
 8009a48:	d002      	beq.n	8009a50 <__swsetup_r+0x48>
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	f7fd fbc2 	bl	80071d4 <_free_r>
 8009a50:	2300      	movs	r3, #0
 8009a52:	6363      	str	r3, [r4, #52]	; 0x34
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a5a:	81a3      	strh	r3, [r4, #12]
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	6063      	str	r3, [r4, #4]
 8009a60:	6923      	ldr	r3, [r4, #16]
 8009a62:	6023      	str	r3, [r4, #0]
 8009a64:	89a3      	ldrh	r3, [r4, #12]
 8009a66:	f043 0308 	orr.w	r3, r3, #8
 8009a6a:	81a3      	strh	r3, [r4, #12]
 8009a6c:	6923      	ldr	r3, [r4, #16]
 8009a6e:	b94b      	cbnz	r3, 8009a84 <__swsetup_r+0x7c>
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a7a:	d003      	beq.n	8009a84 <__swsetup_r+0x7c>
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	4628      	mov	r0, r5
 8009a80:	f000 f884 	bl	8009b8c <__smakebuf_r>
 8009a84:	89a0      	ldrh	r0, [r4, #12]
 8009a86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a8a:	f010 0301 	ands.w	r3, r0, #1
 8009a8e:	d00a      	beq.n	8009aa6 <__swsetup_r+0x9e>
 8009a90:	2300      	movs	r3, #0
 8009a92:	60a3      	str	r3, [r4, #8]
 8009a94:	6963      	ldr	r3, [r4, #20]
 8009a96:	425b      	negs	r3, r3
 8009a98:	61a3      	str	r3, [r4, #24]
 8009a9a:	6923      	ldr	r3, [r4, #16]
 8009a9c:	b943      	cbnz	r3, 8009ab0 <__swsetup_r+0xa8>
 8009a9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009aa2:	d1c4      	bne.n	8009a2e <__swsetup_r+0x26>
 8009aa4:	bd38      	pop	{r3, r4, r5, pc}
 8009aa6:	0781      	lsls	r1, r0, #30
 8009aa8:	bf58      	it	pl
 8009aaa:	6963      	ldrpl	r3, [r4, #20]
 8009aac:	60a3      	str	r3, [r4, #8]
 8009aae:	e7f4      	b.n	8009a9a <__swsetup_r+0x92>
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	e7f7      	b.n	8009aa4 <__swsetup_r+0x9c>
 8009ab4:	2000009c 	.word	0x2000009c

08009ab8 <_raise_r>:
 8009ab8:	291f      	cmp	r1, #31
 8009aba:	b538      	push	{r3, r4, r5, lr}
 8009abc:	4604      	mov	r4, r0
 8009abe:	460d      	mov	r5, r1
 8009ac0:	d904      	bls.n	8009acc <_raise_r+0x14>
 8009ac2:	2316      	movs	r3, #22
 8009ac4:	6003      	str	r3, [r0, #0]
 8009ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009ace:	b112      	cbz	r2, 8009ad6 <_raise_r+0x1e>
 8009ad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ad4:	b94b      	cbnz	r3, 8009aea <_raise_r+0x32>
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f000 f830 	bl	8009b3c <_getpid_r>
 8009adc:	462a      	mov	r2, r5
 8009ade:	4601      	mov	r1, r0
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ae6:	f000 b817 	b.w	8009b18 <_kill_r>
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d00a      	beq.n	8009b04 <_raise_r+0x4c>
 8009aee:	1c59      	adds	r1, r3, #1
 8009af0:	d103      	bne.n	8009afa <_raise_r+0x42>
 8009af2:	2316      	movs	r3, #22
 8009af4:	6003      	str	r3, [r0, #0]
 8009af6:	2001      	movs	r0, #1
 8009af8:	e7e7      	b.n	8009aca <_raise_r+0x12>
 8009afa:	2400      	movs	r4, #0
 8009afc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b00:	4628      	mov	r0, r5
 8009b02:	4798      	blx	r3
 8009b04:	2000      	movs	r0, #0
 8009b06:	e7e0      	b.n	8009aca <_raise_r+0x12>

08009b08 <raise>:
 8009b08:	4b02      	ldr	r3, [pc, #8]	; (8009b14 <raise+0xc>)
 8009b0a:	4601      	mov	r1, r0
 8009b0c:	6818      	ldr	r0, [r3, #0]
 8009b0e:	f7ff bfd3 	b.w	8009ab8 <_raise_r>
 8009b12:	bf00      	nop
 8009b14:	2000009c 	.word	0x2000009c

08009b18 <_kill_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	4d07      	ldr	r5, [pc, #28]	; (8009b38 <_kill_r+0x20>)
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4604      	mov	r4, r0
 8009b20:	4608      	mov	r0, r1
 8009b22:	4611      	mov	r1, r2
 8009b24:	602b      	str	r3, [r5, #0]
 8009b26:	f7f7 fe95 	bl	8001854 <_kill>
 8009b2a:	1c43      	adds	r3, r0, #1
 8009b2c:	d102      	bne.n	8009b34 <_kill_r+0x1c>
 8009b2e:	682b      	ldr	r3, [r5, #0]
 8009b30:	b103      	cbz	r3, 8009b34 <_kill_r+0x1c>
 8009b32:	6023      	str	r3, [r4, #0]
 8009b34:	bd38      	pop	{r3, r4, r5, pc}
 8009b36:	bf00      	nop
 8009b38:	20000c14 	.word	0x20000c14

08009b3c <_getpid_r>:
 8009b3c:	f7f7 be82 	b.w	8001844 <_getpid>

08009b40 <__swhatbuf_r>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	460c      	mov	r4, r1
 8009b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b48:	2900      	cmp	r1, #0
 8009b4a:	b096      	sub	sp, #88	; 0x58
 8009b4c:	4615      	mov	r5, r2
 8009b4e:	461e      	mov	r6, r3
 8009b50:	da0d      	bge.n	8009b6e <__swhatbuf_r+0x2e>
 8009b52:	89a3      	ldrh	r3, [r4, #12]
 8009b54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b58:	f04f 0100 	mov.w	r1, #0
 8009b5c:	bf0c      	ite	eq
 8009b5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009b62:	2340      	movne	r3, #64	; 0x40
 8009b64:	2000      	movs	r0, #0
 8009b66:	6031      	str	r1, [r6, #0]
 8009b68:	602b      	str	r3, [r5, #0]
 8009b6a:	b016      	add	sp, #88	; 0x58
 8009b6c:	bd70      	pop	{r4, r5, r6, pc}
 8009b6e:	466a      	mov	r2, sp
 8009b70:	f000 f848 	bl	8009c04 <_fstat_r>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	dbec      	blt.n	8009b52 <__swhatbuf_r+0x12>
 8009b78:	9901      	ldr	r1, [sp, #4]
 8009b7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009b7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009b82:	4259      	negs	r1, r3
 8009b84:	4159      	adcs	r1, r3
 8009b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b8a:	e7eb      	b.n	8009b64 <__swhatbuf_r+0x24>

08009b8c <__smakebuf_r>:
 8009b8c:	898b      	ldrh	r3, [r1, #12]
 8009b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b90:	079d      	lsls	r5, r3, #30
 8009b92:	4606      	mov	r6, r0
 8009b94:	460c      	mov	r4, r1
 8009b96:	d507      	bpl.n	8009ba8 <__smakebuf_r+0x1c>
 8009b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b9c:	6023      	str	r3, [r4, #0]
 8009b9e:	6123      	str	r3, [r4, #16]
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	6163      	str	r3, [r4, #20]
 8009ba4:	b002      	add	sp, #8
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}
 8009ba8:	ab01      	add	r3, sp, #4
 8009baa:	466a      	mov	r2, sp
 8009bac:	f7ff ffc8 	bl	8009b40 <__swhatbuf_r>
 8009bb0:	9900      	ldr	r1, [sp, #0]
 8009bb2:	4605      	mov	r5, r0
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f7fd fb81 	bl	80072bc <_malloc_r>
 8009bba:	b948      	cbnz	r0, 8009bd0 <__smakebuf_r+0x44>
 8009bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bc0:	059a      	lsls	r2, r3, #22
 8009bc2:	d4ef      	bmi.n	8009ba4 <__smakebuf_r+0x18>
 8009bc4:	f023 0303 	bic.w	r3, r3, #3
 8009bc8:	f043 0302 	orr.w	r3, r3, #2
 8009bcc:	81a3      	strh	r3, [r4, #12]
 8009bce:	e7e3      	b.n	8009b98 <__smakebuf_r+0xc>
 8009bd0:	89a3      	ldrh	r3, [r4, #12]
 8009bd2:	6020      	str	r0, [r4, #0]
 8009bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bd8:	81a3      	strh	r3, [r4, #12]
 8009bda:	9b00      	ldr	r3, [sp, #0]
 8009bdc:	6163      	str	r3, [r4, #20]
 8009bde:	9b01      	ldr	r3, [sp, #4]
 8009be0:	6120      	str	r0, [r4, #16]
 8009be2:	b15b      	cbz	r3, 8009bfc <__smakebuf_r+0x70>
 8009be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009be8:	4630      	mov	r0, r6
 8009bea:	f000 f81d 	bl	8009c28 <_isatty_r>
 8009bee:	b128      	cbz	r0, 8009bfc <__smakebuf_r+0x70>
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	f023 0303 	bic.w	r3, r3, #3
 8009bf6:	f043 0301 	orr.w	r3, r3, #1
 8009bfa:	81a3      	strh	r3, [r4, #12]
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	431d      	orrs	r5, r3
 8009c00:	81a5      	strh	r5, [r4, #12]
 8009c02:	e7cf      	b.n	8009ba4 <__smakebuf_r+0x18>

08009c04 <_fstat_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	4d07      	ldr	r5, [pc, #28]	; (8009c24 <_fstat_r+0x20>)
 8009c08:	2300      	movs	r3, #0
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	4608      	mov	r0, r1
 8009c0e:	4611      	mov	r1, r2
 8009c10:	602b      	str	r3, [r5, #0]
 8009c12:	f7f7 fe7e 	bl	8001912 <_fstat>
 8009c16:	1c43      	adds	r3, r0, #1
 8009c18:	d102      	bne.n	8009c20 <_fstat_r+0x1c>
 8009c1a:	682b      	ldr	r3, [r5, #0]
 8009c1c:	b103      	cbz	r3, 8009c20 <_fstat_r+0x1c>
 8009c1e:	6023      	str	r3, [r4, #0]
 8009c20:	bd38      	pop	{r3, r4, r5, pc}
 8009c22:	bf00      	nop
 8009c24:	20000c14 	.word	0x20000c14

08009c28 <_isatty_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	4d06      	ldr	r5, [pc, #24]	; (8009c44 <_isatty_r+0x1c>)
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	4604      	mov	r4, r0
 8009c30:	4608      	mov	r0, r1
 8009c32:	602b      	str	r3, [r5, #0]
 8009c34:	f7f7 fe7d 	bl	8001932 <_isatty>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_isatty_r+0x1a>
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_isatty_r+0x1a>
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	20000c14 	.word	0x20000c14

08009c48 <_init>:
 8009c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4a:	bf00      	nop
 8009c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4e:	bc08      	pop	{r3}
 8009c50:	469e      	mov	lr, r3
 8009c52:	4770      	bx	lr

08009c54 <_fini>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	bf00      	nop
 8009c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5a:	bc08      	pop	{r3}
 8009c5c:	469e      	mov	lr, r3
 8009c5e:	4770      	bx	lr
