
Practica_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f78  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004248  08004248  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004248  08004248  00014248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004250  08004250  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004250  08004250  00014250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004254  08004254  00014254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000954  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009b0  200009b0  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000edb3  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000021ec  00000000  00000000  0002ee82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000be0  00000000  00000000  00031070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000919  00000000  00000000  00031c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025099  00000000  00000000  00032569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e335  00000000  00000000  00057602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc8ff  00000000  00000000  00065937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003620  00000000  00000000  00142238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  00145858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004110 	.word	0x08004110

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08004110 	.word	0x08004110

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fdea 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f842 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f950 	bl	800084c <MX_GPIO_Init>
  MX_ETH_Init();
 80005ac:	f000 f8a8 	bl	8000700 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005b0:	f000 f8f4 	bl	800079c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005b4:	f000 f91c 	bl	80007f0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  // inicia FSM
  debounceFSM_init();
 80005b8:	f000 fc40 	bl	8000e3c <debounceFSM_init>
  // velocidad inicial
  duracionVelocidadActual = duracionVelocidadBaja;
 80005bc:	2264      	movs	r2, #100	; 0x64
 80005be:	4b18      	ldr	r3, [pc, #96]	; (8000620 <main+0x84>)
 80005c0:	601a      	str	r2, [r3, #0]
  // inicio y lectura para activar del retardo de toggleo
  delayInit(&retardoLed, duracionVelocidadActual);
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <main+0x84>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4619      	mov	r1, r3
 80005c8:	4816      	ldr	r0, [pc, #88]	; (8000624 <main+0x88>)
 80005ca:	f000 fd23 	bl	8001014 <delayInit>
  delayRead(&retardoLed);
 80005ce:	4815      	ldr	r0, [pc, #84]	; (8000624 <main+0x88>)
 80005d0:	f000 fd38 	bl	8001044 <delayRead>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  // actualiza la FSM
	  debounceFSM_update();
 80005d4:	f000 fc4a 	bl	8000e6c <debounceFSM_update>
	  // si se ha presionado
	  if (readKey()) {
 80005d8:	f000 fcd8 	bl	8000f8c <readKey>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d012      	beq.n	8000608 <main+0x6c>
		  // controla velocidad y cambia velocidad
		  if (duracionVelocidadBaja == duracionVelocidadActual) {
 80005e2:	2264      	movs	r2, #100	; 0x64
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <main+0x84>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d104      	bne.n	80005f6 <main+0x5a>
			  duracionVelocidadActual = duracionVelocidadAlta;
 80005ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <main+0x84>)
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	e002      	b.n	80005fc <main+0x60>
		  } else {
			  duracionVelocidadActual = duracionVelocidadBaja;
 80005f6:	2264      	movs	r2, #100	; 0x64
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <main+0x84>)
 80005fa:	601a      	str	r2, [r3, #0]
		  }
		  // se cambia el retardo asociado al toggleo del led
		  delayWrite(&retardoLed, duracionVelocidadActual);
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <main+0x84>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	4808      	ldr	r0, [pc, #32]	; (8000624 <main+0x88>)
 8000604:	f000 fd4e 	bl	80010a4 <delayWrite>
	  }
	  // cambio led
	  if (delayRead(&retardoLed)) {
 8000608:	4806      	ldr	r0, [pc, #24]	; (8000624 <main+0x88>)
 800060a:	f000 fd1b 	bl	8001044 <delayRead>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0df      	beq.n	80005d4 <main+0x38>
	  	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000614:	2101      	movs	r1, #1
 8000616:	4804      	ldr	r0, [pc, #16]	; (8000628 <main+0x8c>)
 8000618:	f001 fc2f 	bl	8001e7a <HAL_GPIO_TogglePin>
	  debounceFSM_update();
 800061c:	e7da      	b.n	80005d4 <main+0x38>
 800061e:	bf00      	nop
 8000620:	20000078 	.word	0x20000078
 8000624:	2000007c 	.word	0x2000007c
 8000628:	40020400 	.word	0x40020400

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f003 f8e4 	bl	8003808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <SystemClock_Config+0xcc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemClock_Config+0xd0>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000688:	2301      	movs	r3, #1
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a0:	23a8      	movs	r3, #168	; 0xa8
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a8:	2307      	movs	r3, #7
 80006aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fd19 	bl	80020e8 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006bc:	f000 f974 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2302      	movs	r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2105      	movs	r1, #5
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 ff7a 	bl	80025d8 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ea:	f000 f95d 	bl	80009a8 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_ETH_Init+0x84>)
 8000706:	4a20      	ldr	r2, [pc, #128]	; (8000788 <MX_ETH_Init+0x88>)
 8000708:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800070a:	4b20      	ldr	r3, [pc, #128]	; (800078c <MX_ETH_Init+0x8c>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_ETH_Init+0x8c>)
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_ETH_Init+0x8c>)
 8000718:	22e1      	movs	r2, #225	; 0xe1
 800071a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_ETH_Init+0x8c>)
 800071e:	2200      	movs	r2, #0
 8000720:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_ETH_Init+0x8c>)
 8000724:	2200      	movs	r2, #0
 8000726:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_ETH_Init+0x8c>)
 800072a:	2200      	movs	r2, #0
 800072c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_ETH_Init+0x84>)
 8000730:	4a16      	ldr	r2, [pc, #88]	; (800078c <MX_ETH_Init+0x8c>)
 8000732:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_ETH_Init+0x84>)
 8000736:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800073a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_ETH_Init+0x84>)
 800073e:	4a14      	ldr	r2, [pc, #80]	; (8000790 <MX_ETH_Init+0x90>)
 8000740:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_ETH_Init+0x84>)
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <MX_ETH_Init+0x94>)
 8000746:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_ETH_Init+0x84>)
 800074a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800074e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <MX_ETH_Init+0x84>)
 8000752:	f000 fe8d 	bl	8001470 <HAL_ETH_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800075c:	f000 f924 	bl	80009a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000760:	2238      	movs	r2, #56	; 0x38
 8000762:	2100      	movs	r1, #0
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_ETH_Init+0x98>)
 8000766:	f003 f84f 	bl	8003808 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_ETH_Init+0x98>)
 800076c:	2221      	movs	r2, #33	; 0x21
 800076e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_ETH_Init+0x98>)
 8000772:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000776:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_ETH_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000200 	.word	0x20000200
 8000788:	40028000 	.word	0x40028000
 800078c:	20000800 	.word	0x20000800
 8000790:	20000160 	.word	0x20000160
 8000794:	200000c0 	.word	0x200000c0
 8000798:	20000088 	.word	0x20000088

0800079c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_USART3_UART_Init+0x50>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007d4:	f002 f920 	bl	8002a18 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007de:	f000 f8e3 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200002b0 	.word	0x200002b0
 80007ec:	40004800 	.word	0x40004800

080007f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fe:	2204      	movs	r2, #4
 8000800:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000804:	2202      	movs	r2, #2
 8000806:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000810:	2202      	movs	r2, #2
 8000812:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000816:	2201      	movs	r2, #1
 8000818:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	2201      	movs	r2, #1
 800082a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	f001 fb3b 	bl	8001eae <HAL_PCD_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f8b3 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200002f4 	.word	0x200002f4

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	; 0x30
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
 8000866:	4b4c      	ldr	r3, [pc, #304]	; (8000998 <MX_GPIO_Init+0x14c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a4b      	ldr	r2, [pc, #300]	; (8000998 <MX_GPIO_Init+0x14c>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b49      	ldr	r3, [pc, #292]	; (8000998 <MX_GPIO_Init+0x14c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	4b45      	ldr	r3, [pc, #276]	; (8000998 <MX_GPIO_Init+0x14c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a44      	ldr	r2, [pc, #272]	; (8000998 <MX_GPIO_Init+0x14c>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b42      	ldr	r3, [pc, #264]	; (8000998 <MX_GPIO_Init+0x14c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b3e      	ldr	r3, [pc, #248]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a3d      	ldr	r2, [pc, #244]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b3b      	ldr	r3, [pc, #236]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b37      	ldr	r3, [pc, #220]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a36      	ldr	r2, [pc, #216]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b34      	ldr	r3, [pc, #208]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b30      	ldr	r3, [pc, #192]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a2f      	ldr	r2, [pc, #188]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b29      	ldr	r3, [pc, #164]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a28      	ldr	r2, [pc, #160]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b26      	ldr	r3, [pc, #152]	; (8000998 <MX_GPIO_Init+0x14c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000910:	4822      	ldr	r0, [pc, #136]	; (800099c <MX_GPIO_Init+0x150>)
 8000912:	f001 fa99 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2140      	movs	r1, #64	; 0x40
 800091a:	4821      	ldr	r0, [pc, #132]	; (80009a0 <MX_GPIO_Init+0x154>)
 800091c:	f001 fa94 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000926:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	481b      	ldr	r0, [pc, #108]	; (80009a4 <MX_GPIO_Init+0x158>)
 8000938:	f001 f8c2 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800093c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4811      	ldr	r0, [pc, #68]	; (800099c <MX_GPIO_Init+0x150>)
 8000956:	f001 f8b3 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800095a:	2340      	movs	r3, #64	; 0x40
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <MX_GPIO_Init+0x154>)
 8000972:	f001 f8a5 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000976:	2380      	movs	r3, #128	; 0x80
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_GPIO_Init+0x154>)
 800098a:	f001 f899 	bl	8001ac0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098e:	bf00      	nop
 8000990:	3730      	adds	r7, #48	; 0x30
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40020400 	.word	0x40020400
 80009a0:	40021800 	.word	0x40021800
 80009a4:	40020800 	.word	0x40020800

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08e      	sub	sp, #56	; 0x38
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a55      	ldr	r2, [pc, #340]	; (8000b78 <HAL_ETH_MspInit+0x174>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	f040 80a4 	bne.w	8000b70 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
 8000a2c:	4b53      	ldr	r3, [pc, #332]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	4a52      	ldr	r2, [pc, #328]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000a32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a36:	6313      	str	r3, [r2, #48]	; 0x30
 8000a38:	4b50      	ldr	r3, [pc, #320]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a40:	623b      	str	r3, [r7, #32]
 8000a42:	6a3b      	ldr	r3, [r7, #32]
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
 8000a48:	4b4c      	ldr	r3, [pc, #304]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	4a4b      	ldr	r2, [pc, #300]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000a4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a52:	6313      	str	r3, [r2, #48]	; 0x30
 8000a54:	4b49      	ldr	r3, [pc, #292]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a5c:	61fb      	str	r3, [r7, #28]
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	2300      	movs	r3, #0
 8000a62:	61bb      	str	r3, [r7, #24]
 8000a64:	4b45      	ldr	r3, [pc, #276]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	4a44      	ldr	r2, [pc, #272]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000a6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a70:	4b42      	ldr	r3, [pc, #264]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a78:	61bb      	str	r3, [r7, #24]
 8000a7a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	4b3e      	ldr	r3, [pc, #248]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	4a3d      	ldr	r2, [pc, #244]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8c:	4b3b      	ldr	r3, [pc, #236]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	4a36      	ldr	r2, [pc, #216]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	4a2f      	ldr	r2, [pc, #188]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000abe:	f043 0302 	orr.w	r3, r3, #2
 8000ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	4a28      	ldr	r2, [pc, #160]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ade:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae0:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <HAL_ETH_MspInit+0x178>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000aec:	2332      	movs	r3, #50	; 0x32
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000afc:	230b      	movs	r3, #11
 8000afe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	481e      	ldr	r0, [pc, #120]	; (8000b80 <HAL_ETH_MspInit+0x17c>)
 8000b08:	f000 ffda 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b0c:	2386      	movs	r3, #134	; 0x86
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b1c:	230b      	movs	r3, #11
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	4619      	mov	r1, r3
 8000b26:	4817      	ldr	r0, [pc, #92]	; (8000b84 <HAL_ETH_MspInit+0x180>)
 8000b28:	f000 ffca 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b3e:	230b      	movs	r3, #11
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	480f      	ldr	r0, [pc, #60]	; (8000b88 <HAL_ETH_MspInit+0x184>)
 8000b4a:	f000 ffb9 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b60:	230b      	movs	r3, #11
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4808      	ldr	r0, [pc, #32]	; (8000b8c <HAL_ETH_MspInit+0x188>)
 8000b6c:	f000 ffa8 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b70:	bf00      	nop
 8000b72:	3738      	adds	r7, #56	; 0x38
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40028000 	.word	0x40028000
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020800 	.word	0x40020800
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	40021800 	.word	0x40021800

08000b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <HAL_UART_MspInit+0x84>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12c      	bne.n	8000c0c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bd8:	f043 0308 	orr.w	r3, r3, #8
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <HAL_UART_MspInit+0x8c>)
 8000c08:	f000 ff5a 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	; 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40004800 	.word	0x40004800
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020c00 	.word	0x40020c00

08000c20 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c40:	d13f      	bne.n	8000cc2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <HAL_PCD_MspInit+0xac>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a20      	ldr	r2, [pc, #128]	; (8000ccc <HAL_PCD_MspInit+0xac>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <HAL_PCD_MspInit+0xac>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c5e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c70:	230a      	movs	r3, #10
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4815      	ldr	r0, [pc, #84]	; (8000cd0 <HAL_PCD_MspInit+0xb0>)
 8000c7c:	f000 ff20 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <HAL_PCD_MspInit+0xb0>)
 8000c96:	f000 ff13 	bl	8001ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <HAL_PCD_MspInit+0xac>)
 8000c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <HAL_PCD_MspInit+0xac>)
 8000ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca4:	6353      	str	r3, [r2, #52]	; 0x34
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_PCD_MspInit+0xac>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_PCD_MspInit+0xac>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <HAL_PCD_MspInit+0xac>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	; 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <NMI_Handler+0x4>

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d20:	f000 fa7c 	bl	800121c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f002 fd5e 	bl	8003818 <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20030000 	.word	0x20030000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	20000808 	.word	0x20000808
 8000d90:	200009b0 	.word	0x200009b0

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dbe:	490e      	ldr	r1, [pc, #56]	; (8000df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc0:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd4:	4c0b      	ldr	r4, [pc, #44]	; (8000e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000de2:	f7ff ffd7 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de6:	f002 fd1d 	bl	8003824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f7ff fbd7 	bl	800059c <main>
  bx  lr    
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000df0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dfc:	08004258 	.word	0x08004258
  ldr r2, =_sbss
 8000e00:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e04:	200009b0 	.word	0x200009b0

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>
	...

08000e0c <buttonPressed>:
static bool_t estadoReadKey = false;

/*
 * acciones realizadas al presionar el botón
 */
static void buttonPressed() {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	estadoReadKey = true;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <buttonPressed+0x14>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
	uartSendString((uint8_t *) "Boton presionado\r\n");
 8000e16:	4803      	ldr	r0, [pc, #12]	; (8000e24 <buttonPressed+0x18>)
 8000e18:	f000 f994 	bl	8001144 <uartSendString>
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	2000081c 	.word	0x2000081c
 8000e24:	08004128 	.word	0x08004128

08000e28 <buttonReleased>:

/*
 * acciones realizadas al liberar el botón
 */
static void buttonReleased() {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	uartSendString((uint8_t *) "Botón liberado\r\n");
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <buttonReleased+0x10>)
 8000e2e:	f000 f989 	bl	8001144 <uartSendString>
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	0800413c 	.word	0x0800413c

08000e3c <debounceFSM_init>:

/*
 * Inicio de la MEF
 */
void debounceFSM_init() {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	// estado inicial
	estado = BUTTON_UP;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <debounceFSM_init+0x28>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
	// si no puede iniciar la UART maneja errores y queda en loop
	// para hacer esto disponible se saca static de manejadorErrores() en API_delay.c
	// y se agrega en API_delay.h
	if (uartInit() == false) {
 8000e46:	f000 f93f 	bl	80010c8 <uartInit>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f083 0301 	eor.w	r3, r3, #1
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <debounceFSM_init+0x1e>
		manejadorErrores();
 8000e56:	f000 f8ab 	bl	8000fb0 <manejadorErrores>
	}
	uartSendString((uint8_t *) "Iniciando FSM, estado BUTTON_UP\r\n");
 8000e5a:	4803      	ldr	r0, [pc, #12]	; (8000e68 <debounceFSM_init+0x2c>)
 8000e5c:	f000 f972 	bl	8001144 <uartSendString>
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2000080c 	.word	0x2000080c
 8000e68:	08004150 	.word	0x08004150

08000e6c <debounceFSM_update>:

/*
 * Actualiza la MEF
 */
void debounceFSM_update() {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	switch (estado) {
 8000e70:	4b3f      	ldr	r3, [pc, #252]	; (8000f70 <debounceFSM_update+0x104>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d86f      	bhi.n	8000f58 <debounceFSM_update+0xec>
 8000e78:	a201      	add	r2, pc, #4	; (adr r2, 8000e80 <debounceFSM_update+0x14>)
 8000e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7e:	bf00      	nop
 8000e80:	08000e91 	.word	0x08000e91
 8000e84:	08000ebf 	.word	0x08000ebf
 8000e88:	08000ef5 	.word	0x08000ef5
 8000e8c:	08000f23 	.word	0x08000f23
	case BUTTON_UP:
		// realiza una lectura del botón y si se encuentra presionado
		uartSendString((uint8_t *) "Control BUTTON_UP\r\n");
 8000e90:	4838      	ldr	r0, [pc, #224]	; (8000f74 <debounceFSM_update+0x108>)
 8000e92:	f000 f957 	bl	8001144 <uartSendString>
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) != 0) {
 8000e96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9a:	4837      	ldr	r0, [pc, #220]	; (8000f78 <debounceFSM_update+0x10c>)
 8000e9c:	f000 ffbc 	bl	8001e18 <HAL_GPIO_ReadPin>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d05b      	beq.n	8000f5e <debounceFSM_update+0xf2>
			// cambia de estado
			estado = BUTTON_FALLING;
 8000ea6:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <debounceFSM_update+0x104>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	701a      	strb	r2, [r3, #0]
			// inicia y lee retardo anti-rebote
			delayInit(&retardo, duracionRetardo);
 8000eac:	2328      	movs	r3, #40	; 0x28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4832      	ldr	r0, [pc, #200]	; (8000f7c <debounceFSM_update+0x110>)
 8000eb2:	f000 f8af 	bl	8001014 <delayInit>
			delayRead(&retardo);
 8000eb6:	4831      	ldr	r0, [pc, #196]	; (8000f7c <debounceFSM_update+0x110>)
 8000eb8:	f000 f8c4 	bl	8001044 <delayRead>
		}
		break;
 8000ebc:	e04f      	b.n	8000f5e <debounceFSM_update+0xf2>
	case BUTTON_FALLING:
		// verifica que se cumpla el retardo anti-rebote
		uartSendString((uint8_t *) "Control BUTTON_FALLING\r\n");
 8000ebe:	4830      	ldr	r0, [pc, #192]	; (8000f80 <debounceFSM_update+0x114>)
 8000ec0:	f000 f940 	bl	8001144 <uartSendString>
		if (delayRead(&retardo)) {
 8000ec4:	482d      	ldr	r0, [pc, #180]	; (8000f7c <debounceFSM_update+0x110>)
 8000ec6:	f000 f8bd 	bl	8001044 <delayRead>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d048      	beq.n	8000f62 <debounceFSM_update+0xf6>
			// realiza una lectura del botón y si se encuentra presionado
			if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) != 0) {
 8000ed0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed4:	4828      	ldr	r0, [pc, #160]	; (8000f78 <debounceFSM_update+0x10c>)
 8000ed6:	f000 ff9f 	bl	8001e18 <HAL_GPIO_ReadPin>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <debounceFSM_update+0x80>
				// cambia de estado
				estado = BUTTON_DOWN;
 8000ee0:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <debounceFSM_update+0x104>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	701a      	strb	r2, [r3, #0]
				// invoca al evento asociado a el nuevo estado
				buttonPressed();
 8000ee6:	f7ff ff91 	bl	8000e0c <buttonPressed>
			} else {
				// si no se encuentra presionado el botón vuelve al estado original
				estado = BUTTON_UP;
			}
		}
		break;
 8000eea:	e03a      	b.n	8000f62 <debounceFSM_update+0xf6>
				estado = BUTTON_UP;
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <debounceFSM_update+0x104>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
		break;
 8000ef2:	e036      	b.n	8000f62 <debounceFSM_update+0xf6>
	case BUTTON_DOWN:
		uartSendString((uint8_t *) "Control BUTTON_DOWN\r\n");
 8000ef4:	4823      	ldr	r0, [pc, #140]	; (8000f84 <debounceFSM_update+0x118>)
 8000ef6:	f000 f925 	bl	8001144 <uartSendString>
		// realiza una lectura del botón y si no se encuentra presionado
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == 0) {
 8000efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000efe:	481e      	ldr	r0, [pc, #120]	; (8000f78 <debounceFSM_update+0x10c>)
 8000f00:	f000 ff8a 	bl	8001e18 <HAL_GPIO_ReadPin>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d12d      	bne.n	8000f66 <debounceFSM_update+0xfa>
			// cambia de estado
			estado = BUTTON_RISING;
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <debounceFSM_update+0x104>)
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	701a      	strb	r2, [r3, #0]
			// inicia y lee retardo anti-rebote
			delayInit(&retardo, duracionRetardo);
 8000f10:	2328      	movs	r3, #40	; 0x28
 8000f12:	4619      	mov	r1, r3
 8000f14:	4819      	ldr	r0, [pc, #100]	; (8000f7c <debounceFSM_update+0x110>)
 8000f16:	f000 f87d 	bl	8001014 <delayInit>
			delayRead(&retardo);
 8000f1a:	4818      	ldr	r0, [pc, #96]	; (8000f7c <debounceFSM_update+0x110>)
 8000f1c:	f000 f892 	bl	8001044 <delayRead>
		}
		break;
 8000f20:	e021      	b.n	8000f66 <debounceFSM_update+0xfa>
	case BUTTON_RISING:
		uartSendString((uint8_t *) "Control BUTTON_RISING\r\n");
 8000f22:	4819      	ldr	r0, [pc, #100]	; (8000f88 <debounceFSM_update+0x11c>)
 8000f24:	f000 f90e 	bl	8001144 <uartSendString>
		// verifica que se cumpla el retardo anti-rebote
		if (delayRead(&retardo)) {
 8000f28:	4814      	ldr	r0, [pc, #80]	; (8000f7c <debounceFSM_update+0x110>)
 8000f2a:	f000 f88b 	bl	8001044 <delayRead>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d01a      	beq.n	8000f6a <debounceFSM_update+0xfe>
			// realiza una lectura del botón y si no se encuentra presionado
			if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == 0) {
 8000f34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f38:	480f      	ldr	r0, [pc, #60]	; (8000f78 <debounceFSM_update+0x10c>)
 8000f3a:	f000 ff6d 	bl	8001e18 <HAL_GPIO_ReadPin>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d105      	bne.n	8000f50 <debounceFSM_update+0xe4>
				// cambia de estado
				estado = BUTTON_UP;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <debounceFSM_update+0x104>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
				// invoca al evento asociado a el nuevo estado
				buttonReleased();
 8000f4a:	f7ff ff6d 	bl	8000e28 <buttonReleased>
			} else {
				// si no se encuentra presionado el botón vuelve al estado original
				estado = BUTTON_DOWN;
			}
		}
		break;
 8000f4e:	e00c      	b.n	8000f6a <debounceFSM_update+0xfe>
				estado = BUTTON_DOWN;
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <debounceFSM_update+0x104>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	701a      	strb	r2, [r3, #0]
		break;
 8000f56:	e008      	b.n	8000f6a <debounceFSM_update+0xfe>
	default:
		debounceFSM_init();
 8000f58:	f7ff ff70 	bl	8000e3c <debounceFSM_init>
		break;
 8000f5c:	e006      	b.n	8000f6c <debounceFSM_update+0x100>
		break;
 8000f5e:	bf00      	nop
 8000f60:	e004      	b.n	8000f6c <debounceFSM_update+0x100>
		break;
 8000f62:	bf00      	nop
 8000f64:	e002      	b.n	8000f6c <debounceFSM_update+0x100>
		break;
 8000f66:	bf00      	nop
 8000f68:	e000      	b.n	8000f6c <debounceFSM_update+0x100>
		break;
 8000f6a:	bf00      	nop
	}

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000080c 	.word	0x2000080c
 8000f74:	08004174 	.word	0x08004174
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	20000810 	.word	0x20000810
 8000f80:	08004188 	.word	0x08004188
 8000f84:	080041a4 	.word	0x080041a4
 8000f88:	080041bc 	.word	0x080041bc

08000f8c <readKey>:

/* La función readKey debe leer una variable interna del módulo y devolver true o false si la tecla fue presionada.  Si devuelve true, debe resetear (poner en false) el estado de la variable.*/
bool_t readKey() {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
	// variable bool_t que se debe poner en false cuando se llame a la función readKey();
	// retorno el estado pero cambio la variable interna a false
	bool_t retornar = estadoReadKey;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <readKey+0x20>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
	estadoReadKey = false;
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <readKey+0x20>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
	return retornar;
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	2000081c 	.word	0x2000081c

08000fb0 <manejadorErrores>:
 */

#include "API_delay.h"

// maneja errores
void manejadorErrores(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
    // en caso de error se encienden los 3 leds
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4815      	ldr	r0, [pc, #84]	; (8001010 <manejadorErrores+0x60>)
 8000fba:	f000 ff45 	bl	8001e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	4813      	ldr	r0, [pc, #76]	; (8001010 <manejadorErrores+0x60>)
 8000fc4:	f000 ff40 	bl	8001e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fce:	4810      	ldr	r0, [pc, #64]	; (8001010 <manejadorErrores+0x60>)
 8000fd0:	f000 ff3a 	bl	8001e48 <HAL_GPIO_WritePin>
	// se espera
	HAL_Delay(2000);
 8000fd4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fd8:	f000 f940 	bl	800125c <HAL_Delay>
	// se vuelve a cambiar el estado de los 3 leds
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000fdc:	2101      	movs	r1, #1
 8000fde:	480c      	ldr	r0, [pc, #48]	; (8001010 <manejadorErrores+0x60>)
 8000fe0:	f000 ff4b 	bl	8001e7a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000fe4:	2180      	movs	r1, #128	; 0x80
 8000fe6:	480a      	ldr	r0, [pc, #40]	; (8001010 <manejadorErrores+0x60>)
 8000fe8:	f000 ff47 	bl	8001e7a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000fec:	2108      	movs	r1, #8
 8000fee:	4808      	ldr	r0, [pc, #32]	; (8001010 <manejadorErrores+0x60>)
 8000ff0:	f000 ff43 	bl	8001e7a <HAL_GPIO_TogglePin>
	// se espera
	HAL_Delay(1000);
 8000ff4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff8:	f000 f930 	bl	800125c <HAL_Delay>

	// en un bucle infinito se va cambiando el estado del led 3
	while (true) {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000ffc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <manejadorErrores+0x60>)
 8001002:	f000 ff3a 	bl	8001e7a <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100a:	f000 f927 	bl	800125c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800100e:	e7f5      	b.n	8000ffc <manejadorErrores+0x4c>
 8001010:	40020400 	.word	0x40020400

08001014 <delayInit>:
	}
}


void delayInit( delay_t * delay, tick_t duration ) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
	// se comprueba variable existente
	if (delay == NULL) {
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <delayInit+0x16>
		manejadorErrores();
 8001024:	f7ff ffc4 	bl	8000fb0 <manejadorErrores>
	} else {
		delay->duration = duration;
		delay->running = false;
		delay->startTime = 0; // siempre inicializar con valores
	}
}
 8001028:	e008      	b.n	800103c <delayInit+0x28>
		delay->duration = duration;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	605a      	str	r2, [r3, #4]
		delay->running = false;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	721a      	strb	r2, [r3, #8]
		delay->startTime = 0; // siempre inicializar con valores
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <delayRead>:

bool_t delayRead( delay_t * delay ) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	// varible que se usa para tener un unico punto de retorno
	bool resultado = false;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]
	if (delay == NULL) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d102      	bne.n	800105c <delayRead+0x18>
		manejadorErrores();
 8001056:	f7ff ffab 	bl	8000fb0 <manejadorErrores>
 800105a:	e01e      	b.n	800109a <delayRead+0x56>
	} else {
		// no es necesario comparar explicitamente, pero es simple de leer
		if (delay->running == false) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7a1b      	ldrb	r3, [r3, #8]
 8001060:	f083 0301 	eor.w	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d008      	beq.n	800107c <delayRead+0x38>
			delay->startTime = HAL_GetTick();
 800106a:	f000 f8eb 	bl	8001244 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	601a      	str	r2, [r3, #0]
			delay->running = true;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2201      	movs	r2, #1
 8001078:	721a      	strb	r2, [r3, #8]
 800107a:	e00e      	b.n	800109a <delayRead+0x56>
		} else {
			if (HAL_GetTick() - delay->startTime >= delay->duration) {
 800107c:	f000 f8e2 	bl	8001244 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	1ad2      	subs	r2, r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	429a      	cmp	r2, r3
 800108e:	d304      	bcc.n	800109a <delayRead+0x56>
				delay->running = false;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	721a      	strb	r2, [r3, #8]
				resultado = true;
 8001096:	2301      	movs	r3, #1
 8001098:	73fb      	strb	r3, [r7, #15]
			}
		}
	}
	return resultado;
 800109a:	7bfb      	ldrb	r3, [r7, #15]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <delayWrite>:

void delayWrite( delay_t * delay, tick_t duration ) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
	if (delay == NULL) {
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <delayWrite+0x16>
		manejadorErrores();
 80010b4:	f7ff ff7c 	bl	8000fb0 <manejadorErrores>
	} else {
		delay->duration = duration;
	}
}
 80010b8:	e002      	b.n	80010c0 <delayWrite+0x1c>
		delay->duration = duration;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	605a      	str	r2, [r3, #4]
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <uartInit>:
/*
 * Variable que mantiene el manejador de la UART
 */
static UART_HandleTypeDef UartHandle;

bool_t uartInit() {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b09a      	sub	sp, #104	; 0x68
 80010cc:	af00      	add	r7, sp, #0

	// retorna el estado del inicio de la UART
	bool_t estado = false;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	// variable usada para imprimir datos de la UART
    char cadena[100];

	UartHandle.Instance = USART3;
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <uartInit+0x70>)
 80010d6:	4a19      	ldr	r2, [pc, #100]	; (800113c <uartInit+0x74>)
 80010d8:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate = 115200;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <uartInit+0x70>)
 80010dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e0:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <uartInit+0x70>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <uartInit+0x70>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <uartInit+0x70>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
	UartHandle.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b10      	ldr	r3, [pc, #64]	; (8001138 <uartInit+0x70>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <uartInit+0x70>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <uartInit+0x70>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&UartHandle) == HAL_OK) {
 8001106:	480c      	ldr	r0, [pc, #48]	; (8001138 <uartInit+0x70>)
 8001108:	f001 fc86 	bl	8002a18 <HAL_UART_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10c      	bne.n	800112c <uartInit+0x64>
		estado = true;
 8001112:	2301      	movs	r3, #1
 8001114:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	    snprintf(cadena, sizeof(cadena), "Valores de configuración de USART:\r\n");
 8001118:	463b      	mov	r3, r7
 800111a:	4a09      	ldr	r2, [pc, #36]	; (8001140 <uartInit+0x78>)
 800111c:	2164      	movs	r1, #100	; 0x64
 800111e:	4618      	mov	r0, r3
 8001120:	f002 fb3e 	bl	80037a0 <sniprintf>
	    uartSendString((uint8_t *) cadena);
 8001124:	463b      	mov	r3, r7
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f80c 	bl	8001144 <uartSendString>
//	    snprintf(cadena, sizeof(cadena), "  Velocidad en baudios: %llu\r\n", (unsigned long long) UartHandle.Init.BaudRate);
//	    uartSendString((uint8_t *) cadena);
	}
    return estado;
 800112c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001130:	4618      	mov	r0, r3
 8001132:	3768      	adds	r7, #104	; 0x68
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000820 	.word	0x20000820
 800113c:	40004800 	.word	0x40004800
 8001140:	080041d4 	.word	0x080041d4

08001144 <uartSendString>:

void uartSendString(uint8_t * pstring) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	// control defensivo
	if (pstring == NULL) {
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00b      	beq.n	800116a <uartSendString+0x26>
		return;
	}
	// transmite
	HAL_UART_Transmit(&UartHandle, pstring, strlen((char *)pstring), HAL_MAX_DELAY);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff f84c 	bl	80001f0 <strlen>
 8001158:	4603      	mov	r3, r0
 800115a:	b29a      	uxth	r2, r3
 800115c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	4804      	ldr	r0, [pc, #16]	; (8001174 <uartSendString+0x30>)
 8001164:	f001 fca5 	bl	8002ab2 <HAL_UART_Transmit>
 8001168:	e000      	b.n	800116c <uartSendString+0x28>
		return;
 800116a:	bf00      	nop
}
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000820 	.word	0x20000820

08001178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <HAL_Init+0x40>)
 8001182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <HAL_Init+0x40>)
 800118e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <HAL_Init+0x40>)
 800119a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f000 f931 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f000 f808 	bl	80011bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ac:	f7ff fc02 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023c00 	.word	0x40023c00

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x54>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_InitTick+0x58>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f93b 	bl	8001456 <HAL_SYSTICK_Config>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00e      	b.n	8001208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d80a      	bhi.n	8001206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f8:	f000 f911 	bl	800141e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <HAL_InitTick+0x5c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	e000      	b.n	8001208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000000 	.word	0x20000000
 8001214:	20000008 	.word	0x20000008
 8001218:	20000004 	.word	0x20000004

0800121c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x20>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x24>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4413      	add	r3, r2
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <HAL_IncTick+0x24>)
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000008 	.word	0x20000008
 8001240:	20000864 	.word	0x20000864

08001244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return uwTick;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <HAL_GetTick+0x14>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000864 	.word	0x20000864

0800125c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff ffee 	bl	8001244 <HAL_GetTick>
 8001268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001274:	d005      	beq.n	8001282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_Delay+0x44>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001282:	bf00      	nop
 8001284:	f7ff ffde 	bl	8001244 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d8f7      	bhi.n	8001284 <HAL_Delay+0x28>
  {
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000008 	.word	0x20000008

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d4:	d301      	bcc.n	80013da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <SysTick_Config+0x40>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e2:	210f      	movs	r1, #15
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013e8:	f7ff ff8e 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <SysTick_Config+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <SysTick_Config+0x40>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff47 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001430:	f7ff ff5c 	bl	80012ec <__NVIC_GetPriorityGrouping>
 8001434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f7ff ff8e 	bl	800135c <NVIC_EncodePriority>
 8001440:	4602      	mov	r2, r0
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff5d 	bl	8001308 <__NVIC_SetPriority>
}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ffb0 	bl	80013c4 <SysTick_Config>
 8001464:	4603      	mov	r3, r0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e06c      	b.n	800155c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001488:	2b00      	cmp	r3, #0
 800148a:	d106      	bne.n	800149a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2223      	movs	r2, #35	; 0x23
 8001490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fab5 	bl	8000a04 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b31      	ldr	r3, [pc, #196]	; (8001564 <HAL_ETH_Init+0xf4>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	4a30      	ldr	r2, [pc, #192]	; (8001564 <HAL_ETH_Init+0xf4>)
 80014a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a8:	6453      	str	r3, [r2, #68]	; 0x44
 80014aa:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <HAL_ETH_Init+0xf4>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80014b6:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <HAL_ETH_Init+0xf8>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4a2b      	ldr	r2, [pc, #172]	; (8001568 <HAL_ETH_Init+0xf8>)
 80014bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014c0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <HAL_ETH_Init+0xf8>)
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	4927      	ldr	r1, [pc, #156]	; (8001568 <HAL_ETH_Init+0xf8>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <HAL_ETH_Init+0xf8>)
 80014d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014ec:	f7ff feaa 	bl	8001244 <HAL_GetTick>
 80014f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014f2:	e011      	b.n	8001518 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014f4:	f7ff fea6 	bl	8001244 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001502:	d909      	bls.n	8001518 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2204      	movs	r2, #4
 8001508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	22e0      	movs	r2, #224	; 0xe0
 8001510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e021      	b.n	800155c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1e4      	bne.n	80014f4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f958 	bl	80017e0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f9ff 	bl	8001934 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 fa55 	bl	80019e6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	461a      	mov	r2, r3
 8001542:	2100      	movs	r1, #0
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f9bd 	bl	80018c4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2210      	movs	r2, #16
 8001556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	40013800 	.word	0x40013800

0800156c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <ETH_SetMACConfig+0x15c>)
 8001582:	4013      	ands	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	7c1b      	ldrb	r3, [r3, #16]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d102      	bne.n	8001594 <ETH_SetMACConfig+0x28>
 800158e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001592:	e000      	b.n	8001596 <ETH_SetMACConfig+0x2a>
 8001594:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	7c5b      	ldrb	r3, [r3, #17]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d102      	bne.n	80015a4 <ETH_SetMACConfig+0x38>
 800159e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015a2:	e000      	b.n	80015a6 <ETH_SetMACConfig+0x3a>
 80015a4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015a6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80015ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	7fdb      	ldrb	r3, [r3, #31]
 80015b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80015b4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80015ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	7f92      	ldrb	r2, [r2, #30]
 80015c0:	2a00      	cmp	r2, #0
 80015c2:	d102      	bne.n	80015ca <ETH_SetMACConfig+0x5e>
 80015c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c8:	e000      	b.n	80015cc <ETH_SetMACConfig+0x60>
 80015ca:	2200      	movs	r2, #0
                        macconf->Speed |
 80015cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	7f1b      	ldrb	r3, [r3, #28]
 80015d2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015d4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	791b      	ldrb	r3, [r3, #4]
 80015e0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80015e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80015ea:	2a00      	cmp	r2, #0
 80015ec:	d102      	bne.n	80015f4 <ETH_SetMACConfig+0x88>
 80015ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f2:	e000      	b.n	80015f6 <ETH_SetMACConfig+0x8a>
 80015f4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	7bdb      	ldrb	r3, [r3, #15]
 80015fc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015fe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001604:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800160c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800160e:	4313      	orrs	r3, r2
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001626:	2001      	movs	r0, #1
 8001628:	f7ff fe18 	bl	800125c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001642:	4013      	ands	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001652:	2a00      	cmp	r2, #0
 8001654:	d101      	bne.n	800165a <ETH_SetMACConfig+0xee>
 8001656:	2280      	movs	r2, #128	; 0x80
 8001658:	e000      	b.n	800165c <ETH_SetMACConfig+0xf0>
 800165a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800165c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001662:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800166a:	2a01      	cmp	r2, #1
 800166c:	d101      	bne.n	8001672 <ETH_SetMACConfig+0x106>
 800166e:	2208      	movs	r2, #8
 8001670:	e000      	b.n	8001674 <ETH_SetMACConfig+0x108>
 8001672:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001674:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800167c:	2a01      	cmp	r2, #1
 800167e:	d101      	bne.n	8001684 <ETH_SetMACConfig+0x118>
 8001680:	2204      	movs	r2, #4
 8001682:	e000      	b.n	8001686 <ETH_SetMACConfig+0x11a>
 8001684:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001686:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800168e:	2a01      	cmp	r2, #1
 8001690:	d101      	bne.n	8001696 <ETH_SetMACConfig+0x12a>
 8001692:	2202      	movs	r2, #2
 8001694:	e000      	b.n	8001698 <ETH_SetMACConfig+0x12c>
 8001696:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001698:	4313      	orrs	r3, r2
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016b0:	2001      	movs	r0, #1
 80016b2:	f7ff fdd3 	bl	800125c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	619a      	str	r2, [r3, #24]
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	ff20810f 	.word	0xff20810f

080016cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4b3d      	ldr	r3, [pc, #244]	; (80017dc <ETH_SetDMAConfig+0x110>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	7b1b      	ldrb	r3, [r3, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d102      	bne.n	80016f8 <ETH_SetDMAConfig+0x2c>
 80016f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016f6:	e000      	b.n	80016fa <ETH_SetDMAConfig+0x2e>
 80016f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	7b5b      	ldrb	r3, [r3, #13]
 80016fe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001700:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	7f52      	ldrb	r2, [r2, #29]
 8001706:	2a00      	cmp	r2, #0
 8001708:	d102      	bne.n	8001710 <ETH_SetDMAConfig+0x44>
 800170a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800170e:	e000      	b.n	8001712 <ETH_SetDMAConfig+0x46>
 8001710:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001712:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	7b9b      	ldrb	r3, [r3, #14]
 8001718:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800171a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001720:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	7f1b      	ldrb	r3, [r3, #28]
 8001726:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001728:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	7f9b      	ldrb	r3, [r3, #30]
 800172e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001730:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001736:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800173e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001740:	4313      	orrs	r3, r2
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	4313      	orrs	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001750:	461a      	mov	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001762:	2001      	movs	r0, #1
 8001764:	f7ff fd7a 	bl	800125c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001770:	461a      	mov	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	791b      	ldrb	r3, [r3, #4]
 800177a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001780:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001786:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800178c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001794:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001796:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800179e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80017a4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017b2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7ff fd4b 	bl	800125c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ce:	461a      	mov	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	f8de3f23 	.word	0xf8de3f23

080017e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b0a6      	sub	sp, #152	; 0x98
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80017e8:	2301      	movs	r3, #1
 80017ea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80017f4:	2300      	movs	r3, #0
 80017f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80017fe:	2301      	movs	r3, #1
 8001800:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800180a:	2301      	movs	r3, #1
 800180c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800181c:	2300      	movs	r3, #0
 800181e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001826:	2300      	movs	r3, #0
 8001828:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001830:	2300      	movs	r3, #0
 8001832:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001842:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001846:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001848:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800184c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001854:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001858:	4619      	mov	r1, r3
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fe86 	bl	800156c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001860:	2301      	movs	r3, #1
 8001862:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001864:	2301      	movs	r3, #1
 8001866:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001868:	2301      	movs	r3, #1
 800186a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800186e:	2301      	movs	r3, #1
 8001870:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001882:	2300      	movs	r3, #0
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001886:	2301      	movs	r3, #1
 8001888:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800188c:	2301      	movs	r3, #1
 800188e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001894:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001896:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800189a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800189c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80018a2:	2301      	movs	r3, #1
 80018a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80018b0:	f107 0308 	add.w	r3, r7, #8
 80018b4:	4619      	mov	r1, r3
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ff08 	bl	80016cc <ETH_SetDMAConfig>
}
 80018bc:	bf00      	nop
 80018be:	3798      	adds	r7, #152	; 0x98
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3305      	adds	r3, #5
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	3204      	adds	r2, #4
 80018dc:	7812      	ldrb	r2, [r2, #0]
 80018de:	4313      	orrs	r3, r2
 80018e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <ETH_MACAddressConfig+0x68>)
 80018e6:	4413      	add	r3, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3303      	adds	r3, #3
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	061a      	lsls	r2, r3, #24
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3302      	adds	r3, #2
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	041b      	lsls	r3, r3, #16
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3301      	adds	r3, #1
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	4313      	orrs	r3, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	7812      	ldrb	r2, [r2, #0]
 800190e:	4313      	orrs	r3, r2
 8001910:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <ETH_MACAddressConfig+0x6c>)
 8001916:	4413      	add	r3, r2
 8001918:	461a      	mov	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	6013      	str	r3, [r2, #0]
}
 800191e:	bf00      	nop
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40028040 	.word	0x40028040
 8001930:	40028044 	.word	0x40028044

08001934 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	e03e      	b.n	80019c0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68d9      	ldr	r1, [r3, #12]
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2200      	movs	r2, #0
 800195e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	3206      	adds	r2, #6
 8001974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d80c      	bhi.n	80019a4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68d9      	ldr	r1, [r3, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	440b      	add	r3, r1
 800199c:	461a      	mov	r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	e004      	b.n	80019ae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	461a      	mov	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	3301      	adds	r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d9bd      	bls.n	8001942 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d8:	611a      	str	r2, [r3, #16]
}
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b085      	sub	sp, #20
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	e046      	b.n	8001a82 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6919      	ldr	r1, [r3, #16]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2200      	movs	r2, #0
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a30:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001a38:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a46:	68b9      	ldr	r1, [r7, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	3212      	adds	r2, #18
 8001a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d80c      	bhi.n	8001a72 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6919      	ldr	r1, [r3, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	440b      	add	r3, r1
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	e004      	b.n	8001a7c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	461a      	mov	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d9b5      	bls.n	80019f4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691a      	ldr	r2, [r3, #16]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab2:	60da      	str	r2, [r3, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	e177      	b.n	8001dcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001adc:	2201      	movs	r2, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	f040 8166 	bne.w	8001dc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d005      	beq.n	8001b12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d130      	bne.n	8001b74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 0201 	and.w	r2, r3, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d017      	beq.n	8001bb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d123      	bne.n	8001c04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	08da      	lsrs	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3208      	adds	r2, #8
 8001bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	08da      	lsrs	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3208      	adds	r2, #8
 8001bfe:	69b9      	ldr	r1, [r7, #24]
 8001c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0203 	and.w	r2, r3, #3
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80c0 	beq.w	8001dc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b66      	ldr	r3, [pc, #408]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a65      	ldr	r2, [pc, #404]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b63      	ldr	r3, [pc, #396]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c62:	4a61      	ldr	r2, [pc, #388]	; (8001de8 <HAL_GPIO_Init+0x328>)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	220f      	movs	r2, #15
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a58      	ldr	r2, [pc, #352]	; (8001dec <HAL_GPIO_Init+0x32c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d037      	beq.n	8001cfe <HAL_GPIO_Init+0x23e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a57      	ldr	r2, [pc, #348]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d031      	beq.n	8001cfa <HAL_GPIO_Init+0x23a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a56      	ldr	r2, [pc, #344]	; (8001df4 <HAL_GPIO_Init+0x334>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d02b      	beq.n	8001cf6 <HAL_GPIO_Init+0x236>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a55      	ldr	r2, [pc, #340]	; (8001df8 <HAL_GPIO_Init+0x338>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d025      	beq.n	8001cf2 <HAL_GPIO_Init+0x232>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a54      	ldr	r2, [pc, #336]	; (8001dfc <HAL_GPIO_Init+0x33c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01f      	beq.n	8001cee <HAL_GPIO_Init+0x22e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a53      	ldr	r2, [pc, #332]	; (8001e00 <HAL_GPIO_Init+0x340>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d019      	beq.n	8001cea <HAL_GPIO_Init+0x22a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	; (8001e04 <HAL_GPIO_Init+0x344>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0x226>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a51      	ldr	r2, [pc, #324]	; (8001e08 <HAL_GPIO_Init+0x348>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00d      	beq.n	8001ce2 <HAL_GPIO_Init+0x222>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a50      	ldr	r2, [pc, #320]	; (8001e0c <HAL_GPIO_Init+0x34c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <HAL_GPIO_Init+0x21e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d101      	bne.n	8001cda <HAL_GPIO_Init+0x21a>
 8001cd6:	2309      	movs	r3, #9
 8001cd8:	e012      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cda:	230a      	movs	r3, #10
 8001cdc:	e010      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cde:	2308      	movs	r3, #8
 8001ce0:	e00e      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	e00c      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	e00a      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cea:	2305      	movs	r3, #5
 8001cec:	e008      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cee:	2304      	movs	r3, #4
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e004      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e002      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f002 0203 	and.w	r2, r2, #3
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d10:	4935      	ldr	r1, [pc, #212]	; (8001de8 <HAL_GPIO_Init+0x328>)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d42:	4a34      	ldr	r2, [pc, #208]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d48:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d6c:	4a29      	ldr	r2, [pc, #164]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d72:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d96:	4a1f      	ldr	r2, [pc, #124]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc0:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	2b0f      	cmp	r3, #15
 8001dd0:	f67f ae84 	bls.w	8001adc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40013800 	.word	0x40013800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020800 	.word	0x40020800
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40021400 	.word	0x40021400
 8001e04:	40021800 	.word	0x40021800
 8001e08:	40021c00 	.word	0x40021c00
 8001e0c:	40022000 	.word	0x40022000
 8001e10:	40022400 	.word	0x40022400
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	e001      	b.n	8001e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
 8001e54:	4613      	mov	r3, r2
 8001e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e58:	787b      	ldrb	r3, [r7, #1]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e64:	e003      	b.n	8001e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	041a      	lsls	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	619a      	str	r2, [r3, #24]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b085      	sub	sp, #20
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	460b      	mov	r3, r1
 8001e84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e8c:	887a      	ldrh	r2, [r7, #2]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4013      	ands	r3, r2
 8001e92:	041a      	lsls	r2, r3, #16
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	887b      	ldrh	r3, [r7, #2]
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	619a      	str	r2, [r3, #24]
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb0:	b08f      	sub	sp, #60	; 0x3c
 8001eb2:	af0a      	add	r7, sp, #40	; 0x28
 8001eb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e10f      	b.n	80020e0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7fe fea0 	bl	8000c20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f001 f9ad 	bl	800325e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	687e      	ldr	r6, [r7, #4]
 8001f0c:	466d      	mov	r5, sp
 8001f0e:	f106 0410 	add.w	r4, r6, #16
 8001f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f22:	1d33      	adds	r3, r6, #4
 8001f24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f26:	6838      	ldr	r0, [r7, #0]
 8001f28:	f001 f938 	bl	800319c <USB_CoreInit>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2202      	movs	r2, #2
 8001f36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0d0      	b.n	80020e0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f001 f99b 	bl	8003280 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	e04a      	b.n	8001fe6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	333d      	adds	r3, #61	; 0x3d
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	333c      	adds	r3, #60	; 0x3c
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	b298      	uxth	r0, r3
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	3344      	adds	r3, #68	; 0x44
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3340      	adds	r3, #64	; 0x40
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3348      	adds	r3, #72	; 0x48
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	334c      	adds	r3, #76	; 0x4c
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fcc:	7bfa      	ldrb	r2, [r7, #15]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	3354      	adds	r3, #84	; 0x54
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d3af      	bcc.n	8001f50 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	73fb      	strb	r3, [r7, #15]
 8001ff4:	e044      	b.n	8002080 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	3301      	adds	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	d3b5      	bcc.n	8001ff6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	687e      	ldr	r6, [r7, #4]
 8002092:	466d      	mov	r5, sp
 8002094:	f106 0410 	add.w	r4, r6, #16
 8002098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800209a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800209e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80020a8:	1d33      	adds	r3, r6, #4
 80020aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ac:	6838      	ldr	r0, [r7, #0]
 80020ae:	f001 f933 	bl	8003318 <USB_DevInit>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e00d      	b.n	80020e0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f001 fafe 	bl	80036da <USB_DevDisconnect>

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e267      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d075      	beq.n	80021f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002106:	4b88      	ldr	r3, [pc, #544]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b04      	cmp	r3, #4
 8002110:	d00c      	beq.n	800212c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002112:	4b85      	ldr	r3, [pc, #532]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800211a:	2b08      	cmp	r3, #8
 800211c:	d112      	bne.n	8002144 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800211e:	4b82      	ldr	r3, [pc, #520]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800212a:	d10b      	bne.n	8002144 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212c:	4b7e      	ldr	r3, [pc, #504]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d05b      	beq.n	80021f0 <HAL_RCC_OscConfig+0x108>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d157      	bne.n	80021f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e242      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214c:	d106      	bne.n	800215c <HAL_RCC_OscConfig+0x74>
 800214e:	4b76      	ldr	r3, [pc, #472]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a75      	ldr	r2, [pc, #468]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e01d      	b.n	8002198 <HAL_RCC_OscConfig+0xb0>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x98>
 8002166:	4b70      	ldr	r3, [pc, #448]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a6f      	ldr	r2, [pc, #444]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 800216c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	4b6d      	ldr	r3, [pc, #436]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a6c      	ldr	r2, [pc, #432]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e00b      	b.n	8002198 <HAL_RCC_OscConfig+0xb0>
 8002180:	4b69      	ldr	r3, [pc, #420]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a68      	ldr	r2, [pc, #416]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	4b66      	ldr	r3, [pc, #408]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a65      	ldr	r2, [pc, #404]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d013      	beq.n	80021c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7ff f850 	bl	8001244 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a8:	f7ff f84c 	bl	8001244 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	; 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e207      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	4b5b      	ldr	r3, [pc, #364]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0xc0>
 80021c6:	e014      	b.n	80021f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7ff f83c 	bl	8001244 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d0:	f7ff f838 	bl	8001244 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e1f3      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e2:	4b51      	ldr	r3, [pc, #324]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0xe8>
 80021ee:	e000      	b.n	80021f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d063      	beq.n	80022c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021fe:	4b4a      	ldr	r3, [pc, #296]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800220a:	4b47      	ldr	r3, [pc, #284]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002212:	2b08      	cmp	r3, #8
 8002214:	d11c      	bne.n	8002250 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002216:	4b44      	ldr	r3, [pc, #272]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d116      	bne.n	8002250 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002222:	4b41      	ldr	r3, [pc, #260]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_RCC_OscConfig+0x152>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e1c7      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223a:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4937      	ldr	r1, [pc, #220]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	e03a      	b.n	80022c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d020      	beq.n	800229a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002258:	4b34      	ldr	r3, [pc, #208]	; (800232c <HAL_RCC_OscConfig+0x244>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7fe fff1 	bl	8001244 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002266:	f7fe ffed 	bl	8001244 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e1a8      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002278:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002284:	4b28      	ldr	r3, [pc, #160]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4925      	ldr	r1, [pc, #148]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002294:	4313      	orrs	r3, r2
 8002296:	600b      	str	r3, [r1, #0]
 8002298:	e015      	b.n	80022c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229a:	4b24      	ldr	r3, [pc, #144]	; (800232c <HAL_RCC_OscConfig+0x244>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe ffd0 	bl	8001244 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a8:	f7fe ffcc 	bl	8001244 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e187      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d036      	beq.n	8002340 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d016      	beq.n	8002308 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <HAL_RCC_OscConfig+0x248>)
 80022dc:	2201      	movs	r2, #1
 80022de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e0:	f7fe ffb0 	bl	8001244 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e8:	f7fe ffac 	bl	8001244 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e167      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 80022fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x200>
 8002306:	e01b      	b.n	8002340 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_RCC_OscConfig+0x248>)
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7fe ff99 	bl	8001244 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002314:	e00e      	b.n	8002334 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002316:	f7fe ff95 	bl	8001244 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d907      	bls.n	8002334 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e150      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
 8002328:	40023800 	.word	0x40023800
 800232c:	42470000 	.word	0x42470000
 8002330:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002334:	4b88      	ldr	r3, [pc, #544]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ea      	bne.n	8002316 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 8097 	beq.w	800247c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234e:	2300      	movs	r3, #0
 8002350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002352:	4b81      	ldr	r3, [pc, #516]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10f      	bne.n	800237e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	4b7d      	ldr	r3, [pc, #500]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	4a7c      	ldr	r2, [pc, #496]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236c:	6413      	str	r3, [r2, #64]	; 0x40
 800236e:	4b7a      	ldr	r3, [pc, #488]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800237a:	2301      	movs	r3, #1
 800237c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237e:	4b77      	ldr	r3, [pc, #476]	; (800255c <HAL_RCC_OscConfig+0x474>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d118      	bne.n	80023bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800238a:	4b74      	ldr	r3, [pc, #464]	; (800255c <HAL_RCC_OscConfig+0x474>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a73      	ldr	r2, [pc, #460]	; (800255c <HAL_RCC_OscConfig+0x474>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002396:	f7fe ff55 	bl	8001244 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239e:	f7fe ff51 	bl	8001244 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e10c      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b0:	4b6a      	ldr	r3, [pc, #424]	; (800255c <HAL_RCC_OscConfig+0x474>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x2ea>
 80023c4:	4b64      	ldr	r3, [pc, #400]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	4a63      	ldr	r2, [pc, #396]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6713      	str	r3, [r2, #112]	; 0x70
 80023d0:	e01c      	b.n	800240c <HAL_RCC_OscConfig+0x324>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b05      	cmp	r3, #5
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x30c>
 80023da:	4b5f      	ldr	r3, [pc, #380]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80023dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023de:	4a5e      	ldr	r2, [pc, #376]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80023e0:	f043 0304 	orr.w	r3, r3, #4
 80023e4:	6713      	str	r3, [r2, #112]	; 0x70
 80023e6:	4b5c      	ldr	r3, [pc, #368]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ea:	4a5b      	ldr	r2, [pc, #364]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6713      	str	r3, [r2, #112]	; 0x70
 80023f2:	e00b      	b.n	800240c <HAL_RCC_OscConfig+0x324>
 80023f4:	4b58      	ldr	r3, [pc, #352]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	4a57      	ldr	r2, [pc, #348]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002400:	4b55      	ldr	r3, [pc, #340]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002404:	4a54      	ldr	r2, [pc, #336]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002406:	f023 0304 	bic.w	r3, r3, #4
 800240a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d015      	beq.n	8002440 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7fe ff16 	bl	8001244 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241a:	e00a      	b.n	8002432 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800241c:	f7fe ff12 	bl	8001244 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	; 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e0cb      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002432:	4b49      	ldr	r3, [pc, #292]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0ee      	beq.n	800241c <HAL_RCC_OscConfig+0x334>
 800243e:	e014      	b.n	800246a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002440:	f7fe ff00 	bl	8001244 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002446:	e00a      	b.n	800245e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002448:	f7fe fefc 	bl	8001244 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	; 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e0b5      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245e:	4b3e      	ldr	r3, [pc, #248]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1ee      	bne.n	8002448 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800246a:	7dfb      	ldrb	r3, [r7, #23]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d105      	bne.n	800247c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002470:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	4a38      	ldr	r2, [pc, #224]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80a1 	beq.w	80025c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002486:	4b34      	ldr	r3, [pc, #208]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b08      	cmp	r3, #8
 8002490:	d05c      	beq.n	800254c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d141      	bne.n	800251e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249a:	4b31      	ldr	r3, [pc, #196]	; (8002560 <HAL_RCC_OscConfig+0x478>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe fed0 	bl	8001244 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe fecc 	bl	8001244 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e087      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ba:	4b27      	ldr	r3, [pc, #156]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69da      	ldr	r2, [r3, #28]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	019b      	lsls	r3, r3, #6
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	085b      	lsrs	r3, r3, #1
 80024de:	3b01      	subs	r3, #1
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	061b      	lsls	r3, r3, #24
 80024ea:	491b      	ldr	r1, [pc, #108]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <HAL_RCC_OscConfig+0x478>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7fe fea5 	bl	8001244 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fe:	f7fe fea1 	bl	8001244 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e05c      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x416>
 800251c:	e054      	b.n	80025c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251e:	4b10      	ldr	r3, [pc, #64]	; (8002560 <HAL_RCC_OscConfig+0x478>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7fe fe8e 	bl	8001244 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252c:	f7fe fe8a 	bl	8001244 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e045      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x444>
 800254a:	e03d      	b.n	80025c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d107      	bne.n	8002564 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e038      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
 8002558:	40023800 	.word	0x40023800
 800255c:	40007000 	.word	0x40007000
 8002560:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002564:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <HAL_RCC_OscConfig+0x4ec>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d028      	beq.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d121      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d11a      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002594:	4013      	ands	r3, r2
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800259a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800259c:	4293      	cmp	r3, r2
 800259e:	d111      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025aa:	085b      	lsrs	r3, r3, #1
 80025ac:	3b01      	subs	r3, #1
 80025ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d107      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800

080025d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0cc      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025ec:	4b68      	ldr	r3, [pc, #416]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d90c      	bls.n	8002614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b65      	ldr	r3, [pc, #404]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b63      	ldr	r3, [pc, #396]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0b8      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800262c:	4b59      	ldr	r3, [pc, #356]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4a58      	ldr	r2, [pc, #352]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002636:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002644:	4b53      	ldr	r3, [pc, #332]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a52      	ldr	r2, [pc, #328]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800264e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002650:	4b50      	ldr	r3, [pc, #320]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	494d      	ldr	r1, [pc, #308]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d044      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d119      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e07f      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d003      	beq.n	8002696 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002692:	2b03      	cmp	r3, #3
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002696:	4b3f      	ldr	r3, [pc, #252]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e06f      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a6:	4b3b      	ldr	r3, [pc, #236]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e067      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b6:	4b37      	ldr	r3, [pc, #220]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f023 0203 	bic.w	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4934      	ldr	r1, [pc, #208]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c8:	f7fe fdbc 	bl	8001244 <HAL_GetTick>
 80026cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d0:	f7fe fdb8 	bl	8001244 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	; 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e04f      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 020c 	and.w	r2, r3, #12
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d1eb      	bne.n	80026d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f8:	4b25      	ldr	r3, [pc, #148]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d20c      	bcs.n	8002720 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	4b22      	ldr	r3, [pc, #136]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e032      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4916      	ldr	r1, [pc, #88]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	490e      	ldr	r1, [pc, #56]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800275e:	f000 f821 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8002762:	4602      	mov	r2, r0
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	490a      	ldr	r1, [pc, #40]	; (8002798 <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	5ccb      	ldrb	r3, [r1, r3]
 8002772:	fa22 f303 	lsr.w	r3, r2, r3
 8002776:	4a09      	ldr	r2, [pc, #36]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_RCC_ClockConfig+0x1c8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fd1c 	bl	80011bc <HAL_InitTick>

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40023c00 	.word	0x40023c00
 8002794:	40023800 	.word	0x40023800
 8002798:	080041fc 	.word	0x080041fc
 800279c:	20000000 	.word	0x20000000
 80027a0:	20000004 	.word	0x20000004

080027a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a8:	b094      	sub	sp, #80	; 0x50
 80027aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	647b      	str	r3, [r7, #68]	; 0x44
 80027b0:	2300      	movs	r3, #0
 80027b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027b4:	2300      	movs	r3, #0
 80027b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027bc:	4b79      	ldr	r3, [pc, #484]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d00d      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x40>
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	f200 80e1 	bhi.w	8002990 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x34>
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d003      	beq.n	80027de <HAL_RCC_GetSysClockFreq+0x3a>
 80027d6:	e0db      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027d8:	4b73      	ldr	r3, [pc, #460]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80027da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80027dc:	e0db      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027de:	4b73      	ldr	r3, [pc, #460]	; (80029ac <HAL_RCC_GetSysClockFreq+0x208>)
 80027e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e2:	e0d8      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027e4:	4b6f      	ldr	r3, [pc, #444]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ee:	4b6d      	ldr	r3, [pc, #436]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d063      	beq.n	80028c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027fa:	4b6a      	ldr	r3, [pc, #424]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	099b      	lsrs	r3, r3, #6
 8002800:	2200      	movs	r2, #0
 8002802:	63bb      	str	r3, [r7, #56]	; 0x38
 8002804:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800280c:	633b      	str	r3, [r7, #48]	; 0x30
 800280e:	2300      	movs	r3, #0
 8002810:	637b      	str	r3, [r7, #52]	; 0x34
 8002812:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002816:	4622      	mov	r2, r4
 8002818:	462b      	mov	r3, r5
 800281a:	f04f 0000 	mov.w	r0, #0
 800281e:	f04f 0100 	mov.w	r1, #0
 8002822:	0159      	lsls	r1, r3, #5
 8002824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002828:	0150      	lsls	r0, r2, #5
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4621      	mov	r1, r4
 8002830:	1a51      	subs	r1, r2, r1
 8002832:	6139      	str	r1, [r7, #16]
 8002834:	4629      	mov	r1, r5
 8002836:	eb63 0301 	sbc.w	r3, r3, r1
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002848:	4659      	mov	r1, fp
 800284a:	018b      	lsls	r3, r1, #6
 800284c:	4651      	mov	r1, sl
 800284e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002852:	4651      	mov	r1, sl
 8002854:	018a      	lsls	r2, r1, #6
 8002856:	4651      	mov	r1, sl
 8002858:	ebb2 0801 	subs.w	r8, r2, r1
 800285c:	4659      	mov	r1, fp
 800285e:	eb63 0901 	sbc.w	r9, r3, r1
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800286e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002876:	4690      	mov	r8, r2
 8002878:	4699      	mov	r9, r3
 800287a:	4623      	mov	r3, r4
 800287c:	eb18 0303 	adds.w	r3, r8, r3
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	462b      	mov	r3, r5
 8002884:	eb49 0303 	adc.w	r3, r9, r3
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002896:	4629      	mov	r1, r5
 8002898:	024b      	lsls	r3, r1, #9
 800289a:	4621      	mov	r1, r4
 800289c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028a0:	4621      	mov	r1, r4
 80028a2:	024a      	lsls	r2, r1, #9
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028aa:	2200      	movs	r2, #0
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028b4:	f7fd fcf4 	bl	80002a0 <__aeabi_uldivmod>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4613      	mov	r3, r2
 80028be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028c0:	e058      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c2:	4b38      	ldr	r3, [pc, #224]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	099b      	lsrs	r3, r3, #6
 80028c8:	2200      	movs	r2, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	4611      	mov	r1, r2
 80028ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028d2:	623b      	str	r3, [r7, #32]
 80028d4:	2300      	movs	r3, #0
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
 80028d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028dc:	4642      	mov	r2, r8
 80028de:	464b      	mov	r3, r9
 80028e0:	f04f 0000 	mov.w	r0, #0
 80028e4:	f04f 0100 	mov.w	r1, #0
 80028e8:	0159      	lsls	r1, r3, #5
 80028ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ee:	0150      	lsls	r0, r2, #5
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4641      	mov	r1, r8
 80028f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80028fa:	4649      	mov	r1, r9
 80028fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800290c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002910:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002914:	ebb2 040a 	subs.w	r4, r2, sl
 8002918:	eb63 050b 	sbc.w	r5, r3, fp
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	00eb      	lsls	r3, r5, #3
 8002926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800292a:	00e2      	lsls	r2, r4, #3
 800292c:	4614      	mov	r4, r2
 800292e:	461d      	mov	r5, r3
 8002930:	4643      	mov	r3, r8
 8002932:	18e3      	adds	r3, r4, r3
 8002934:	603b      	str	r3, [r7, #0]
 8002936:	464b      	mov	r3, r9
 8002938:	eb45 0303 	adc.w	r3, r5, r3
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800294a:	4629      	mov	r1, r5
 800294c:	028b      	lsls	r3, r1, #10
 800294e:	4621      	mov	r1, r4
 8002950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002954:	4621      	mov	r1, r4
 8002956:	028a      	lsls	r2, r1, #10
 8002958:	4610      	mov	r0, r2
 800295a:	4619      	mov	r1, r3
 800295c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800295e:	2200      	movs	r2, #0
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	61fa      	str	r2, [r7, #28]
 8002964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002968:	f7fd fc9a 	bl	80002a0 <__aeabi_uldivmod>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4613      	mov	r3, r2
 8002972:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	0c1b      	lsrs	r3, r3, #16
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	3301      	adds	r3, #1
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002984:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800298e:	e002      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002992:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002998:	4618      	mov	r0, r3
 800299a:	3750      	adds	r7, #80	; 0x50
 800299c:	46bd      	mov	sp, r7
 800299e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
 80029a8:	00f42400 	.word	0x00f42400
 80029ac:	007a1200 	.word	0x007a1200

080029b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000000 	.word	0x20000000

080029c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029cc:	f7ff fff0 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	0a9b      	lsrs	r3, r3, #10
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4903      	ldr	r1, [pc, #12]	; (80029ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40023800 	.word	0x40023800
 80029ec:	0800420c 	.word	0x0800420c

080029f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029f4:	f7ff ffdc 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029f8:	4602      	mov	r2, r0
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	0b5b      	lsrs	r3, r3, #13
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	4903      	ldr	r1, [pc, #12]	; (8002a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a06:	5ccb      	ldrb	r3, [r1, r3]
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40023800 	.word	0x40023800
 8002a14:	0800420c 	.word	0x0800420c

08002a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e03f      	b.n	8002aaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fe f8a6 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2224      	movs	r2, #36	; 0x24
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f929 	bl	8002cb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b08a      	sub	sp, #40	; 0x28
 8002ab6:	af02      	add	r7, sp, #8
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	603b      	str	r3, [r7, #0]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	d17c      	bne.n	8002bcc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <HAL_UART_Transmit+0x2c>
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e075      	b.n	8002bce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_UART_Transmit+0x3e>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e06e      	b.n	8002bce <HAL_UART_Transmit+0x11c>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2221      	movs	r2, #33	; 0x21
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b06:	f7fe fb9d 	bl	8001244 <HAL_GetTick>
 8002b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	88fa      	ldrh	r2, [r7, #6]
 8002b10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	88fa      	ldrh	r2, [r7, #6]
 8002b16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b20:	d108      	bne.n	8002b34 <HAL_UART_Transmit+0x82>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d104      	bne.n	8002b34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	e003      	b.n	8002b3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b44:	e02a      	b.n	8002b9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2180      	movs	r1, #128	; 0x80
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f840 	bl	8002bd6 <UART_WaitOnFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e036      	b.n	8002bce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10b      	bne.n	8002b7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	3302      	adds	r3, #2
 8002b7a:	61bb      	str	r3, [r7, #24]
 8002b7c:	e007      	b.n	8002b8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	781a      	ldrb	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1cf      	bne.n	8002b46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2200      	movs	r2, #0
 8002bae:	2140      	movs	r1, #64	; 0x40
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f810 	bl	8002bd6 <UART_WaitOnFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e006      	b.n	8002bce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e000      	b.n	8002bce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002bcc:	2302      	movs	r3, #2
  }
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3720      	adds	r7, #32
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b090      	sub	sp, #64	; 0x40
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	603b      	str	r3, [r7, #0]
 8002be2:	4613      	mov	r3, r2
 8002be4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002be6:	e050      	b.n	8002c8a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bee:	d04c      	beq.n	8002c8a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bf6:	f7fe fb25 	bl	8001244 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d241      	bcs.n	8002c8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	330c      	adds	r3, #12
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	e853 3f00 	ldrex	r3, [r3]
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	330c      	adds	r3, #12
 8002c24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c26:	637a      	str	r2, [r7, #52]	; 0x34
 8002c28:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c2e:	e841 2300 	strex	r3, r2, [r1]
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e5      	bne.n	8002c06 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3314      	adds	r3, #20
 8002c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	e853 3f00 	ldrex	r3, [r3]
 8002c48:	613b      	str	r3, [r7, #16]
   return(result);
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3314      	adds	r3, #20
 8002c58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c5a:	623a      	str	r2, [r7, #32]
 8002c5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5e:	69f9      	ldr	r1, [r7, #28]
 8002c60:	6a3a      	ldr	r2, [r7, #32]
 8002c62:	e841 2300 	strex	r3, r2, [r1]
 8002c66:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1e5      	bne.n	8002c3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e00f      	b.n	8002caa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4013      	ands	r3, r2
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	bf0c      	ite	eq
 8002c9a:	2301      	moveq	r3, #1
 8002c9c:	2300      	movne	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d09f      	beq.n	8002be8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3740      	adds	r7, #64	; 0x40
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb8:	b0c0      	sub	sp, #256	; 0x100
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd0:	68d9      	ldr	r1, [r3, #12]
 8002cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	ea40 0301 	orr.w	r3, r0, r1
 8002cdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d0c:	f021 010c 	bic.w	r1, r1, #12
 8002d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2e:	6999      	ldr	r1, [r3, #24]
 8002d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	ea40 0301 	orr.w	r3, r0, r1
 8002d3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4b8f      	ldr	r3, [pc, #572]	; (8002f80 <UART_SetConfig+0x2cc>)
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d005      	beq.n	8002d54 <UART_SetConfig+0xa0>
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b8d      	ldr	r3, [pc, #564]	; (8002f84 <UART_SetConfig+0x2d0>)
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d104      	bne.n	8002d5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d54:	f7ff fe4c 	bl	80029f0 <HAL_RCC_GetPCLK2Freq>
 8002d58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d5c:	e003      	b.n	8002d66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d5e:	f7ff fe33 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8002d62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d70:	f040 810c 	bne.w	8002f8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d86:	4622      	mov	r2, r4
 8002d88:	462b      	mov	r3, r5
 8002d8a:	1891      	adds	r1, r2, r2
 8002d8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d8e:	415b      	adcs	r3, r3
 8002d90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d96:	4621      	mov	r1, r4
 8002d98:	eb12 0801 	adds.w	r8, r2, r1
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	eb43 0901 	adc.w	r9, r3, r1
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002db2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002db6:	4690      	mov	r8, r2
 8002db8:	4699      	mov	r9, r3
 8002dba:	4623      	mov	r3, r4
 8002dbc:	eb18 0303 	adds.w	r3, r8, r3
 8002dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002dc4:	462b      	mov	r3, r5
 8002dc6:	eb49 0303 	adc.w	r3, r9, r3
 8002dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002dda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002dde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002de2:	460b      	mov	r3, r1
 8002de4:	18db      	adds	r3, r3, r3
 8002de6:	653b      	str	r3, [r7, #80]	; 0x50
 8002de8:	4613      	mov	r3, r2
 8002dea:	eb42 0303 	adc.w	r3, r2, r3
 8002dee:	657b      	str	r3, [r7, #84]	; 0x54
 8002df0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002df4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002df8:	f7fd fa52 	bl	80002a0 <__aeabi_uldivmod>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4b61      	ldr	r3, [pc, #388]	; (8002f88 <UART_SetConfig+0x2d4>)
 8002e02:	fba3 2302 	umull	r2, r3, r3, r2
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	011c      	lsls	r4, r3, #4
 8002e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e1c:	4642      	mov	r2, r8
 8002e1e:	464b      	mov	r3, r9
 8002e20:	1891      	adds	r1, r2, r2
 8002e22:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e24:	415b      	adcs	r3, r3
 8002e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e2c:	4641      	mov	r1, r8
 8002e2e:	eb12 0a01 	adds.w	sl, r2, r1
 8002e32:	4649      	mov	r1, r9
 8002e34:	eb43 0b01 	adc.w	fp, r3, r1
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e4c:	4692      	mov	sl, r2
 8002e4e:	469b      	mov	fp, r3
 8002e50:	4643      	mov	r3, r8
 8002e52:	eb1a 0303 	adds.w	r3, sl, r3
 8002e56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e5a:	464b      	mov	r3, r9
 8002e5c:	eb4b 0303 	adc.w	r3, fp, r3
 8002e60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	18db      	adds	r3, r3, r3
 8002e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8002e7e:	4613      	mov	r3, r2
 8002e80:	eb42 0303 	adc.w	r3, r2, r3
 8002e84:	647b      	str	r3, [r7, #68]	; 0x44
 8002e86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e8e:	f7fd fa07 	bl	80002a0 <__aeabi_uldivmod>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4611      	mov	r1, r2
 8002e98:	4b3b      	ldr	r3, [pc, #236]	; (8002f88 <UART_SetConfig+0x2d4>)
 8002e9a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	2264      	movs	r2, #100	; 0x64
 8002ea2:	fb02 f303 	mul.w	r3, r2, r3
 8002ea6:	1acb      	subs	r3, r1, r3
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002eae:	4b36      	ldr	r3, [pc, #216]	; (8002f88 <UART_SetConfig+0x2d4>)
 8002eb0:	fba3 2302 	umull	r2, r3, r3, r2
 8002eb4:	095b      	lsrs	r3, r3, #5
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ebc:	441c      	add	r4, r3
 8002ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ec8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ecc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ed0:	4642      	mov	r2, r8
 8002ed2:	464b      	mov	r3, r9
 8002ed4:	1891      	adds	r1, r2, r2
 8002ed6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ed8:	415b      	adcs	r3, r3
 8002eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002edc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ee0:	4641      	mov	r1, r8
 8002ee2:	1851      	adds	r1, r2, r1
 8002ee4:	6339      	str	r1, [r7, #48]	; 0x30
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	414b      	adcs	r3, r1
 8002eea:	637b      	str	r3, [r7, #52]	; 0x34
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ef8:	4659      	mov	r1, fp
 8002efa:	00cb      	lsls	r3, r1, #3
 8002efc:	4651      	mov	r1, sl
 8002efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f02:	4651      	mov	r1, sl
 8002f04:	00ca      	lsls	r2, r1, #3
 8002f06:	4610      	mov	r0, r2
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4642      	mov	r2, r8
 8002f0e:	189b      	adds	r3, r3, r2
 8002f10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f14:	464b      	mov	r3, r9
 8002f16:	460a      	mov	r2, r1
 8002f18:	eb42 0303 	adc.w	r3, r2, r3
 8002f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f34:	460b      	mov	r3, r1
 8002f36:	18db      	adds	r3, r3, r3
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	eb42 0303 	adc.w	r3, r2, r3
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f4a:	f7fd f9a9 	bl	80002a0 <__aeabi_uldivmod>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <UART_SetConfig+0x2d4>)
 8002f54:	fba3 1302 	umull	r1, r3, r3, r2
 8002f58:	095b      	lsrs	r3, r3, #5
 8002f5a:	2164      	movs	r1, #100	; 0x64
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	3332      	adds	r3, #50	; 0x32
 8002f66:	4a08      	ldr	r2, [pc, #32]	; (8002f88 <UART_SetConfig+0x2d4>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	095b      	lsrs	r3, r3, #5
 8002f6e:	f003 0207 	and.w	r2, r3, #7
 8002f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4422      	add	r2, r4
 8002f7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f7c:	e106      	b.n	800318c <UART_SetConfig+0x4d8>
 8002f7e:	bf00      	nop
 8002f80:	40011000 	.word	0x40011000
 8002f84:	40011400 	.word	0x40011400
 8002f88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f90:	2200      	movs	r2, #0
 8002f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f9e:	4642      	mov	r2, r8
 8002fa0:	464b      	mov	r3, r9
 8002fa2:	1891      	adds	r1, r2, r2
 8002fa4:	6239      	str	r1, [r7, #32]
 8002fa6:	415b      	adcs	r3, r3
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8002faa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fae:	4641      	mov	r1, r8
 8002fb0:	1854      	adds	r4, r2, r1
 8002fb2:	4649      	mov	r1, r9
 8002fb4:	eb43 0501 	adc.w	r5, r3, r1
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	00eb      	lsls	r3, r5, #3
 8002fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fc6:	00e2      	lsls	r2, r4, #3
 8002fc8:	4614      	mov	r4, r2
 8002fca:	461d      	mov	r5, r3
 8002fcc:	4643      	mov	r3, r8
 8002fce:	18e3      	adds	r3, r4, r3
 8002fd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fd4:	464b      	mov	r3, r9
 8002fd6:	eb45 0303 	adc.w	r3, r5, r3
 8002fda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	008b      	lsls	r3, r1, #2
 8002ffe:	4621      	mov	r1, r4
 8003000:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003004:	4621      	mov	r1, r4
 8003006:	008a      	lsls	r2, r1, #2
 8003008:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800300c:	f7fd f948 	bl	80002a0 <__aeabi_uldivmod>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4b60      	ldr	r3, [pc, #384]	; (8003198 <UART_SetConfig+0x4e4>)
 8003016:	fba3 2302 	umull	r2, r3, r3, r2
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	011c      	lsls	r4, r3, #4
 800301e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003022:	2200      	movs	r2, #0
 8003024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003028:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800302c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003030:	4642      	mov	r2, r8
 8003032:	464b      	mov	r3, r9
 8003034:	1891      	adds	r1, r2, r2
 8003036:	61b9      	str	r1, [r7, #24]
 8003038:	415b      	adcs	r3, r3
 800303a:	61fb      	str	r3, [r7, #28]
 800303c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003040:	4641      	mov	r1, r8
 8003042:	1851      	adds	r1, r2, r1
 8003044:	6139      	str	r1, [r7, #16]
 8003046:	4649      	mov	r1, r9
 8003048:	414b      	adcs	r3, r1
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003058:	4659      	mov	r1, fp
 800305a:	00cb      	lsls	r3, r1, #3
 800305c:	4651      	mov	r1, sl
 800305e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003062:	4651      	mov	r1, sl
 8003064:	00ca      	lsls	r2, r1, #3
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	4603      	mov	r3, r0
 800306c:	4642      	mov	r2, r8
 800306e:	189b      	adds	r3, r3, r2
 8003070:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003074:	464b      	mov	r3, r9
 8003076:	460a      	mov	r2, r1
 8003078:	eb42 0303 	adc.w	r3, r2, r3
 800307c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	67bb      	str	r3, [r7, #120]	; 0x78
 800308a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003098:	4649      	mov	r1, r9
 800309a:	008b      	lsls	r3, r1, #2
 800309c:	4641      	mov	r1, r8
 800309e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030a2:	4641      	mov	r1, r8
 80030a4:	008a      	lsls	r2, r1, #2
 80030a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030aa:	f7fd f8f9 	bl	80002a0 <__aeabi_uldivmod>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4611      	mov	r1, r2
 80030b4:	4b38      	ldr	r3, [pc, #224]	; (8003198 <UART_SetConfig+0x4e4>)
 80030b6:	fba3 2301 	umull	r2, r3, r3, r1
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2264      	movs	r2, #100	; 0x64
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	1acb      	subs	r3, r1, r3
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	3332      	adds	r3, #50	; 0x32
 80030c8:	4a33      	ldr	r2, [pc, #204]	; (8003198 <UART_SetConfig+0x4e4>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030d4:	441c      	add	r4, r3
 80030d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030da:	2200      	movs	r2, #0
 80030dc:	673b      	str	r3, [r7, #112]	; 0x70
 80030de:	677a      	str	r2, [r7, #116]	; 0x74
 80030e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80030e4:	4642      	mov	r2, r8
 80030e6:	464b      	mov	r3, r9
 80030e8:	1891      	adds	r1, r2, r2
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	415b      	adcs	r3, r3
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030f4:	4641      	mov	r1, r8
 80030f6:	1851      	adds	r1, r2, r1
 80030f8:	6039      	str	r1, [r7, #0]
 80030fa:	4649      	mov	r1, r9
 80030fc:	414b      	adcs	r3, r1
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800310c:	4659      	mov	r1, fp
 800310e:	00cb      	lsls	r3, r1, #3
 8003110:	4651      	mov	r1, sl
 8003112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003116:	4651      	mov	r1, sl
 8003118:	00ca      	lsls	r2, r1, #3
 800311a:	4610      	mov	r0, r2
 800311c:	4619      	mov	r1, r3
 800311e:	4603      	mov	r3, r0
 8003120:	4642      	mov	r2, r8
 8003122:	189b      	adds	r3, r3, r2
 8003124:	66bb      	str	r3, [r7, #104]	; 0x68
 8003126:	464b      	mov	r3, r9
 8003128:	460a      	mov	r2, r1
 800312a:	eb42 0303 	adc.w	r3, r2, r3
 800312e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	663b      	str	r3, [r7, #96]	; 0x60
 800313a:	667a      	str	r2, [r7, #100]	; 0x64
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003148:	4649      	mov	r1, r9
 800314a:	008b      	lsls	r3, r1, #2
 800314c:	4641      	mov	r1, r8
 800314e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003152:	4641      	mov	r1, r8
 8003154:	008a      	lsls	r2, r1, #2
 8003156:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800315a:	f7fd f8a1 	bl	80002a0 <__aeabi_uldivmod>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4b0d      	ldr	r3, [pc, #52]	; (8003198 <UART_SetConfig+0x4e4>)
 8003164:	fba3 1302 	umull	r1, r3, r3, r2
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	2164      	movs	r1, #100	; 0x64
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	3332      	adds	r3, #50	; 0x32
 8003176:	4a08      	ldr	r2, [pc, #32]	; (8003198 <UART_SetConfig+0x4e4>)
 8003178:	fba2 2303 	umull	r2, r3, r2, r3
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	f003 020f 	and.w	r2, r3, #15
 8003182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4422      	add	r2, r4
 800318a:	609a      	str	r2, [r3, #8]
}
 800318c:	bf00      	nop
 800318e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003192:	46bd      	mov	sp, r7
 8003194:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003198:	51eb851f 	.word	0x51eb851f

0800319c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800319c:	b084      	sub	sp, #16
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	f107 001c 	add.w	r0, r7, #28
 80031aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d122      	bne.n	80031fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80031c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80031dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d105      	bne.n	80031ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 faa2 	bl	8003738 <USB_CoreReset>
 80031f4:	4603      	mov	r3, r0
 80031f6:	73fb      	strb	r3, [r7, #15]
 80031f8:	e01a      	b.n	8003230 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fa96 	bl	8003738 <USB_CoreReset>
 800320c:	4603      	mov	r3, r0
 800320e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	639a      	str	r2, [r3, #56]	; 0x38
 8003222:	e005      	b.n	8003230 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	2b01      	cmp	r3, #1
 8003234:	d10b      	bne.n	800324e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f043 0206 	orr.w	r2, r3, #6
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f043 0220 	orr.w	r2, r3, #32
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800324e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800325a:	b004      	add	sp, #16
 800325c:	4770      	bx	lr

0800325e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f023 0201 	bic.w	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d115      	bne.n	80032ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80032ae:	2001      	movs	r0, #1
 80032b0:	f7fd ffd4 	bl	800125c <HAL_Delay>
      ms++;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3301      	adds	r3, #1
 80032b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fa2e 	bl	800371c <USB_GetMode>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d01e      	beq.n	8003304 <USB_SetCurrentMode+0x84>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b31      	cmp	r3, #49	; 0x31
 80032ca:	d9f0      	bls.n	80032ae <USB_SetCurrentMode+0x2e>
 80032cc:	e01a      	b.n	8003304 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d115      	bne.n	8003300 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80032e0:	2001      	movs	r0, #1
 80032e2:	f7fd ffbb 	bl	800125c <HAL_Delay>
      ms++;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3301      	adds	r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 fa15 	bl	800371c <USB_GetMode>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <USB_SetCurrentMode+0x84>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b31      	cmp	r3, #49	; 0x31
 80032fc:	d9f0      	bls.n	80032e0 <USB_SetCurrentMode+0x60>
 80032fe:	e001      	b.n	8003304 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e005      	b.n	8003310 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b32      	cmp	r3, #50	; 0x32
 8003308:	d101      	bne.n	800330e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003318:	b084      	sub	sp, #16
 800331a:	b580      	push	{r7, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	e009      	b.n	800334c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	3340      	adds	r3, #64	; 0x40
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	2200      	movs	r2, #0
 8003344:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	3301      	adds	r3, #1
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	2b0e      	cmp	r3, #14
 8003350:	d9f2      	bls.n	8003338 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003354:	2b00      	cmp	r3, #0
 8003356:	d11c      	bne.n	8003392 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003366:	f043 0302 	orr.w	r3, r3, #2
 800336a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	639a      	str	r2, [r3, #56]	; 0x38
 8003390:	e00b      	b.n	80033aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80033b0:	461a      	mov	r2, r3
 80033b2:	2300      	movs	r3, #0
 80033b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033bc:	4619      	mov	r1, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c4:	461a      	mov	r2, r3
 80033c6:	680b      	ldr	r3, [r1, #0]
 80033c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d10c      	bne.n	80033ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80033d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d104      	bne.n	80033e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80033d6:	2100      	movs	r1, #0
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f965 	bl	80036a8 <USB_SetDevSpeed>
 80033de:	e008      	b.n	80033f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80033e0:	2101      	movs	r1, #1
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f960 	bl	80036a8 <USB_SetDevSpeed>
 80033e8:	e003      	b.n	80033f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80033ea:	2103      	movs	r1, #3
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f95b 	bl	80036a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80033f2:	2110      	movs	r1, #16
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f8f3 	bl	80035e0 <USB_FlushTxFifo>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f91f 	bl	8003648 <USB_FlushRxFifo>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800341a:	461a      	mov	r2, r3
 800341c:	2300      	movs	r3, #0
 800341e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003426:	461a      	mov	r2, r3
 8003428:	2300      	movs	r3, #0
 800342a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003432:	461a      	mov	r2, r3
 8003434:	2300      	movs	r3, #0
 8003436:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003438:	2300      	movs	r3, #0
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	e043      	b.n	80034c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4413      	add	r3, r2
 8003446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003454:	d118      	bne.n	8003488 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10a      	bne.n	8003472 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003468:	461a      	mov	r2, r3
 800346a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	e013      	b.n	800349a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800347e:	461a      	mov	r2, r3
 8003480:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	e008      	b.n	800349a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003494:	461a      	mov	r2, r3
 8003496:	2300      	movs	r3, #0
 8003498:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a6:	461a      	mov	r2, r3
 80034a8:	2300      	movs	r3, #0
 80034aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b8:	461a      	mov	r2, r3
 80034ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	3301      	adds	r3, #1
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d3b7      	bcc.n	800343e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	e043      	b.n	800355c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034ea:	d118      	bne.n	800351e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10a      	bne.n	8003508 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fe:	461a      	mov	r2, r3
 8003500:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	e013      	b.n	8003530 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003514:	461a      	mov	r2, r3
 8003516:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	e008      	b.n	8003530 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4413      	add	r3, r2
 8003526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352a:	461a      	mov	r2, r3
 800352c:	2300      	movs	r3, #0
 800352e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353c:	461a      	mov	r2, r3
 800353e:	2300      	movs	r3, #0
 8003540:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4413      	add	r3, r2
 800354a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800354e:	461a      	mov	r2, r3
 8003550:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003554:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	3301      	adds	r3, #1
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	429a      	cmp	r2, r3
 8003562:	d3b7      	bcc.n	80034d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003576:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003584:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003588:	2b00      	cmp	r3, #0
 800358a:	d105      	bne.n	8003598 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	f043 0210 	orr.w	r2, r3, #16
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699a      	ldr	r2, [r3, #24]
 800359c:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <USB_DevInit+0x2c4>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80035a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d005      	beq.n	80035b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f043 0208 	orr.w	r2, r3, #8
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80035b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d107      	bne.n	80035cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035c4:	f043 0304 	orr.w	r3, r3, #4
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035d8:	b004      	add	sp, #16
 80035da:	4770      	bx	lr
 80035dc:	803c3800 	.word	0x803c3800

080035e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	3301      	adds	r3, #1
 80035f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4a13      	ldr	r2, [pc, #76]	; (8003644 <USB_FlushTxFifo+0x64>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d901      	bls.n	8003600 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e01b      	b.n	8003638 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	daf2      	bge.n	80035ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	019b      	lsls	r3, r3, #6
 8003610:	f043 0220 	orr.w	r2, r3, #32
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3301      	adds	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4a08      	ldr	r2, [pc, #32]	; (8003644 <USB_FlushTxFifo+0x64>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d901      	bls.n	800362a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e006      	b.n	8003638 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b20      	cmp	r3, #32
 8003634:	d0f0      	beq.n	8003618 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	00030d40 	.word	0x00030d40

08003648 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3301      	adds	r3, #1
 8003658:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4a11      	ldr	r2, [pc, #68]	; (80036a4 <USB_FlushRxFifo+0x5c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e018      	b.n	8003698 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	daf2      	bge.n	8003654 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2210      	movs	r2, #16
 8003676:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	3301      	adds	r3, #1
 800367c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4a08      	ldr	r2, [pc, #32]	; (80036a4 <USB_FlushRxFifo+0x5c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e006      	b.n	8003698 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	2b10      	cmp	r3, #16
 8003694:	d0f0      	beq.n	8003678 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	00030d40 	.word	0x00030d40

080036a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	68f9      	ldr	r1, [r7, #12]
 80036c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036c8:	4313      	orrs	r3, r2
 80036ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80036f4:	f023 0303 	bic.w	r3, r3, #3
 80036f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003708:	f043 0302 	orr.w	r3, r3, #2
 800370c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f003 0301 	and.w	r3, r3, #1
}
 800372c:	4618      	mov	r0, r3
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3301      	adds	r3, #1
 8003748:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4a13      	ldr	r2, [pc, #76]	; (800379c <USB_CoreReset+0x64>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d901      	bls.n	8003756 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e01b      	b.n	800378e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	daf2      	bge.n	8003744 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	3301      	adds	r3, #1
 8003772:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4a09      	ldr	r2, [pc, #36]	; (800379c <USB_CoreReset+0x64>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d901      	bls.n	8003780 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e006      	b.n	800378e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	d0f0      	beq.n	800376e <USB_CoreReset+0x36>

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	00030d40 	.word	0x00030d40

080037a0 <sniprintf>:
 80037a0:	b40c      	push	{r2, r3}
 80037a2:	b530      	push	{r4, r5, lr}
 80037a4:	4b17      	ldr	r3, [pc, #92]	; (8003804 <sniprintf+0x64>)
 80037a6:	1e0c      	subs	r4, r1, #0
 80037a8:	681d      	ldr	r5, [r3, #0]
 80037aa:	b09d      	sub	sp, #116	; 0x74
 80037ac:	da08      	bge.n	80037c0 <sniprintf+0x20>
 80037ae:	238b      	movs	r3, #139	; 0x8b
 80037b0:	602b      	str	r3, [r5, #0]
 80037b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037b6:	b01d      	add	sp, #116	; 0x74
 80037b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037bc:	b002      	add	sp, #8
 80037be:	4770      	bx	lr
 80037c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80037c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80037c8:	bf14      	ite	ne
 80037ca:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80037ce:	4623      	moveq	r3, r4
 80037d0:	9304      	str	r3, [sp, #16]
 80037d2:	9307      	str	r3, [sp, #28]
 80037d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037d8:	9002      	str	r0, [sp, #8]
 80037da:	9006      	str	r0, [sp, #24]
 80037dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80037e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80037e2:	ab21      	add	r3, sp, #132	; 0x84
 80037e4:	a902      	add	r1, sp, #8
 80037e6:	4628      	mov	r0, r5
 80037e8:	9301      	str	r3, [sp, #4]
 80037ea:	f000 f993 	bl	8003b14 <_svfiprintf_r>
 80037ee:	1c43      	adds	r3, r0, #1
 80037f0:	bfbc      	itt	lt
 80037f2:	238b      	movlt	r3, #139	; 0x8b
 80037f4:	602b      	strlt	r3, [r5, #0]
 80037f6:	2c00      	cmp	r4, #0
 80037f8:	d0dd      	beq.n	80037b6 <sniprintf+0x16>
 80037fa:	9b02      	ldr	r3, [sp, #8]
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
 8003800:	e7d9      	b.n	80037b6 <sniprintf+0x16>
 8003802:	bf00      	nop
 8003804:	20000058 	.word	0x20000058

08003808 <memset>:
 8003808:	4402      	add	r2, r0
 800380a:	4603      	mov	r3, r0
 800380c:	4293      	cmp	r3, r2
 800380e:	d100      	bne.n	8003812 <memset+0xa>
 8003810:	4770      	bx	lr
 8003812:	f803 1b01 	strb.w	r1, [r3], #1
 8003816:	e7f9      	b.n	800380c <memset+0x4>

08003818 <__errno>:
 8003818:	4b01      	ldr	r3, [pc, #4]	; (8003820 <__errno+0x8>)
 800381a:	6818      	ldr	r0, [r3, #0]
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000058 	.word	0x20000058

08003824 <__libc_init_array>:
 8003824:	b570      	push	{r4, r5, r6, lr}
 8003826:	4d0d      	ldr	r5, [pc, #52]	; (800385c <__libc_init_array+0x38>)
 8003828:	4c0d      	ldr	r4, [pc, #52]	; (8003860 <__libc_init_array+0x3c>)
 800382a:	1b64      	subs	r4, r4, r5
 800382c:	10a4      	asrs	r4, r4, #2
 800382e:	2600      	movs	r6, #0
 8003830:	42a6      	cmp	r6, r4
 8003832:	d109      	bne.n	8003848 <__libc_init_array+0x24>
 8003834:	4d0b      	ldr	r5, [pc, #44]	; (8003864 <__libc_init_array+0x40>)
 8003836:	4c0c      	ldr	r4, [pc, #48]	; (8003868 <__libc_init_array+0x44>)
 8003838:	f000 fc6a 	bl	8004110 <_init>
 800383c:	1b64      	subs	r4, r4, r5
 800383e:	10a4      	asrs	r4, r4, #2
 8003840:	2600      	movs	r6, #0
 8003842:	42a6      	cmp	r6, r4
 8003844:	d105      	bne.n	8003852 <__libc_init_array+0x2e>
 8003846:	bd70      	pop	{r4, r5, r6, pc}
 8003848:	f855 3b04 	ldr.w	r3, [r5], #4
 800384c:	4798      	blx	r3
 800384e:	3601      	adds	r6, #1
 8003850:	e7ee      	b.n	8003830 <__libc_init_array+0xc>
 8003852:	f855 3b04 	ldr.w	r3, [r5], #4
 8003856:	4798      	blx	r3
 8003858:	3601      	adds	r6, #1
 800385a:	e7f2      	b.n	8003842 <__libc_init_array+0x1e>
 800385c:	08004250 	.word	0x08004250
 8003860:	08004250 	.word	0x08004250
 8003864:	08004250 	.word	0x08004250
 8003868:	08004254 	.word	0x08004254

0800386c <__retarget_lock_acquire_recursive>:
 800386c:	4770      	bx	lr

0800386e <__retarget_lock_release_recursive>:
 800386e:	4770      	bx	lr

08003870 <_free_r>:
 8003870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003872:	2900      	cmp	r1, #0
 8003874:	d044      	beq.n	8003900 <_free_r+0x90>
 8003876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800387a:	9001      	str	r0, [sp, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	f1a1 0404 	sub.w	r4, r1, #4
 8003882:	bfb8      	it	lt
 8003884:	18e4      	addlt	r4, r4, r3
 8003886:	f000 f8df 	bl	8003a48 <__malloc_lock>
 800388a:	4a1e      	ldr	r2, [pc, #120]	; (8003904 <_free_r+0x94>)
 800388c:	9801      	ldr	r0, [sp, #4]
 800388e:	6813      	ldr	r3, [r2, #0]
 8003890:	b933      	cbnz	r3, 80038a0 <_free_r+0x30>
 8003892:	6063      	str	r3, [r4, #4]
 8003894:	6014      	str	r4, [r2, #0]
 8003896:	b003      	add	sp, #12
 8003898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800389c:	f000 b8da 	b.w	8003a54 <__malloc_unlock>
 80038a0:	42a3      	cmp	r3, r4
 80038a2:	d908      	bls.n	80038b6 <_free_r+0x46>
 80038a4:	6825      	ldr	r5, [r4, #0]
 80038a6:	1961      	adds	r1, r4, r5
 80038a8:	428b      	cmp	r3, r1
 80038aa:	bf01      	itttt	eq
 80038ac:	6819      	ldreq	r1, [r3, #0]
 80038ae:	685b      	ldreq	r3, [r3, #4]
 80038b0:	1949      	addeq	r1, r1, r5
 80038b2:	6021      	streq	r1, [r4, #0]
 80038b4:	e7ed      	b.n	8003892 <_free_r+0x22>
 80038b6:	461a      	mov	r2, r3
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	b10b      	cbz	r3, 80038c0 <_free_r+0x50>
 80038bc:	42a3      	cmp	r3, r4
 80038be:	d9fa      	bls.n	80038b6 <_free_r+0x46>
 80038c0:	6811      	ldr	r1, [r2, #0]
 80038c2:	1855      	adds	r5, r2, r1
 80038c4:	42a5      	cmp	r5, r4
 80038c6:	d10b      	bne.n	80038e0 <_free_r+0x70>
 80038c8:	6824      	ldr	r4, [r4, #0]
 80038ca:	4421      	add	r1, r4
 80038cc:	1854      	adds	r4, r2, r1
 80038ce:	42a3      	cmp	r3, r4
 80038d0:	6011      	str	r1, [r2, #0]
 80038d2:	d1e0      	bne.n	8003896 <_free_r+0x26>
 80038d4:	681c      	ldr	r4, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	6053      	str	r3, [r2, #4]
 80038da:	440c      	add	r4, r1
 80038dc:	6014      	str	r4, [r2, #0]
 80038de:	e7da      	b.n	8003896 <_free_r+0x26>
 80038e0:	d902      	bls.n	80038e8 <_free_r+0x78>
 80038e2:	230c      	movs	r3, #12
 80038e4:	6003      	str	r3, [r0, #0]
 80038e6:	e7d6      	b.n	8003896 <_free_r+0x26>
 80038e8:	6825      	ldr	r5, [r4, #0]
 80038ea:	1961      	adds	r1, r4, r5
 80038ec:	428b      	cmp	r3, r1
 80038ee:	bf04      	itt	eq
 80038f0:	6819      	ldreq	r1, [r3, #0]
 80038f2:	685b      	ldreq	r3, [r3, #4]
 80038f4:	6063      	str	r3, [r4, #4]
 80038f6:	bf04      	itt	eq
 80038f8:	1949      	addeq	r1, r1, r5
 80038fa:	6021      	streq	r1, [r4, #0]
 80038fc:	6054      	str	r4, [r2, #4]
 80038fe:	e7ca      	b.n	8003896 <_free_r+0x26>
 8003900:	b003      	add	sp, #12
 8003902:	bd30      	pop	{r4, r5, pc}
 8003904:	200009a8 	.word	0x200009a8

08003908 <sbrk_aligned>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	4e0e      	ldr	r6, [pc, #56]	; (8003944 <sbrk_aligned+0x3c>)
 800390c:	460c      	mov	r4, r1
 800390e:	6831      	ldr	r1, [r6, #0]
 8003910:	4605      	mov	r5, r0
 8003912:	b911      	cbnz	r1, 800391a <sbrk_aligned+0x12>
 8003914:	f000 fba6 	bl	8004064 <_sbrk_r>
 8003918:	6030      	str	r0, [r6, #0]
 800391a:	4621      	mov	r1, r4
 800391c:	4628      	mov	r0, r5
 800391e:	f000 fba1 	bl	8004064 <_sbrk_r>
 8003922:	1c43      	adds	r3, r0, #1
 8003924:	d00a      	beq.n	800393c <sbrk_aligned+0x34>
 8003926:	1cc4      	adds	r4, r0, #3
 8003928:	f024 0403 	bic.w	r4, r4, #3
 800392c:	42a0      	cmp	r0, r4
 800392e:	d007      	beq.n	8003940 <sbrk_aligned+0x38>
 8003930:	1a21      	subs	r1, r4, r0
 8003932:	4628      	mov	r0, r5
 8003934:	f000 fb96 	bl	8004064 <_sbrk_r>
 8003938:	3001      	adds	r0, #1
 800393a:	d101      	bne.n	8003940 <sbrk_aligned+0x38>
 800393c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003940:	4620      	mov	r0, r4
 8003942:	bd70      	pop	{r4, r5, r6, pc}
 8003944:	200009ac 	.word	0x200009ac

08003948 <_malloc_r>:
 8003948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800394c:	1ccd      	adds	r5, r1, #3
 800394e:	f025 0503 	bic.w	r5, r5, #3
 8003952:	3508      	adds	r5, #8
 8003954:	2d0c      	cmp	r5, #12
 8003956:	bf38      	it	cc
 8003958:	250c      	movcc	r5, #12
 800395a:	2d00      	cmp	r5, #0
 800395c:	4607      	mov	r7, r0
 800395e:	db01      	blt.n	8003964 <_malloc_r+0x1c>
 8003960:	42a9      	cmp	r1, r5
 8003962:	d905      	bls.n	8003970 <_malloc_r+0x28>
 8003964:	230c      	movs	r3, #12
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	2600      	movs	r6, #0
 800396a:	4630      	mov	r0, r6
 800396c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003970:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a44 <_malloc_r+0xfc>
 8003974:	f000 f868 	bl	8003a48 <__malloc_lock>
 8003978:	f8d8 3000 	ldr.w	r3, [r8]
 800397c:	461c      	mov	r4, r3
 800397e:	bb5c      	cbnz	r4, 80039d8 <_malloc_r+0x90>
 8003980:	4629      	mov	r1, r5
 8003982:	4638      	mov	r0, r7
 8003984:	f7ff ffc0 	bl	8003908 <sbrk_aligned>
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	4604      	mov	r4, r0
 800398c:	d155      	bne.n	8003a3a <_malloc_r+0xf2>
 800398e:	f8d8 4000 	ldr.w	r4, [r8]
 8003992:	4626      	mov	r6, r4
 8003994:	2e00      	cmp	r6, #0
 8003996:	d145      	bne.n	8003a24 <_malloc_r+0xdc>
 8003998:	2c00      	cmp	r4, #0
 800399a:	d048      	beq.n	8003a2e <_malloc_r+0xe6>
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	4631      	mov	r1, r6
 80039a0:	4638      	mov	r0, r7
 80039a2:	eb04 0903 	add.w	r9, r4, r3
 80039a6:	f000 fb5d 	bl	8004064 <_sbrk_r>
 80039aa:	4581      	cmp	r9, r0
 80039ac:	d13f      	bne.n	8003a2e <_malloc_r+0xe6>
 80039ae:	6821      	ldr	r1, [r4, #0]
 80039b0:	1a6d      	subs	r5, r5, r1
 80039b2:	4629      	mov	r1, r5
 80039b4:	4638      	mov	r0, r7
 80039b6:	f7ff ffa7 	bl	8003908 <sbrk_aligned>
 80039ba:	3001      	adds	r0, #1
 80039bc:	d037      	beq.n	8003a2e <_malloc_r+0xe6>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	442b      	add	r3, r5
 80039c2:	6023      	str	r3, [r4, #0]
 80039c4:	f8d8 3000 	ldr.w	r3, [r8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d038      	beq.n	8003a3e <_malloc_r+0xf6>
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	42a2      	cmp	r2, r4
 80039d0:	d12b      	bne.n	8003a2a <_malloc_r+0xe2>
 80039d2:	2200      	movs	r2, #0
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	e00f      	b.n	80039f8 <_malloc_r+0xb0>
 80039d8:	6822      	ldr	r2, [r4, #0]
 80039da:	1b52      	subs	r2, r2, r5
 80039dc:	d41f      	bmi.n	8003a1e <_malloc_r+0xd6>
 80039de:	2a0b      	cmp	r2, #11
 80039e0:	d917      	bls.n	8003a12 <_malloc_r+0xca>
 80039e2:	1961      	adds	r1, r4, r5
 80039e4:	42a3      	cmp	r3, r4
 80039e6:	6025      	str	r5, [r4, #0]
 80039e8:	bf18      	it	ne
 80039ea:	6059      	strne	r1, [r3, #4]
 80039ec:	6863      	ldr	r3, [r4, #4]
 80039ee:	bf08      	it	eq
 80039f0:	f8c8 1000 	streq.w	r1, [r8]
 80039f4:	5162      	str	r2, [r4, r5]
 80039f6:	604b      	str	r3, [r1, #4]
 80039f8:	4638      	mov	r0, r7
 80039fa:	f104 060b 	add.w	r6, r4, #11
 80039fe:	f000 f829 	bl	8003a54 <__malloc_unlock>
 8003a02:	f026 0607 	bic.w	r6, r6, #7
 8003a06:	1d23      	adds	r3, r4, #4
 8003a08:	1af2      	subs	r2, r6, r3
 8003a0a:	d0ae      	beq.n	800396a <_malloc_r+0x22>
 8003a0c:	1b9b      	subs	r3, r3, r6
 8003a0e:	50a3      	str	r3, [r4, r2]
 8003a10:	e7ab      	b.n	800396a <_malloc_r+0x22>
 8003a12:	42a3      	cmp	r3, r4
 8003a14:	6862      	ldr	r2, [r4, #4]
 8003a16:	d1dd      	bne.n	80039d4 <_malloc_r+0x8c>
 8003a18:	f8c8 2000 	str.w	r2, [r8]
 8003a1c:	e7ec      	b.n	80039f8 <_malloc_r+0xb0>
 8003a1e:	4623      	mov	r3, r4
 8003a20:	6864      	ldr	r4, [r4, #4]
 8003a22:	e7ac      	b.n	800397e <_malloc_r+0x36>
 8003a24:	4634      	mov	r4, r6
 8003a26:	6876      	ldr	r6, [r6, #4]
 8003a28:	e7b4      	b.n	8003994 <_malloc_r+0x4c>
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	e7cc      	b.n	80039c8 <_malloc_r+0x80>
 8003a2e:	230c      	movs	r3, #12
 8003a30:	603b      	str	r3, [r7, #0]
 8003a32:	4638      	mov	r0, r7
 8003a34:	f000 f80e 	bl	8003a54 <__malloc_unlock>
 8003a38:	e797      	b.n	800396a <_malloc_r+0x22>
 8003a3a:	6025      	str	r5, [r4, #0]
 8003a3c:	e7dc      	b.n	80039f8 <_malloc_r+0xb0>
 8003a3e:	605b      	str	r3, [r3, #4]
 8003a40:	deff      	udf	#255	; 0xff
 8003a42:	bf00      	nop
 8003a44:	200009a8 	.word	0x200009a8

08003a48 <__malloc_lock>:
 8003a48:	4801      	ldr	r0, [pc, #4]	; (8003a50 <__malloc_lock+0x8>)
 8003a4a:	f7ff bf0f 	b.w	800386c <__retarget_lock_acquire_recursive>
 8003a4e:	bf00      	nop
 8003a50:	200009a4 	.word	0x200009a4

08003a54 <__malloc_unlock>:
 8003a54:	4801      	ldr	r0, [pc, #4]	; (8003a5c <__malloc_unlock+0x8>)
 8003a56:	f7ff bf0a 	b.w	800386e <__retarget_lock_release_recursive>
 8003a5a:	bf00      	nop
 8003a5c:	200009a4 	.word	0x200009a4

08003a60 <__ssputs_r>:
 8003a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a64:	688e      	ldr	r6, [r1, #8]
 8003a66:	461f      	mov	r7, r3
 8003a68:	42be      	cmp	r6, r7
 8003a6a:	680b      	ldr	r3, [r1, #0]
 8003a6c:	4682      	mov	sl, r0
 8003a6e:	460c      	mov	r4, r1
 8003a70:	4690      	mov	r8, r2
 8003a72:	d82c      	bhi.n	8003ace <__ssputs_r+0x6e>
 8003a74:	898a      	ldrh	r2, [r1, #12]
 8003a76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a7a:	d026      	beq.n	8003aca <__ssputs_r+0x6a>
 8003a7c:	6965      	ldr	r5, [r4, #20]
 8003a7e:	6909      	ldr	r1, [r1, #16]
 8003a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a84:	eba3 0901 	sub.w	r9, r3, r1
 8003a88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a8c:	1c7b      	adds	r3, r7, #1
 8003a8e:	444b      	add	r3, r9
 8003a90:	106d      	asrs	r5, r5, #1
 8003a92:	429d      	cmp	r5, r3
 8003a94:	bf38      	it	cc
 8003a96:	461d      	movcc	r5, r3
 8003a98:	0553      	lsls	r3, r2, #21
 8003a9a:	d527      	bpl.n	8003aec <__ssputs_r+0x8c>
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	f7ff ff53 	bl	8003948 <_malloc_r>
 8003aa2:	4606      	mov	r6, r0
 8003aa4:	b360      	cbz	r0, 8003b00 <__ssputs_r+0xa0>
 8003aa6:	6921      	ldr	r1, [r4, #16]
 8003aa8:	464a      	mov	r2, r9
 8003aaa:	f000 faeb 	bl	8004084 <memcpy>
 8003aae:	89a3      	ldrh	r3, [r4, #12]
 8003ab0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab8:	81a3      	strh	r3, [r4, #12]
 8003aba:	6126      	str	r6, [r4, #16]
 8003abc:	6165      	str	r5, [r4, #20]
 8003abe:	444e      	add	r6, r9
 8003ac0:	eba5 0509 	sub.w	r5, r5, r9
 8003ac4:	6026      	str	r6, [r4, #0]
 8003ac6:	60a5      	str	r5, [r4, #8]
 8003ac8:	463e      	mov	r6, r7
 8003aca:	42be      	cmp	r6, r7
 8003acc:	d900      	bls.n	8003ad0 <__ssputs_r+0x70>
 8003ace:	463e      	mov	r6, r7
 8003ad0:	6820      	ldr	r0, [r4, #0]
 8003ad2:	4632      	mov	r2, r6
 8003ad4:	4641      	mov	r1, r8
 8003ad6:	f000 faab 	bl	8004030 <memmove>
 8003ada:	68a3      	ldr	r3, [r4, #8]
 8003adc:	1b9b      	subs	r3, r3, r6
 8003ade:	60a3      	str	r3, [r4, #8]
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	4433      	add	r3, r6
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aec:	462a      	mov	r2, r5
 8003aee:	f000 fad7 	bl	80040a0 <_realloc_r>
 8003af2:	4606      	mov	r6, r0
 8003af4:	2800      	cmp	r0, #0
 8003af6:	d1e0      	bne.n	8003aba <__ssputs_r+0x5a>
 8003af8:	6921      	ldr	r1, [r4, #16]
 8003afa:	4650      	mov	r0, sl
 8003afc:	f7ff feb8 	bl	8003870 <_free_r>
 8003b00:	230c      	movs	r3, #12
 8003b02:	f8ca 3000 	str.w	r3, [sl]
 8003b06:	89a3      	ldrh	r3, [r4, #12]
 8003b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b0c:	81a3      	strh	r3, [r4, #12]
 8003b0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b12:	e7e9      	b.n	8003ae8 <__ssputs_r+0x88>

08003b14 <_svfiprintf_r>:
 8003b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b18:	4698      	mov	r8, r3
 8003b1a:	898b      	ldrh	r3, [r1, #12]
 8003b1c:	061b      	lsls	r3, r3, #24
 8003b1e:	b09d      	sub	sp, #116	; 0x74
 8003b20:	4607      	mov	r7, r0
 8003b22:	460d      	mov	r5, r1
 8003b24:	4614      	mov	r4, r2
 8003b26:	d50e      	bpl.n	8003b46 <_svfiprintf_r+0x32>
 8003b28:	690b      	ldr	r3, [r1, #16]
 8003b2a:	b963      	cbnz	r3, 8003b46 <_svfiprintf_r+0x32>
 8003b2c:	2140      	movs	r1, #64	; 0x40
 8003b2e:	f7ff ff0b 	bl	8003948 <_malloc_r>
 8003b32:	6028      	str	r0, [r5, #0]
 8003b34:	6128      	str	r0, [r5, #16]
 8003b36:	b920      	cbnz	r0, 8003b42 <_svfiprintf_r+0x2e>
 8003b38:	230c      	movs	r3, #12
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b40:	e0d0      	b.n	8003ce4 <_svfiprintf_r+0x1d0>
 8003b42:	2340      	movs	r3, #64	; 0x40
 8003b44:	616b      	str	r3, [r5, #20]
 8003b46:	2300      	movs	r3, #0
 8003b48:	9309      	str	r3, [sp, #36]	; 0x24
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b50:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b54:	2330      	movs	r3, #48	; 0x30
 8003b56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003cfc <_svfiprintf_r+0x1e8>
 8003b5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b5e:	f04f 0901 	mov.w	r9, #1
 8003b62:	4623      	mov	r3, r4
 8003b64:	469a      	mov	sl, r3
 8003b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b6a:	b10a      	cbz	r2, 8003b70 <_svfiprintf_r+0x5c>
 8003b6c:	2a25      	cmp	r2, #37	; 0x25
 8003b6e:	d1f9      	bne.n	8003b64 <_svfiprintf_r+0x50>
 8003b70:	ebba 0b04 	subs.w	fp, sl, r4
 8003b74:	d00b      	beq.n	8003b8e <_svfiprintf_r+0x7a>
 8003b76:	465b      	mov	r3, fp
 8003b78:	4622      	mov	r2, r4
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	f7ff ff6f 	bl	8003a60 <__ssputs_r>
 8003b82:	3001      	adds	r0, #1
 8003b84:	f000 80a9 	beq.w	8003cda <_svfiprintf_r+0x1c6>
 8003b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b8a:	445a      	add	r2, fp
 8003b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8003b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80a1 	beq.w	8003cda <_svfiprintf_r+0x1c6>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ba2:	f10a 0a01 	add.w	sl, sl, #1
 8003ba6:	9304      	str	r3, [sp, #16]
 8003ba8:	9307      	str	r3, [sp, #28]
 8003baa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bae:	931a      	str	r3, [sp, #104]	; 0x68
 8003bb0:	4654      	mov	r4, sl
 8003bb2:	2205      	movs	r2, #5
 8003bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bb8:	4850      	ldr	r0, [pc, #320]	; (8003cfc <_svfiprintf_r+0x1e8>)
 8003bba:	f7fc fb21 	bl	8000200 <memchr>
 8003bbe:	9a04      	ldr	r2, [sp, #16]
 8003bc0:	b9d8      	cbnz	r0, 8003bfa <_svfiprintf_r+0xe6>
 8003bc2:	06d0      	lsls	r0, r2, #27
 8003bc4:	bf44      	itt	mi
 8003bc6:	2320      	movmi	r3, #32
 8003bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bcc:	0711      	lsls	r1, r2, #28
 8003bce:	bf44      	itt	mi
 8003bd0:	232b      	movmi	r3, #43	; 0x2b
 8003bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bda:	2b2a      	cmp	r3, #42	; 0x2a
 8003bdc:	d015      	beq.n	8003c0a <_svfiprintf_r+0xf6>
 8003bde:	9a07      	ldr	r2, [sp, #28]
 8003be0:	4654      	mov	r4, sl
 8003be2:	2000      	movs	r0, #0
 8003be4:	f04f 0c0a 	mov.w	ip, #10
 8003be8:	4621      	mov	r1, r4
 8003bea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bee:	3b30      	subs	r3, #48	; 0x30
 8003bf0:	2b09      	cmp	r3, #9
 8003bf2:	d94d      	bls.n	8003c90 <_svfiprintf_r+0x17c>
 8003bf4:	b1b0      	cbz	r0, 8003c24 <_svfiprintf_r+0x110>
 8003bf6:	9207      	str	r2, [sp, #28]
 8003bf8:	e014      	b.n	8003c24 <_svfiprintf_r+0x110>
 8003bfa:	eba0 0308 	sub.w	r3, r0, r8
 8003bfe:	fa09 f303 	lsl.w	r3, r9, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	9304      	str	r3, [sp, #16]
 8003c06:	46a2      	mov	sl, r4
 8003c08:	e7d2      	b.n	8003bb0 <_svfiprintf_r+0x9c>
 8003c0a:	9b03      	ldr	r3, [sp, #12]
 8003c0c:	1d19      	adds	r1, r3, #4
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	9103      	str	r1, [sp, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bfbb      	ittet	lt
 8003c16:	425b      	neglt	r3, r3
 8003c18:	f042 0202 	orrlt.w	r2, r2, #2
 8003c1c:	9307      	strge	r3, [sp, #28]
 8003c1e:	9307      	strlt	r3, [sp, #28]
 8003c20:	bfb8      	it	lt
 8003c22:	9204      	strlt	r2, [sp, #16]
 8003c24:	7823      	ldrb	r3, [r4, #0]
 8003c26:	2b2e      	cmp	r3, #46	; 0x2e
 8003c28:	d10c      	bne.n	8003c44 <_svfiprintf_r+0x130>
 8003c2a:	7863      	ldrb	r3, [r4, #1]
 8003c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c2e:	d134      	bne.n	8003c9a <_svfiprintf_r+0x186>
 8003c30:	9b03      	ldr	r3, [sp, #12]
 8003c32:	1d1a      	adds	r2, r3, #4
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	9203      	str	r2, [sp, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bfb8      	it	lt
 8003c3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003c40:	3402      	adds	r4, #2
 8003c42:	9305      	str	r3, [sp, #20]
 8003c44:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003d0c <_svfiprintf_r+0x1f8>
 8003c48:	7821      	ldrb	r1, [r4, #0]
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	4650      	mov	r0, sl
 8003c4e:	f7fc fad7 	bl	8000200 <memchr>
 8003c52:	b138      	cbz	r0, 8003c64 <_svfiprintf_r+0x150>
 8003c54:	9b04      	ldr	r3, [sp, #16]
 8003c56:	eba0 000a 	sub.w	r0, r0, sl
 8003c5a:	2240      	movs	r2, #64	; 0x40
 8003c5c:	4082      	lsls	r2, r0
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	3401      	adds	r4, #1
 8003c62:	9304      	str	r3, [sp, #16]
 8003c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c68:	4825      	ldr	r0, [pc, #148]	; (8003d00 <_svfiprintf_r+0x1ec>)
 8003c6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c6e:	2206      	movs	r2, #6
 8003c70:	f7fc fac6 	bl	8000200 <memchr>
 8003c74:	2800      	cmp	r0, #0
 8003c76:	d038      	beq.n	8003cea <_svfiprintf_r+0x1d6>
 8003c78:	4b22      	ldr	r3, [pc, #136]	; (8003d04 <_svfiprintf_r+0x1f0>)
 8003c7a:	bb1b      	cbnz	r3, 8003cc4 <_svfiprintf_r+0x1b0>
 8003c7c:	9b03      	ldr	r3, [sp, #12]
 8003c7e:	3307      	adds	r3, #7
 8003c80:	f023 0307 	bic.w	r3, r3, #7
 8003c84:	3308      	adds	r3, #8
 8003c86:	9303      	str	r3, [sp, #12]
 8003c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c8a:	4433      	add	r3, r6
 8003c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c8e:	e768      	b.n	8003b62 <_svfiprintf_r+0x4e>
 8003c90:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c94:	460c      	mov	r4, r1
 8003c96:	2001      	movs	r0, #1
 8003c98:	e7a6      	b.n	8003be8 <_svfiprintf_r+0xd4>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	3401      	adds	r4, #1
 8003c9e:	9305      	str	r3, [sp, #20]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f04f 0c0a 	mov.w	ip, #10
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cac:	3a30      	subs	r2, #48	; 0x30
 8003cae:	2a09      	cmp	r2, #9
 8003cb0:	d903      	bls.n	8003cba <_svfiprintf_r+0x1a6>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0c6      	beq.n	8003c44 <_svfiprintf_r+0x130>
 8003cb6:	9105      	str	r1, [sp, #20]
 8003cb8:	e7c4      	b.n	8003c44 <_svfiprintf_r+0x130>
 8003cba:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e7f0      	b.n	8003ca6 <_svfiprintf_r+0x192>
 8003cc4:	ab03      	add	r3, sp, #12
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	462a      	mov	r2, r5
 8003cca:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <_svfiprintf_r+0x1f4>)
 8003ccc:	a904      	add	r1, sp, #16
 8003cce:	4638      	mov	r0, r7
 8003cd0:	f3af 8000 	nop.w
 8003cd4:	1c42      	adds	r2, r0, #1
 8003cd6:	4606      	mov	r6, r0
 8003cd8:	d1d6      	bne.n	8003c88 <_svfiprintf_r+0x174>
 8003cda:	89ab      	ldrh	r3, [r5, #12]
 8003cdc:	065b      	lsls	r3, r3, #25
 8003cde:	f53f af2d 	bmi.w	8003b3c <_svfiprintf_r+0x28>
 8003ce2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ce4:	b01d      	add	sp, #116	; 0x74
 8003ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cea:	ab03      	add	r3, sp, #12
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	462a      	mov	r2, r5
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <_svfiprintf_r+0x1f4>)
 8003cf2:	a904      	add	r1, sp, #16
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	f000 f879 	bl	8003dec <_printf_i>
 8003cfa:	e7eb      	b.n	8003cd4 <_svfiprintf_r+0x1c0>
 8003cfc:	08004214 	.word	0x08004214
 8003d00:	0800421e 	.word	0x0800421e
 8003d04:	00000000 	.word	0x00000000
 8003d08:	08003a61 	.word	0x08003a61
 8003d0c:	0800421a 	.word	0x0800421a

08003d10 <_printf_common>:
 8003d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d14:	4616      	mov	r6, r2
 8003d16:	4699      	mov	r9, r3
 8003d18:	688a      	ldr	r2, [r1, #8]
 8003d1a:	690b      	ldr	r3, [r1, #16]
 8003d1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d20:	4293      	cmp	r3, r2
 8003d22:	bfb8      	it	lt
 8003d24:	4613      	movlt	r3, r2
 8003d26:	6033      	str	r3, [r6, #0]
 8003d28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d2c:	4607      	mov	r7, r0
 8003d2e:	460c      	mov	r4, r1
 8003d30:	b10a      	cbz	r2, 8003d36 <_printf_common+0x26>
 8003d32:	3301      	adds	r3, #1
 8003d34:	6033      	str	r3, [r6, #0]
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	0699      	lsls	r1, r3, #26
 8003d3a:	bf42      	ittt	mi
 8003d3c:	6833      	ldrmi	r3, [r6, #0]
 8003d3e:	3302      	addmi	r3, #2
 8003d40:	6033      	strmi	r3, [r6, #0]
 8003d42:	6825      	ldr	r5, [r4, #0]
 8003d44:	f015 0506 	ands.w	r5, r5, #6
 8003d48:	d106      	bne.n	8003d58 <_printf_common+0x48>
 8003d4a:	f104 0a19 	add.w	sl, r4, #25
 8003d4e:	68e3      	ldr	r3, [r4, #12]
 8003d50:	6832      	ldr	r2, [r6, #0]
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	42ab      	cmp	r3, r5
 8003d56:	dc26      	bgt.n	8003da6 <_printf_common+0x96>
 8003d58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d5c:	1e13      	subs	r3, r2, #0
 8003d5e:	6822      	ldr	r2, [r4, #0]
 8003d60:	bf18      	it	ne
 8003d62:	2301      	movne	r3, #1
 8003d64:	0692      	lsls	r2, r2, #26
 8003d66:	d42b      	bmi.n	8003dc0 <_printf_common+0xb0>
 8003d68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d6c:	4649      	mov	r1, r9
 8003d6e:	4638      	mov	r0, r7
 8003d70:	47c0      	blx	r8
 8003d72:	3001      	adds	r0, #1
 8003d74:	d01e      	beq.n	8003db4 <_printf_common+0xa4>
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	6922      	ldr	r2, [r4, #16]
 8003d7a:	f003 0306 	and.w	r3, r3, #6
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	bf02      	ittt	eq
 8003d82:	68e5      	ldreq	r5, [r4, #12]
 8003d84:	6833      	ldreq	r3, [r6, #0]
 8003d86:	1aed      	subeq	r5, r5, r3
 8003d88:	68a3      	ldr	r3, [r4, #8]
 8003d8a:	bf0c      	ite	eq
 8003d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d90:	2500      	movne	r5, #0
 8003d92:	4293      	cmp	r3, r2
 8003d94:	bfc4      	itt	gt
 8003d96:	1a9b      	subgt	r3, r3, r2
 8003d98:	18ed      	addgt	r5, r5, r3
 8003d9a:	2600      	movs	r6, #0
 8003d9c:	341a      	adds	r4, #26
 8003d9e:	42b5      	cmp	r5, r6
 8003da0:	d11a      	bne.n	8003dd8 <_printf_common+0xc8>
 8003da2:	2000      	movs	r0, #0
 8003da4:	e008      	b.n	8003db8 <_printf_common+0xa8>
 8003da6:	2301      	movs	r3, #1
 8003da8:	4652      	mov	r2, sl
 8003daa:	4649      	mov	r1, r9
 8003dac:	4638      	mov	r0, r7
 8003dae:	47c0      	blx	r8
 8003db0:	3001      	adds	r0, #1
 8003db2:	d103      	bne.n	8003dbc <_printf_common+0xac>
 8003db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dbc:	3501      	adds	r5, #1
 8003dbe:	e7c6      	b.n	8003d4e <_printf_common+0x3e>
 8003dc0:	18e1      	adds	r1, r4, r3
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	2030      	movs	r0, #48	; 0x30
 8003dc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dca:	4422      	add	r2, r4
 8003dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dd4:	3302      	adds	r3, #2
 8003dd6:	e7c7      	b.n	8003d68 <_printf_common+0x58>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	4622      	mov	r2, r4
 8003ddc:	4649      	mov	r1, r9
 8003dde:	4638      	mov	r0, r7
 8003de0:	47c0      	blx	r8
 8003de2:	3001      	adds	r0, #1
 8003de4:	d0e6      	beq.n	8003db4 <_printf_common+0xa4>
 8003de6:	3601      	adds	r6, #1
 8003de8:	e7d9      	b.n	8003d9e <_printf_common+0x8e>
	...

08003dec <_printf_i>:
 8003dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003df0:	7e0f      	ldrb	r7, [r1, #24]
 8003df2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003df4:	2f78      	cmp	r7, #120	; 0x78
 8003df6:	4691      	mov	r9, r2
 8003df8:	4680      	mov	r8, r0
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	469a      	mov	sl, r3
 8003dfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e02:	d807      	bhi.n	8003e14 <_printf_i+0x28>
 8003e04:	2f62      	cmp	r7, #98	; 0x62
 8003e06:	d80a      	bhi.n	8003e1e <_printf_i+0x32>
 8003e08:	2f00      	cmp	r7, #0
 8003e0a:	f000 80d4 	beq.w	8003fb6 <_printf_i+0x1ca>
 8003e0e:	2f58      	cmp	r7, #88	; 0x58
 8003e10:	f000 80c0 	beq.w	8003f94 <_printf_i+0x1a8>
 8003e14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e1c:	e03a      	b.n	8003e94 <_printf_i+0xa8>
 8003e1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e22:	2b15      	cmp	r3, #21
 8003e24:	d8f6      	bhi.n	8003e14 <_printf_i+0x28>
 8003e26:	a101      	add	r1, pc, #4	; (adr r1, 8003e2c <_printf_i+0x40>)
 8003e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e2c:	08003e85 	.word	0x08003e85
 8003e30:	08003e99 	.word	0x08003e99
 8003e34:	08003e15 	.word	0x08003e15
 8003e38:	08003e15 	.word	0x08003e15
 8003e3c:	08003e15 	.word	0x08003e15
 8003e40:	08003e15 	.word	0x08003e15
 8003e44:	08003e99 	.word	0x08003e99
 8003e48:	08003e15 	.word	0x08003e15
 8003e4c:	08003e15 	.word	0x08003e15
 8003e50:	08003e15 	.word	0x08003e15
 8003e54:	08003e15 	.word	0x08003e15
 8003e58:	08003f9d 	.word	0x08003f9d
 8003e5c:	08003ec5 	.word	0x08003ec5
 8003e60:	08003f57 	.word	0x08003f57
 8003e64:	08003e15 	.word	0x08003e15
 8003e68:	08003e15 	.word	0x08003e15
 8003e6c:	08003fbf 	.word	0x08003fbf
 8003e70:	08003e15 	.word	0x08003e15
 8003e74:	08003ec5 	.word	0x08003ec5
 8003e78:	08003e15 	.word	0x08003e15
 8003e7c:	08003e15 	.word	0x08003e15
 8003e80:	08003f5f 	.word	0x08003f5f
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	1d1a      	adds	r2, r3, #4
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	602a      	str	r2, [r5, #0]
 8003e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e94:	2301      	movs	r3, #1
 8003e96:	e09f      	b.n	8003fd8 <_printf_i+0x1ec>
 8003e98:	6820      	ldr	r0, [r4, #0]
 8003e9a:	682b      	ldr	r3, [r5, #0]
 8003e9c:	0607      	lsls	r7, r0, #24
 8003e9e:	f103 0104 	add.w	r1, r3, #4
 8003ea2:	6029      	str	r1, [r5, #0]
 8003ea4:	d501      	bpl.n	8003eaa <_printf_i+0xbe>
 8003ea6:	681e      	ldr	r6, [r3, #0]
 8003ea8:	e003      	b.n	8003eb2 <_printf_i+0xc6>
 8003eaa:	0646      	lsls	r6, r0, #25
 8003eac:	d5fb      	bpl.n	8003ea6 <_printf_i+0xba>
 8003eae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003eb2:	2e00      	cmp	r6, #0
 8003eb4:	da03      	bge.n	8003ebe <_printf_i+0xd2>
 8003eb6:	232d      	movs	r3, #45	; 0x2d
 8003eb8:	4276      	negs	r6, r6
 8003eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ebe:	485a      	ldr	r0, [pc, #360]	; (8004028 <_printf_i+0x23c>)
 8003ec0:	230a      	movs	r3, #10
 8003ec2:	e012      	b.n	8003eea <_printf_i+0xfe>
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	6820      	ldr	r0, [r4, #0]
 8003ec8:	1d19      	adds	r1, r3, #4
 8003eca:	6029      	str	r1, [r5, #0]
 8003ecc:	0605      	lsls	r5, r0, #24
 8003ece:	d501      	bpl.n	8003ed4 <_printf_i+0xe8>
 8003ed0:	681e      	ldr	r6, [r3, #0]
 8003ed2:	e002      	b.n	8003eda <_printf_i+0xee>
 8003ed4:	0641      	lsls	r1, r0, #25
 8003ed6:	d5fb      	bpl.n	8003ed0 <_printf_i+0xe4>
 8003ed8:	881e      	ldrh	r6, [r3, #0]
 8003eda:	4853      	ldr	r0, [pc, #332]	; (8004028 <_printf_i+0x23c>)
 8003edc:	2f6f      	cmp	r7, #111	; 0x6f
 8003ede:	bf0c      	ite	eq
 8003ee0:	2308      	moveq	r3, #8
 8003ee2:	230a      	movne	r3, #10
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003eea:	6865      	ldr	r5, [r4, #4]
 8003eec:	60a5      	str	r5, [r4, #8]
 8003eee:	2d00      	cmp	r5, #0
 8003ef0:	bfa2      	ittt	ge
 8003ef2:	6821      	ldrge	r1, [r4, #0]
 8003ef4:	f021 0104 	bicge.w	r1, r1, #4
 8003ef8:	6021      	strge	r1, [r4, #0]
 8003efa:	b90e      	cbnz	r6, 8003f00 <_printf_i+0x114>
 8003efc:	2d00      	cmp	r5, #0
 8003efe:	d04b      	beq.n	8003f98 <_printf_i+0x1ac>
 8003f00:	4615      	mov	r5, r2
 8003f02:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f06:	fb03 6711 	mls	r7, r3, r1, r6
 8003f0a:	5dc7      	ldrb	r7, [r0, r7]
 8003f0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f10:	4637      	mov	r7, r6
 8003f12:	42bb      	cmp	r3, r7
 8003f14:	460e      	mov	r6, r1
 8003f16:	d9f4      	bls.n	8003f02 <_printf_i+0x116>
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d10b      	bne.n	8003f34 <_printf_i+0x148>
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	07de      	lsls	r6, r3, #31
 8003f20:	d508      	bpl.n	8003f34 <_printf_i+0x148>
 8003f22:	6923      	ldr	r3, [r4, #16]
 8003f24:	6861      	ldr	r1, [r4, #4]
 8003f26:	4299      	cmp	r1, r3
 8003f28:	bfde      	ittt	le
 8003f2a:	2330      	movle	r3, #48	; 0x30
 8003f2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f30:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003f34:	1b52      	subs	r2, r2, r5
 8003f36:	6122      	str	r2, [r4, #16]
 8003f38:	f8cd a000 	str.w	sl, [sp]
 8003f3c:	464b      	mov	r3, r9
 8003f3e:	aa03      	add	r2, sp, #12
 8003f40:	4621      	mov	r1, r4
 8003f42:	4640      	mov	r0, r8
 8003f44:	f7ff fee4 	bl	8003d10 <_printf_common>
 8003f48:	3001      	adds	r0, #1
 8003f4a:	d14a      	bne.n	8003fe2 <_printf_i+0x1f6>
 8003f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f50:	b004      	add	sp, #16
 8003f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	f043 0320 	orr.w	r3, r3, #32
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	4833      	ldr	r0, [pc, #204]	; (800402c <_printf_i+0x240>)
 8003f60:	2778      	movs	r7, #120	; 0x78
 8003f62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	6829      	ldr	r1, [r5, #0]
 8003f6a:	061f      	lsls	r7, r3, #24
 8003f6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f70:	d402      	bmi.n	8003f78 <_printf_i+0x18c>
 8003f72:	065f      	lsls	r7, r3, #25
 8003f74:	bf48      	it	mi
 8003f76:	b2b6      	uxthmi	r6, r6
 8003f78:	07df      	lsls	r7, r3, #31
 8003f7a:	bf48      	it	mi
 8003f7c:	f043 0320 	orrmi.w	r3, r3, #32
 8003f80:	6029      	str	r1, [r5, #0]
 8003f82:	bf48      	it	mi
 8003f84:	6023      	strmi	r3, [r4, #0]
 8003f86:	b91e      	cbnz	r6, 8003f90 <_printf_i+0x1a4>
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	f023 0320 	bic.w	r3, r3, #32
 8003f8e:	6023      	str	r3, [r4, #0]
 8003f90:	2310      	movs	r3, #16
 8003f92:	e7a7      	b.n	8003ee4 <_printf_i+0xf8>
 8003f94:	4824      	ldr	r0, [pc, #144]	; (8004028 <_printf_i+0x23c>)
 8003f96:	e7e4      	b.n	8003f62 <_printf_i+0x176>
 8003f98:	4615      	mov	r5, r2
 8003f9a:	e7bd      	b.n	8003f18 <_printf_i+0x12c>
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	6826      	ldr	r6, [r4, #0]
 8003fa0:	6961      	ldr	r1, [r4, #20]
 8003fa2:	1d18      	adds	r0, r3, #4
 8003fa4:	6028      	str	r0, [r5, #0]
 8003fa6:	0635      	lsls	r5, r6, #24
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	d501      	bpl.n	8003fb0 <_printf_i+0x1c4>
 8003fac:	6019      	str	r1, [r3, #0]
 8003fae:	e002      	b.n	8003fb6 <_printf_i+0x1ca>
 8003fb0:	0670      	lsls	r0, r6, #25
 8003fb2:	d5fb      	bpl.n	8003fac <_printf_i+0x1c0>
 8003fb4:	8019      	strh	r1, [r3, #0]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	6123      	str	r3, [r4, #16]
 8003fba:	4615      	mov	r5, r2
 8003fbc:	e7bc      	b.n	8003f38 <_printf_i+0x14c>
 8003fbe:	682b      	ldr	r3, [r5, #0]
 8003fc0:	1d1a      	adds	r2, r3, #4
 8003fc2:	602a      	str	r2, [r5, #0]
 8003fc4:	681d      	ldr	r5, [r3, #0]
 8003fc6:	6862      	ldr	r2, [r4, #4]
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4628      	mov	r0, r5
 8003fcc:	f7fc f918 	bl	8000200 <memchr>
 8003fd0:	b108      	cbz	r0, 8003fd6 <_printf_i+0x1ea>
 8003fd2:	1b40      	subs	r0, r0, r5
 8003fd4:	6060      	str	r0, [r4, #4]
 8003fd6:	6863      	ldr	r3, [r4, #4]
 8003fd8:	6123      	str	r3, [r4, #16]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fe0:	e7aa      	b.n	8003f38 <_printf_i+0x14c>
 8003fe2:	6923      	ldr	r3, [r4, #16]
 8003fe4:	462a      	mov	r2, r5
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	4640      	mov	r0, r8
 8003fea:	47d0      	blx	sl
 8003fec:	3001      	adds	r0, #1
 8003fee:	d0ad      	beq.n	8003f4c <_printf_i+0x160>
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	079b      	lsls	r3, r3, #30
 8003ff4:	d413      	bmi.n	800401e <_printf_i+0x232>
 8003ff6:	68e0      	ldr	r0, [r4, #12]
 8003ff8:	9b03      	ldr	r3, [sp, #12]
 8003ffa:	4298      	cmp	r0, r3
 8003ffc:	bfb8      	it	lt
 8003ffe:	4618      	movlt	r0, r3
 8004000:	e7a6      	b.n	8003f50 <_printf_i+0x164>
 8004002:	2301      	movs	r3, #1
 8004004:	4632      	mov	r2, r6
 8004006:	4649      	mov	r1, r9
 8004008:	4640      	mov	r0, r8
 800400a:	47d0      	blx	sl
 800400c:	3001      	adds	r0, #1
 800400e:	d09d      	beq.n	8003f4c <_printf_i+0x160>
 8004010:	3501      	adds	r5, #1
 8004012:	68e3      	ldr	r3, [r4, #12]
 8004014:	9903      	ldr	r1, [sp, #12]
 8004016:	1a5b      	subs	r3, r3, r1
 8004018:	42ab      	cmp	r3, r5
 800401a:	dcf2      	bgt.n	8004002 <_printf_i+0x216>
 800401c:	e7eb      	b.n	8003ff6 <_printf_i+0x20a>
 800401e:	2500      	movs	r5, #0
 8004020:	f104 0619 	add.w	r6, r4, #25
 8004024:	e7f5      	b.n	8004012 <_printf_i+0x226>
 8004026:	bf00      	nop
 8004028:	08004225 	.word	0x08004225
 800402c:	08004236 	.word	0x08004236

08004030 <memmove>:
 8004030:	4288      	cmp	r0, r1
 8004032:	b510      	push	{r4, lr}
 8004034:	eb01 0402 	add.w	r4, r1, r2
 8004038:	d902      	bls.n	8004040 <memmove+0x10>
 800403a:	4284      	cmp	r4, r0
 800403c:	4623      	mov	r3, r4
 800403e:	d807      	bhi.n	8004050 <memmove+0x20>
 8004040:	1e43      	subs	r3, r0, #1
 8004042:	42a1      	cmp	r1, r4
 8004044:	d008      	beq.n	8004058 <memmove+0x28>
 8004046:	f811 2b01 	ldrb.w	r2, [r1], #1
 800404a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800404e:	e7f8      	b.n	8004042 <memmove+0x12>
 8004050:	4402      	add	r2, r0
 8004052:	4601      	mov	r1, r0
 8004054:	428a      	cmp	r2, r1
 8004056:	d100      	bne.n	800405a <memmove+0x2a>
 8004058:	bd10      	pop	{r4, pc}
 800405a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800405e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004062:	e7f7      	b.n	8004054 <memmove+0x24>

08004064 <_sbrk_r>:
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4d06      	ldr	r5, [pc, #24]	; (8004080 <_sbrk_r+0x1c>)
 8004068:	2300      	movs	r3, #0
 800406a:	4604      	mov	r4, r0
 800406c:	4608      	mov	r0, r1
 800406e:	602b      	str	r3, [r5, #0]
 8004070:	f7fc fe5a 	bl	8000d28 <_sbrk>
 8004074:	1c43      	adds	r3, r0, #1
 8004076:	d102      	bne.n	800407e <_sbrk_r+0x1a>
 8004078:	682b      	ldr	r3, [r5, #0]
 800407a:	b103      	cbz	r3, 800407e <_sbrk_r+0x1a>
 800407c:	6023      	str	r3, [r4, #0]
 800407e:	bd38      	pop	{r3, r4, r5, pc}
 8004080:	200009a0 	.word	0x200009a0

08004084 <memcpy>:
 8004084:	440a      	add	r2, r1
 8004086:	4291      	cmp	r1, r2
 8004088:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800408c:	d100      	bne.n	8004090 <memcpy+0xc>
 800408e:	4770      	bx	lr
 8004090:	b510      	push	{r4, lr}
 8004092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004096:	f803 4f01 	strb.w	r4, [r3, #1]!
 800409a:	4291      	cmp	r1, r2
 800409c:	d1f9      	bne.n	8004092 <memcpy+0xe>
 800409e:	bd10      	pop	{r4, pc}

080040a0 <_realloc_r>:
 80040a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a4:	4680      	mov	r8, r0
 80040a6:	4614      	mov	r4, r2
 80040a8:	460e      	mov	r6, r1
 80040aa:	b921      	cbnz	r1, 80040b6 <_realloc_r+0x16>
 80040ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040b0:	4611      	mov	r1, r2
 80040b2:	f7ff bc49 	b.w	8003948 <_malloc_r>
 80040b6:	b92a      	cbnz	r2, 80040c4 <_realloc_r+0x24>
 80040b8:	f7ff fbda 	bl	8003870 <_free_r>
 80040bc:	4625      	mov	r5, r4
 80040be:	4628      	mov	r0, r5
 80040c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040c4:	f000 f81b 	bl	80040fe <_malloc_usable_size_r>
 80040c8:	4284      	cmp	r4, r0
 80040ca:	4607      	mov	r7, r0
 80040cc:	d802      	bhi.n	80040d4 <_realloc_r+0x34>
 80040ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040d2:	d812      	bhi.n	80040fa <_realloc_r+0x5a>
 80040d4:	4621      	mov	r1, r4
 80040d6:	4640      	mov	r0, r8
 80040d8:	f7ff fc36 	bl	8003948 <_malloc_r>
 80040dc:	4605      	mov	r5, r0
 80040de:	2800      	cmp	r0, #0
 80040e0:	d0ed      	beq.n	80040be <_realloc_r+0x1e>
 80040e2:	42bc      	cmp	r4, r7
 80040e4:	4622      	mov	r2, r4
 80040e6:	4631      	mov	r1, r6
 80040e8:	bf28      	it	cs
 80040ea:	463a      	movcs	r2, r7
 80040ec:	f7ff ffca 	bl	8004084 <memcpy>
 80040f0:	4631      	mov	r1, r6
 80040f2:	4640      	mov	r0, r8
 80040f4:	f7ff fbbc 	bl	8003870 <_free_r>
 80040f8:	e7e1      	b.n	80040be <_realloc_r+0x1e>
 80040fa:	4635      	mov	r5, r6
 80040fc:	e7df      	b.n	80040be <_realloc_r+0x1e>

080040fe <_malloc_usable_size_r>:
 80040fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004102:	1f18      	subs	r0, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	bfbc      	itt	lt
 8004108:	580b      	ldrlt	r3, [r1, r0]
 800410a:	18c0      	addlt	r0, r0, r3
 800410c:	4770      	bx	lr
	...

08004110 <_init>:
 8004110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004112:	bf00      	nop
 8004114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004116:	bc08      	pop	{r3}
 8004118:	469e      	mov	lr, r3
 800411a:	4770      	bx	lr

0800411c <_fini>:
 800411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411e:	bf00      	nop
 8004120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004122:	bc08      	pop	{r3}
 8004124:	469e      	mov	lr, r3
 8004126:	4770      	bx	lr
