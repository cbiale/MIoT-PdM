#include "API_dht22.h"

/* ------------------------------- tipos de datos ------------------------------- */

typedef enum {
	ESPERA,
	LECTURA
} estado_dht22_t;

/* --------------------------------- Constantes --------------------------------- */

#define DHT_PUERTO GPIOG
#define DHT_PIN    0x69
#define DHT_CANTIDAD_LECTURAS 5
#define PIN_BAJO   0
#define PIN_ALTO   1
/* ----------------------------- Variables privadas ----------------------------- */

static estado_dht22_t estado = LECTURA;
static delay_t espera;

// -1 significa sin datos
static float humedad = -1, temperatura = -1;
static uint8_t nueva_lectura = -1;

/* ---------------------- Prototipos de funciones privadas ---------------------- */

static void dht_activar();
static uint8_t dht_obtener_respuesta ();
static uint8_t dht_leer(void);
static void dht_realizar_lectura ();

/* ---------------------------------- Funciones --------------------------------- */

// inicia el sensor dht22 (no realiza nada, es a efectos de homogeneizar)
void dht_iniciar() {

}


// actualiza el estado del dht22
void dht_actualizar() {
	switch (estado) {
	case LECTURA:
		dht_realizar_lectura();
		estado = ESPERA;
		delayInit(&espera, 3000);
		if (nueva_lectura < DHT_CANTIDAD_LECTURAS) {
			nueva_lectura++;
		} else {
			nueva_lectura = 0;
		}
		break;
	case ESPERA:
		if (delayRead(&espera)) {
			estado = LECTURA;
		}
		break;
	default:
		estado = ESPERA;
	}
}

// obtiene de forma externa el valor de temperatura
float dht_obtener_temperatura () {
//	return 28.7;
	return temperatura;
}

// obtiene de forma externa el valor de humedad
float dht_obtener_humedad() {
//	return 80.00;
	return humedad;
}

// retorna si ha realizado una nueva lectura
uint8_t dht_nueva_lectura() {
	return nueva_lectura;
}

/* ------------------------------ Funciones privadas ---------------------------- */

// parte de inicio de la lectura de datos del sensor dht22
static void dht_activar() {
	DWT_Delay_Init();
	Set_Pin_Output(DHT_PUERTO, DHT_PIN);
	escribir_pin(DHT_PUERTO, DHT_PIN, PIN_BAJO);
	esperar_ms(1800);
	escribir_pin(DHT_PUERTO, DHT_PIN, PIN_ALTO);
	esperar_ms(40);
	Set_Pin_Input(DHT_PUERTO, DHT_PIN);
}

// verifica si se encuentra el sensor
static uint8_t dht_obtener_respuesta () {
	uint8_t respuesta = 0;
	esperar_ms(40);
	if (!(leer_pin(DHT_PUERTO, DHT_PIN))) {
		esperar_ms(80);
		if ((leer_pin(DHT_PUERTO, DHT_PIN))) {
			respuesta = 1;
		} else {
			respuesta = -1;
		}
	}
	while ((leer_pin(DHT_PUERTO, DHT_PIN))) {} // espera que el pin sea bajo
	return respuesta;
}

// lee un  byte de datos
static uint8_t dht_leer() {
	uint8_t i, j;
	for (j = 0; j < 8; j++) {
		while (!(leer_pin(DHT_PUERTO, DHT_PIN))) {
			// espera que el pin sea alto
		}
		esperar_ms(40);
		// si el pin es bajo
		if (!(leer_pin(DHT_PUERTO, DHT_PIN))) {
			i &= ~(1 << (7 - j));   // escribe un 0
		} else {
			i |= (1 << (7 - j));  // escribe un 1
		}
		while ((leer_pin(DHT_PUERTO, DHT_PIN))) {
			// espera que el pin sea bajo
		}
	}
	return i;
}

// obtiene datos de temperatura y humedad
static void dht_realizar_lectura () {
	uint8_t verificar, temperatura_byte1, temperatura_byte2, humedad_byte1, humedad_byte2;
	uint16_t suma_control;

	dht_activar();
	verificar = dht_obtener_respuesta();
	humedad_byte1 = dht_leer();
	humedad_byte2 = dht_leer();
	temperatura_byte1 = dht_leer();
	temperatura_byte2 = dht_leer();
	suma_control = dht_leer();

	char datos[100];
	sprintf(datos, "%d %d %d %d %d - ", humedad_byte1, humedad_byte2, temperatura_byte1, temperatura_byte2, suma_control);
	uart_enviar_string((uint8_t *) datos);

	if (suma_control
			== (humedad_byte1 + humedad_byte2 + temperatura_byte1
					+ temperatura_byte2)) {
		humedad = ((humedad_byte1 << 8) | humedad_byte2);
		temperatura = ((temperatura_byte1 << 8) | temperatura_byte2);
	}
}
