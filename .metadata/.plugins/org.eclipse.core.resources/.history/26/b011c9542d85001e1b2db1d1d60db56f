/*
 * API_uart.c
 *
 *  Created on: Nov 16, 2023
 *      Author: cbiale
 */


#include "API_uart.h"

/*
 * Variable que mantiene el manejador de la UART
 */
static UART_HandleTypeDef UartHandle;

bool_t uartInit() {
	// retorna el estado del inicio de la UART
	bool_t estado = false;
	UartHandle.Instance = USART2;
	UartHandle.Init.BaudRate = 115200;
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits = UART_STOPBITS_1;
	UartHandle.Init.Parity = UART_PARITY_NONE;
	UartHandle.Init.Mode = UART_MODE_TX_RX;
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;

	if (HAL_UART_Init(&huartApi) == HAL_OK) {
	    char cadena[100];
	    snprintf(buf, sizeof(cadena), "Valores de configuraci√≥n de USART:\r\n");
	    uartSendString((uint8_t *) cadena);
	    snprintf(buf, sizeof(cadena), "  Velocidad en baudios: %d\r\n", (int)huartApi.Init.BaudRate);
    }
    return estado;
}

void uartSendString(uint8_t * pstring) {
	// control defensivo
	if (pstring == NULL) {
		return;
	}
	// transmite
	HAL_UART_Transmit(&UartHandle, pstring, strlen((char *)pstring), HAL_MAX_DELAY);
}

void uartSendStringSize(uint8_t * pstring, uint16_t size) {
	// control defensivo
	if (pstring == NULL) {
		return;
	}
	// obtengo largo de pstring
	uint16_t strSize = strlen((char *) pstring);
	// si el largo es menor al argumento size
	if (strSize < size) {
		// el argumento size toma el valor de strSize
		// esto es para que no imprima "basura"
		size = strSize;
	}
	// no es necesario hacer un control si strSize > size
	// debido a que como size en HAL_UART_Transmit() esa es la
	// cantidad a transmitir y el sobrante se descarta

	// transmite
    HAL_UART_Transmit(&UartHandle, pstring, size, HAL_MAX_DELAY);
}

void uartReceiveStringSize(uint8_t * pstring, uint16_t size) {
	// recepciona datos
	HAL_UART_Receive(&UartHandle, pstring, size, HAL_MAX_DELAY);
}
