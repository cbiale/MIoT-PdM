/*
 * M_interfaz.c
 *
 *  Created on: Dec 6, 2023
 *      Author: cbiale
 */

#include <API_interfaz.h>
#include "API_lcd.h"
#include <stdbool.h>
#include <stdio.h>
#include "API_debounce.h"
#include "API_dht22.h"

/* ------------------------------- tipos de datos ------------------------------- */

typedef enum {
	MOSTRANDO_DATOS,
	DESCANSO
} estado_sistema_t;

/* ----------------------------- Variables privadas ----------------------------- */

static estado_sistema_t estado;

/* ---------------------- Prototipos de funciones privadas ---------------------- */

static void mostrar_datos();
static void enviar_datos();
static void iniciar_mostrar_datos();
static void descansar();

/* ---------------------- Prototipos de funciones privadas ---------------------- */

// inicializa la interfaz de usuario en el estado que muestra datos en el lcd y por la uart
void interfaz_iniciar() {
	iniciar_mostrar_datos();
	estado = MOSTRANDO_DATOS;
}

/* ---------------------------------- Funciones --------------------------------- */

// actualiza la interfaz de usuario
// En el estado MOSTRANDO_DATOS se visualizan los valores de temperatura y humedad
// en el lcd y se pasan por la UART.
// En el estado DESCANSO solo se pasan datos por la UART.
// El cambio de estados se produce por al pulsar el boton USER de la placa.
void interfaz_actualizar() {
	switch (estado) {
	case MOSTRANDO_DATOS:
		if (readKey()) {
			estado = DESCANSO;
			descansar();
		} else {
			// muestra datos en el lcd
			mostrar_datos();
			// envia datos por la uart
			enviar_datos();
		}
		break;
	case DESCANSO:
		if (readKey()) {
			estado = MOSTRANDO_DATOS;
			iniciar_mostrar_datos();
		} else {
			// envia datos por la uart
			enviar_datos();
		}
		break;
	default:
		estado = DESCANSO;
	}
}

/* ------------------------------ Funciones privadas ---------------------------- */

// muestra los datos actualizados en el lcd
static void mostrar_datos() {
	char cadena[100];
	float temperatura = dht_obtener_temperatura();
	float humedad = dht_obtener_humedad();
	lcd_ubicar(0, 2);
	if (-1 == temperatura) {
		sprintf(cadena, "s/d           ");
	} else {
		sprintf(cadena, "%2.2f         ", temperatura);
	}
	lcd_escribir_string(cadena);
	lcd_ubicar(1, 2);
	if (-1 == humedad) {
		sprintf(cadena, "s/d           ");
	} else {
		sprintf(cadena, "%2.2f         ", humedad);
	}
	lcd_escribir_string(cadena);
}

// envia los datos por la uart
static void mostrar_datos() {
	char cadena[100];
	float temperatura = dht_obtener_temperatura();
	float humedad = dht_obtener_humedad();
	char datos[100];
	sprintf(datos, "Nuevos datos: %2.2f %2.2f ", humedad_byte1, humedad_byte2, temperatura_byte1, temperatura_byte2, suma_control);
	uart_enviar_string((uint8_t *) datos);
}

// muestra los datos iniciales en el estado MOSTRANDO_DATOS
static void iniciar_mostrar_datos () {
	lcd_limpiar();
	lcd_luz_fondo(true);
	lcd_ubicar(0, 0);
	lcd_escribir_string("T: ");
	lcd_ubicar(1, 0);
	lcd_escribir_string("H: ");
}

// muestra los datos que se visualizan en el estado DESCANSAR
static void descansar() {
	lcd_limpiar();
	lcd_luz_fondo(true);
	lcd_ubicar(0,0);
	lcd_escribir_string("Descansando");
	lcd_ubicar(1,0);
	lcd_escribir_string("Datos por UART");
}
