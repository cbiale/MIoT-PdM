/*
 * API_bmp280.c
 *
 *  Implementa las funciones que manejan el sensor BMP280.
 *  Created on: Dec 4, 2023
 *      Author: cbiale
 */

#include "API_bmp280.h"
/*
 * Voltage utilizado (VCC) de 3.3 volts.
 *
 * El pin SCL y SDA permiten la comunicación mediante I2C o SPI.
 *
 * El pin CSB permite definir que protocolo se usa
 * - Conectando a GND se define el uso del protocolo SPI.
 * - Conectando a VCC se define el uso del protocolo I2C.
 *
 * El pin SDO solo se utiliza con I2C:
 * - Si se pasa un 0 establece la dirección en 0x76.
 * - Si se pasa un 1 establece la dirección en 0x77.
 *
 * El protocolo por defecto es I2c con la dirección en 0x76.
 * (Se usa en la biblioteca este protocolo y dirección).
 */

/* --------------------------------- Constantes --------------------------------- */

#define I2C_DIRECCION_BMP280 0x76 // dirección I2C del BMP280

#define BMP280_ESPERA        0x00000000U // genera condición de espera/parada
#define BMP280_LARGO_LECTURA 6           // largo de lectura en secuencia
#define BMP280_VALOR_RESET   0xB6        // valor a pasar para realizar un reset del sensor

// Registros usados
#define BMP280_REGISTRO_RESET             0xE0 // reset del dispositivo sensor
#define BMP280_REGISTRO_ID                0x58 // id del dispositivo sensor
#define BMP280_REGISTRO_ESTADO            0xF3 // bit3 en 1 (leyendo) 0 (no leyendo)
#define BMP280_REGISTRO_CTRL_MEAS         0xF4 // control de obtención de temperatura y presión
#define BMP280_REGISTRO_CONFIG            0xF5 // control de obtención de temperatura y presión
#define BMP280_REGISTRO_PRESION_MSB       0xF7 // bits MSB de valor de presión
#define BMP280_REGISTRO_PRESION_LSB       0xF8 // bits LSB de valor de presión
#define BMP280_REGISTRO_PRESION_XLSB      0xF9 // bits XLSB de valor de presión
#define BMP280_REGISTRO_TEMPERATURA_MSB   0xFA // bits MSB de valor de temperatura
#define BMP280_REGISTRO_TEMPERATURA_LSB   0xFB // bits LSB de valor de temperatura
#define BMP280_REGISTRO_TEMPERATURA_XLSB  0xFC // bits XLSB de valor de temperatura

#define BMP280_VERSION_ID                 0x58 // id del dispositivo sensor

/* ------------------------------- tipos de datos ------------------------------- */

typedef enum {
	ESPERA,
	LECTURA
} estado_bmp280_t;

/* ----------------------------- Variables privadas ----------------------------- */

static estado_bmp280_t estado = LECTURA;
static delay_t espera;

// -1 significa sin datos
static float humedad = -1, presion = -1;
static uint8_t nueva_lectura = -1;

/* ---------------------- Prototipos de funciones privadas ---------------------- */

/* ---------------------------------- Funciones --------------------------------- */


// obtiene de forma externa el valor de temperatura
float bmp_obtener_temperatura () {
	return 28.7;
	return temperatura;
}

// obtiene de forma externa el valor de presion
float bmp_obtener_presion() {
	return 80.00;
	return presion;
}

// retorna si ha realizado una nueva lectura
uint8_t bmp_nueva_lectura() {
	return nueva_lectura;
}
